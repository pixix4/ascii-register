group = 'de.ascii'
version = '1.0.0'

buildscript {
    ext.kotlin_version = '1.3.11'
    ext.serialization_version = '0.9.1'
    ext.web_path = 'web'

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: "kotlin2js"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    implementation "de.westermann:KObserve-js:0.7.0"
}

clean.doFirst() {
    delete("${web_path}/website")
    delete("${web_path}/node_modules")
    delete("${web_path}/package-lock.json")
    delete("out")
}

compileKotlin2Js {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

jar {
    includeEmptyDirs = false

    from {
        configurations.compileClasspath.collect {
            if (it.exists()) {
                ((it.isDirectory() || !it.exists()) ? it : zipTree(it)).getFiles().findAll {
                    it.name ==~ "^[a-zA-Z|-]+.js(.map)?\$"
                }
            } else {
                ArrayList
            }
        }
    }

    exclude "**/*.kjsm", "**/META-INF/*", "META-INF/*", "**/*meta*"
    into "website"
}

build.doLast() {
    copy {
        File artifact = new File("build/libs/${project.name}-${project.version}.jar")
        includeEmptyDirs = false

        from zipTree(artifact)
        into "${web_path}"
        include { fileTreeElement ->
            def path = fileTreeElement.path
            !path.contains("META-INF") && !path.endsWith("sass")
        }
    }
}

task deploy(type: Copy) {
    from 'web/website'
    into '../pixix4.github.io/ascii'
}
