{"version":3,"file":"ascii-register.js","sources":["../../../../src/main/kotlin/de/ascii/CashBox.kt","../../../../../src/commonMain/kotlin/de/westermann/kobserve/event/EventBus.kt","generated/_Collections.kt","comparisons/Comparisons.kt","kotlin/Comparator.kt","kotlin/math.kt","collections/Maps.kt","generated/_Strings.kt","text/regex/RegexExtensions.kt","text/Strings.kt","../../../../src/main/kotlin/de/ascii/BookDialog.kt","../../../../src/main/kotlin/de/ascii/Cash.kt","../../../../../../../../../dummy.kt","util/Standard.kt","../../../../src/main/kotlin/de/ascii/CashEntry.kt","../../../../src/main/kotlin/de/ascii/CashProblem.kt","../../../../src/main/kotlin/de/ascii/Envelope.kt","org.w3c/org.w3c.dom.kt","../../../../src/main/kotlin/de/ascii/EnvelopeEntry.kt","../../../../src/main/kotlin/de/ascii/History.kt","../../../../src/main/kotlin/de/ascii/MoneyGroup.kt","collections/Collections.kt","../../../../src/main/kotlin/de/ascii/Settings.kt","../../../../src/main/kotlin/de/ascii/Snapshot.kt","collections/MutableCollections.kt","../../../../src/main/kotlin/de/ascii/coin/Coin.kt","../../../../src/main/kotlin/de/ascii/coin/CoinBox.kt","../../../../src/main/kotlin/de/ascii/coin/CoinGroup.kt","../../../../src/main/kotlin/de/ascii/coin/CoinStack.kt","../../../../src/main/kotlin/de/ascii/coin/CoinStackGroup.kt","../../../../src/main/kotlin/de/ascii/main.kt","../../../../src/main/kotlin/de/ascii/note/Note.kt","../../../../src/main/kotlin/de/ascii/note/NoteBox.kt","../../../../src/main/kotlin/de/ascii/note/NoteGroup.kt","../../../../src/main/kotlin/de/ascii/note/NoteStack.kt","../../../../src/main/kotlin/de/westermann/kwebview/AttributeDelegate.kt","kotlin/string.kt","../../../../src/main/kotlin/de/westermann/kwebview/ClassDelegate.kt","../../../../src/main/kotlin/de/westermann/kwebview/ClassList.kt","../../../../src/main/kotlin/de/westermann/kwebview/DataSet.kt","../../../../src/main/kotlin/de/westermann/kwebview/Dimension.kt","../../../../src/main/kotlin/de/westermann/kwebview/extensions.kt","../../../../src/main/kotlin/de/westermann/kwebview/Document.kt","../../../../src/main/kotlin/de/westermann/kwebview/KWebViewDsl.kt","../../../../src/main/kotlin/de/westermann/kwebview/Point.kt","../../../../src/main/kotlin/de/westermann/kwebview/TouchPolyfill.kt","../../../../src/main/kotlin/de/westermann/kwebview/View.kt","../../../../src/main/kotlin/de/westermann/kwebview/ViewCollection.kt","../../../../src/main/kotlin/de/westermann/kwebview/ViewForLabel.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Body.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/BoxView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Button.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Checkbox.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/FilterList.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Heading.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/IconView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/ImageView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/InputView.kt","generated/_Arrays.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Label.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Link.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/MaterialIcon.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/OptionView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/SelectView.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/Table.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TableCaption.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TableCell.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TableRow.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TableSection.kt","../../../../src/main/kotlin/de/westermann/kwebview/components/TextView.kt","../../../../src/main/kotlin/de/westermann/kwebview/extra/ListFactory.kt","../../../../src/main/kotlin/de/westermann/kwebview/i18n.kt","kotlin/promise.kt"],"sourcesContent":["package de.ascii\n\nimport de.ascii.coin.CoinBox\nimport de.ascii.note.NoteBox\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.event.emit\nimport de.westermann.kobserve.event.subscribe\nimport de.westermann.kobserve.property.*\nimport de.westermann.kwebview.*\nimport de.westermann.kwebview.components.*\n\nclass CashBox : ViewCollection<View>() {\n\n    private val cash = Cash()\n\n    private val modeProperty = property(Mode.EDIT)\n    private var mode by modeProperty\n\n    private var saveCash = true\n    private var hideSnapshot = false\n\n    private val editable = modeProperty.mapBinding { it == Mode.EDIT }\n\n    private lateinit var targetView: TextView\n\n    private val totalErrorProperty = modeProperty.join(cash.totalProperty) { calc, total ->\n        calc == Mode.CALCULATE && total != CashEntry.default.totalProperty.value\n    }\n\n    private val snapshotDiffProperty = Snapshot.currentSnapshotProperty.join(Snapshot.nowProperty) { snapshot, now ->\n        now - (snapshot?.date ?: 0L)\n    }\n\n    private val snapshotStringProperty = snapshotDiffProperty.join(modeProperty) { snapshot, mode ->\n        if (mode == Mode.HISOTRY || mode == Mode.SETTINGS) return@join \"\"\n        val diff = snapshot / 1000\n        if (snapshot == 0L || diff < 300 || cash.totalProperty.value == 0.0 || hideSnapshot) \"\"\n        else Snapshot.formatTimeDiff(diff)\n    }\n\n    private val bookDialog = BookDialog(cash)\n\n    init {\n        Snapshot.newestSnapshot.value?.let {\n            cash.currentCash.load(it.cash)\n        }\n\n        cash.totalProperty.onChange {\n            if (saveCash) Snapshot.save(cash.currentCash)\n        }\n\n        boxView {\n            boxView {\n                classList += \"header-box\"\n\n                boxView {\n                    classList.bind(\"error\", totalErrorProperty)\n                    val iconProperty: ReadOnlyProperty<Icon?> = modeProperty.mapBinding { if (it == Mode.EDIT) MaterialIcon.CLEAR else MaterialIcon.ARROW_BACK }\n\n                    property(this::title).bind(modeProperty.mapBinding { if (it == Mode.EDIT) t(\"reset\") else t(\"back\") }.flatten())\n\n                    iconView(iconProperty) {\n                        onClick {\n                            emit(ResetEvent)\n                        }\n                    }\n                    iconView(MaterialIcon.HISTORY) {\n                        property(this::title).bind(t(\"history\"))\n                        onClick {\n                            if (mode == Mode.CALCULATE) {\n                                emit(ResetEvent)\n                            }\n                            mode = Mode.HISOTRY\n                        }\n                    }\n                    iconView(MaterialIcon.SETTINGS) {\n                        property(this::title).bind(t(\"settings\"))\n                        onClick {\n                            if (mode == Mode.CALCULATE) {\n                                emit(ResetEvent)\n                            }\n                            mode = Mode.SETTINGS\n                        }\n                    }\n                }\n\n                textView(modeProperty.join(cash.totalProperty) { mode, total ->\n                    when (mode) {\n                        Mode.EDIT, Mode.CALCULATE -> constProperty(\"${total.format(2)} \u20ac\")\n                        Mode.SETTINGS -> t(\"settings\")\n                        Mode.HISOTRY -> t(\"history\")\n                    }\n                }.flatten()) {\n                    classList.bind(\"error\", totalErrorProperty)\n                }\n                targetView = textView {\n                    classList += \"target\"\n                }\n                textView(snapshotStringProperty) {\n                    classList += \"snapshot\"\n                }\n\n                boxView {\n                    classList.bind(\"error\", totalErrorProperty)\n                    textView(t(\"calculate\")) {\n                        onClick {\n                            emit(CalculateEvent)\n                        }\n                    }\n                }\n            }\n\n            boxView(\"container\") {\n                val box = BoxView().apply {\n                    +CoinBox(cash, editable)\n                    +NoteBox(cash, editable)\n                }\n                val settings = Settings()\n                val history = History()\n\n                bindView(modeProperty) {\n                    when (mode) {\n                        Mode.EDIT -> box\n                        Mode.CALCULATE -> box\n                        Mode.SETTINGS -> settings\n                        Mode.HISOTRY -> history\n                    }\n                }\n            }\n        }\n        boxView {\n            +Envelope(cash, totalErrorProperty)\n        }\n\n        modeProperty.onChange {\n            classList[\"calculate\"] = mode == Mode.CALCULATE\n            classList[\"history-mode\"] = mode == Mode.HISOTRY\n        }\n        classList[\"calculate\"] = mode == Mode.CALCULATE\n        classList[\"history-mode\"] = mode == Mode.HISOTRY\n\n        Snapshot.onLoad {\n            val oldSave = saveCash\n            saveCash = false\n            cash.currentCash.load(it.cash)\n            saveCash = oldSave\n            mode = Mode.EDIT\n        }\n\n        subscribe<CalculateEvent> {\n            if (mode == Mode.EDIT) {\n                saveCash = false\n                cash.calculate()\n                async(Cash.ANIMATION_TIME + 200) {\n                    mode = Mode.CALCULATE\n                    bookDialog.show()\n                }\n            }\n        }\n        subscribe<ResetEvent> {\n            if (mode == Mode.CALCULATE) {\n                bookDialog.hide()\n                async(300) {\n                    val current = cash.previousCash.copy()\n                    cash.shift(cash.previousCash, true)\n                    cash.previousCash = current\n                    async(Cash.ANIMATION_TIME) {\n                        cash.previousCash = CashEntry()\n                        saveCash = true\n                    }\n                }\n            } else if (mode == Mode.EDIT) {\n                saveCash = false\n                cash.shift(CashEntry(), true)\n                cash.previousCash = CashEntry()\n                async(Cash.ANIMATION_TIME) {\n                    saveCash = true\n                }\n            }\n            mode = Mode.EDIT\n        }\n        +bookDialog\n    }\n}\n\nobject CalculateEvent\nobject ResetEvent\n\nenum class Mode {\n    EDIT, CALCULATE, SETTINGS, HISOTRY\n}\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual interface Comparator<T> {\n    @JsName(\"compare\")\n    actual fun compare(a: T, b: T): Int\n}\n\npublic actual inline fun <T> Comparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> = object : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparison(a, b)\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n@file:Suppress(\"DEPRECATION\", \"DEPRECATION_ERROR\")\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.Math as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeMath.sinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeMath.cosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeMath.tanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeMath.asinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeMath.acosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeMath.atanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeMath.hypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeMath.expm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeMath.log10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeMath.log2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeMath.log1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x).unsafeCast<Double>() // TODO: Remove unsafe cast after removing public js.math\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x).unsafeCast<Double>()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeMath.trunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x).unsafeCast<Double>()\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeMath.sign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeMath.sign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.withSign(sign: Double): Double {\n    val thisSignBit = js(\"Kotlin\").doubleSignBit(this).unsafeCast<Int>()\n    val newSignBit = js(\"Kotlin\").doubleSignBit(sign).unsafeCast<Int>()\n    return if (thisSignBit == newSignBit) this else -this\n}\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).unsafeCast<Double>().toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeMath.sinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeMath.cosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeMath.tanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeMath.asinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeMath.acosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeMath.atanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeMath.hypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeMath.expm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeMath.log10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeMath.log2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeMath.log1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeMath.sign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeMath.sign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Calculate the initial capacity of a map, based on Guava's com.google.common.collect.Maps approach. This is equivalent\n * to the Collection constructor for HashSet, (c.size()/.75f) + 1, but provides further optimisations for very small or\n * very large sizes, allows support non-collection classes, and provides consistency for all map based class construction.\n */\n@PublishedApi\ninternal fun mapCapacity(expectedSize: Int): Int {\n    if (expectedSize < 3) {\n        return expectedSize + 1\n    }\n    if (expectedSize < INT_MAX_POWER_OF_TWO) {\n        return expectedSize + expectedSize / 3\n    }\n    return Int.MAX_VALUE // any large value\n}\n\nprivate const val INT_MAX_POWER_OF_TWO: Int = Int.MAX_VALUE / 2 + 1\n\n/** Returns `true` if this map is not empty. */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length)))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each character of the original char sequence.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the desired action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\npublic fun CharSequence.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\npublic fun CharSequence.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val result = ArrayList<R>((thisSize + step - 1) / step)\n    var index = 0\n    while (index < thisSize) {\n        val end = index + size\n        val coercedEnd = if (end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index -> transform(subSequence(index, (index + size).coerceAtMost(length))) }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * Converts the string into a regular expression [Regex] with the default options.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(): Regex = Regex(this)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified single [option].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(option: RegexOption): Regex = Regex(this, option)\n\n/**\n * Converts the string into a regular expression [Regex] with the specified set of [options].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.toRegex(options: Set<RegexOption>): Regex = Regex(this, options)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.append(this, 0, startIndex)\n    sb.append(replacement)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.append(this, 0, startIndex)\n    sb.append(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" } )\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    require(limit >= 0, { \"Limit must be non-negative, but was $limit.\" })\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n","package de.ascii\n\nimport de.westermann.kobserve.property.join\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kwebview.*\nimport de.westermann.kwebview.components.MaterialIcon\nimport de.westermann.kwebview.components.boxView\nimport de.westermann.kwebview.components.iconView\nimport de.westermann.kwebview.components.textView\n\nclass BookDialog(\n        private val cash: Cash\n) : ViewCollection<View>() {\n\n    private val visible: Boolean\n        get() = \"active\" in classList\n\n    fun show() {\n        classList += \"active\"\n    }\n\n    fun hide() {\n        classList -= \"active\"\n    }\n\n    init {\n        Document.onKeyPress {\n            if (it.keyCode == 27 && visible) {\n                hide()\n                it.stopPropagation()\n                it.preventDefault()\n            }\n        }\n\n        onClick {\n            hide()\n        }\n\n        boxView {\n            onClick {\n                it.stopPropagation()\n            }\n            boxView {\n                textView(t(\"cash-book\"))\n                iconView(MaterialIcon.CLOSE) {\n                    onClick {\n                        hide()\n                    }\n                }\n            }\n            boxView {\n                textView(cash.previousTotalProperty.mapBinding { \"${it.format(2)} \u20ac\" })\n                textView(cash.totalProperty.join(cash.previousTotalProperty) { current, old -> \"${(old - current).format(2)} \u20ac\" })\n                textView(cash.totalProperty.mapBinding { \"${it.format(2)} \u20ac\" })\n                textView(\"-\")\n\n                textView(Envelope.dateString)\n\n                textView(cash.previousNote100Property.mapBinding { \"$it\" })\n                textView(cash.previousNote50Property.mapBinding { \"$it\" })\n                textView(cash.previousNote20Property.mapBinding { \"$it\" })\n                textView(cash.previousNote10Property.mapBinding { \"$it\" })\n                textView(cash.previousNote5Property.mapBinding { \"$it\" })\n                textView(cash.previousCoin200Property.mapBinding { \"$it\" })\n                textView(cash.previousCoin100Property.mapBinding { \"$it\" })\n                textView(cash.previousCoin50Property.mapBinding { \"$it\" })\n                textView(cash.previousCoin20Property.mapBinding { \"$it\" })\n                textView(cash.previousCoin10Property.mapBinding { \"$it\" })\n                textView(cash.previousCoin5Property.mapBinding { \"$it\" })\n                textView(cash.previousCoin2Property.mapBinding { \"$it\" })\n                textView(cash.previousCoin1Property.mapBinding { \"$it\" })\n\n                textView(cash.previousTotalProperty.mapBinding { \"${it.format(2)} \u20ac\" })\n                //textView(t(\"sign\"))\n            }\n        }\n    }\n}","package de.ascii\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.property.flatMapBinding\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.async\nimport kotlin.js.Date\nimport kotlin.math.roundToInt\n\nclass Cash(\n        currentCash: CashEntry = CashEntry(),\n        previousCash: CashEntry = CashEntry()\n) {\n    val currentCashProperty = property(currentCash)\n    var currentCash by currentCashProperty\n\n    val previousCashProperty = property(previousCash)\n    var previousCash by previousCashProperty\n\n    fun shift(cash: CashEntry, animate: Boolean = false) {\n        previousCash = currentCash\n        currentCash = cash\n\n        if (animate) {\n            val note100P = note100Property.value\n            val note50P = note50Property.value\n            val note20P = note20Property.value\n            val note10P = note10Property.value\n            val note5P = note5Property.value\n            val coin200P = coin200Property.value\n            val coin100P = coin100Property.value\n            val coin50P = coin50Property.value\n            val coin20P = coin20Property.value\n            val coin10P = coin10Property.value\n            val coin5P = coin5Property.value\n            val coin2P = coin2Property.value\n            val coin1P = coin1Property.value\n\n            note100Property.value = previousNote100Property.value\n            note50Property.value = previousNote50Property.value\n            note20Property.value = previousNote20Property.value\n            note10Property.value = previousNote10Property.value\n            note5Property.value = previousNote5Property.value\n            coin200Property.value = previousCoin200Property.value\n            coin100Property.value = previousCoin100Property.value\n            coin50Property.value = previousCoin50Property.value\n            coin20Property.value = previousCoin20Property.value\n            coin10Property.value = previousCoin10Property.value\n            coin5Property.value = previousCoin5Property.value\n            coin2Property.value = previousCoin2Property.value\n            coin1Property.value = previousCoin1Property.value\n\n            currentCash = cash\n\n            animate(note100Property, previousNote100Property.value, note100P)\n            animate(note50Property, previousNote50Property.value, note50P)\n            animate(note20Property, previousNote20Property.value, note20P)\n            animate(note10Property, previousNote10Property.value, note10P)\n            animate(note5Property, previousNote5Property.value, note5P)\n            animate(coin200Property, previousCoin200Property.value, coin200P)\n            animate(coin100Property, previousCoin100Property.value, coin100P)\n            animate(coin50Property, previousCoin50Property.value, coin50P)\n            animate(coin20Property, previousCoin20Property.value, coin20P)\n            animate(coin10Property, previousCoin10Property.value, coin10P)\n            animate(coin5Property, previousCoin5Property.value, coin5P)\n            animate(coin2Property, previousCoin2Property.value, coin2P)\n            animate(coin1Property, previousCoin1Property.value, coin1P)\n        } else {\n            currentCash = cash\n        }\n    }\n\n    val note100Property = currentCashProperty.flatMapBinding(CashEntry::note100Property)\n    val note50Property = currentCashProperty.flatMapBinding(CashEntry::note50Property)\n    val note20Property = currentCashProperty.flatMapBinding(CashEntry::note20Property)\n    val note10Property = currentCashProperty.flatMapBinding(CashEntry::note10Property)\n    val note5Property = currentCashProperty.flatMapBinding(CashEntry::note5Property)\n    val coin200Property = currentCashProperty.flatMapBinding(CashEntry::coin200Property)\n    val coin100Property = currentCashProperty.flatMapBinding(CashEntry::coin100Property)\n    val coin50Property = currentCashProperty.flatMapBinding(CashEntry::coin50Property)\n    val coin20Property = currentCashProperty.flatMapBinding(CashEntry::coin20Property)\n    val coin10Property = currentCashProperty.flatMapBinding(CashEntry::coin10Property)\n    val coin5Property = currentCashProperty.flatMapBinding(CashEntry::coin5Property)\n    val coin2Property = currentCashProperty.flatMapBinding(CashEntry::coin2Property)\n    val coin1Property = currentCashProperty.flatMapBinding(CashEntry::coin1Property)\n    val totalProperty = currentCashProperty.flatMapBinding(CashEntry::totalProperty)\n\n    val previousNote100Property = previousCashProperty.flatMapBinding(CashEntry::note100Property)\n    val previousNote50Property = previousCashProperty.flatMapBinding(CashEntry::note50Property)\n    val previousNote20Property = previousCashProperty.flatMapBinding(CashEntry::note20Property)\n    val previousNote10Property = previousCashProperty.flatMapBinding(CashEntry::note10Property)\n    val previousNote5Property = previousCashProperty.flatMapBinding(CashEntry::note5Property)\n    val previousCoin200Property = previousCashProperty.flatMapBinding(CashEntry::coin200Property)\n    val previousCoin100Property = previousCashProperty.flatMapBinding(CashEntry::coin100Property)\n    val previousCoin50Property = previousCashProperty.flatMapBinding(CashEntry::coin50Property)\n    val previousCoin20Property = previousCashProperty.flatMapBinding(CashEntry::coin20Property)\n    val previousCoin10Property = previousCashProperty.flatMapBinding(CashEntry::coin10Property)\n    val previousCoin5Property = previousCashProperty.flatMapBinding(CashEntry::coin5Property)\n    val previousCoin2Property = previousCashProperty.flatMapBinding(CashEntry::coin2Property)\n    val previousCoin1Property = previousCashProperty.flatMapBinding(CashEntry::coin1Property)\n    val previousTotalProperty = previousCashProperty.flatMapBinding(CashEntry::totalProperty)\n\n    fun calculate() {\n        val result = currentCash.copy()\n\n        CashProblem.solve(result)\n\n        shift(result, true)\n    }\n\n    companion object {\n        const val ANIMATION_TIME = 400\n\n        private fun ease(t: Double): Double {\n            var t2 = t * 2\n            return (when {\n                t2 <= 1 -> t2 * t2 * t2\n                else -> {\n                    t2 -= 2\n                    t2 * t2 * t2 + 2\n                }\n            }) / 2.0\n        }\n\n        fun animate(property: Property<Int>, from: Int, to: Int) {\n            property.value = from\n\n            val start = Date.now()\n            val duration = ANIMATION_TIME\n            val end = start + duration\n\n            val delta = to - from\n\n            fun step() {\n                val now = Date.now()\n                if (now > end) {\n                    property.value = to\n                } else {\n                    val progress = ease((now - start) / duration)\n                    property.value = from + (progress * delta).roundToInt()\n\n                    async(10) { step() }\n                }\n            }\n\n            async(10) { step() }\n        }\n    }\n}\n",null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","package de.ascii\n\nimport de.westermann.kobserve.property.property\nimport de.westermann.kobserve.plus\nimport de.westermann.kobserve.times\n\ndata class CashEntry(\n        private var note100: Int = 0,\n        private var note50: Int = 0,\n        private var note20: Int = 0,\n        private var note10: Int = 0,\n        private var note5: Int = 0,\n        private var coin200: Int = 0,\n        private var coin100: Int = 0,\n        private var coin50: Int = 0,\n        private var coin20: Int = 0,\n        private var coin10: Int = 0,\n        private var coin5: Int = 0,\n        private var coin2: Int = 0,\n        private var coin1: Int = 0\n) {\n    val note100Property = property(this::note100)\n    val note50Property = property(this::note50)\n    val note20Property = property(this::note20)\n    val note10Property = property(this::note10)\n    val note5Property = property(this::note5)\n    val coin200Property = property(this::coin200)\n    val coin100Property = property(this::coin100)\n    val coin50Property = property(this::coin50)\n    val coin20Property = property(this::coin20)\n    val coin10Property = property(this::coin10)\n    val coin5Property = property(this::coin5)\n    val coin2Property = property(this::coin2)\n    val coin1Property = property(this::coin1)\n\n    val totalProperty = note100Property * 100.0 +\n            note50Property * 50.0 +\n            note20Property * 20.0 +\n            note10Property * 10.0 +\n            note5Property * 5.0 +\n            coin200Property * 2.0 +\n            coin100Property * 1.0 +\n            coin50Property * 0.5 +\n            coin20Property * 0.2 +\n            coin10Property * 0.1 +\n            coin5Property * 0.05 +\n            coin2Property * 0.02 +\n            coin1Property * 0.01\n\n    fun load(cash: CashEntry) {\n        note100Property.value = cash.note100Property.value\n        note50Property.value = cash.note50Property.value\n        note20Property.value = cash.note20Property.value\n        note10Property.value = cash.note10Property.value\n        note5Property.value = cash.note5Property.value\n        coin200Property.value = cash.coin200Property.value\n        coin100Property.value = cash.coin100Property.value\n        coin50Property.value = cash.coin50Property.value\n        coin20Property.value = cash.coin20Property.value\n        coin10Property.value = cash.coin10Property.value\n        coin5Property.value = cash.coin5Property.value\n        coin2Property.value = cash.coin2Property.value\n        coin1Property.value = cash.coin1Property.value\n    }\n\n    companion object {\n        val default: CashEntry\n            get() = CashEntry(\n                    0,\n                    0,\n                    0,\n                    2,\n                    2,\n                    13,\n                    25,\n                    23,\n                    25,\n                    25,\n                    0,\n                    0,\n                    0\n            )\n    }\n}","package de.ascii\n\nimport de.westermann.kobserve.Property\n\nobject CashProblem {\n    fun solve(cash: CashEntry) {\n        val target = CashEntry.default\n        val targetTotal = target.totalProperty.value\n\n        while (cash.totalProperty.value > targetTotal) {\n            val first = listOf(\n                    Help(100.0, cash.note100Property, target.note100Property),\n                    Help(50.0, cash.note50Property, target.note50Property),\n                    Help(20.0, cash.note20Property, target.note20Property),\n                    Help(10.0, cash.note10Property, target.note10Property),\n                    Help(5.0, cash.note5Property, target.note5Property),\n                    Help(2.0, cash.coin200Property, target.coin200Property),\n                    Help(1.0, cash.coin100Property, target.coin100Property),\n                    Help(0.50, cash.coin50Property, target.coin50Property),\n                    Help(0.20, cash.coin20Property, target.coin20Property),\n                    Help(0.10, cash.coin10Property, target.coin10Property),\n                    Help(0.05, cash.coin5Property, target.coin5Property),\n                    Help(0.02, cash.coin2Property, target.coin2Property),\n                    Help(0.01, cash.coin1Property, target.coin1Property)\n            ).filter {\n                cash.totalProperty.value - it.value >= targetTotal && it.property.value > 0\n            }.sortedBy { it.diffWeighted }.firstOrNull() ?: return\n\n            first.property.value -= 1\n        }\n    }\n\n    data class Help(\n            val value: Double,\n            val property: Property<Int>,\n            val target: Property<Int>\n    ) {\n        private val diff = (target.value - property.value)\n\n        private val weight = when (value) {\n            100.0 -> 10.0\n            50.0 -> 10.0\n            20.0 -> 4.0\n            10.0 -> 1.1\n            5.0 -> 1.1\n            2.0 -> 1.0\n            1.0 -> 0.9\n            0.50 -> 0.9\n            0.20 -> 1.2\n            0.10 -> 1.5\n            0.05 -> 6.0\n            0.02 -> 9.0\n            0.01 -> 9.0\n            else -> 1.0\n        }\n\n        val diffWeighted = diff * weight\n    }\n}","package de.ascii\n\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kobserve.property.property\nimport de.westermann.kobserve.minus\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.*\nimport de.westermann.kwebview.format\nimport de.westermann.kwebview.t\nimport org.w3c.dom.get\nimport org.w3c.dom.set\nimport kotlin.browser.window\nimport kotlin.js.Date\n\nclass Envelope(\n        val cash: Cash,\n        val errorProperty: ReadOnlyProperty<Boolean>\n) : ViewCollection<View>() {\n\n    private val sumProperty = cash.previousTotalProperty - cash.totalProperty\n\n    init {\n        boxView(\"envelope-header\") {\n            classList.bind(\"error\", errorProperty)\n            textView(t(\"envelope\"))\n        }\n        boxView(\"envelope-body\") {\n            +EnvelopeEntry(\"100 EURO\", 100.0, cash.note100Property, cash.previousNote100Property)\n            +EnvelopeEntry(\"50 EURO\", 50.0, cash.note50Property, cash.previousNote50Property)\n            +EnvelopeEntry(\"20 EURO\", 20.0, cash.note20Property, cash.previousNote20Property)\n            +EnvelopeEntry(\"10 EURO\", 10.0, cash.note10Property, cash.previousNote10Property)\n            +EnvelopeEntry(\"5 EURO\", 5.0, cash.note5Property, cash.previousNote5Property)\n            +EnvelopeEntry(\"2 EURO\", 2.0, cash.coin200Property, cash.previousCoin200Property)\n            +EnvelopeEntry(\"1 EURO\", 1.0, cash.coin100Property, cash.previousCoin100Property)\n            +EnvelopeEntry(\"50 CENT\", 0.5, cash.coin50Property, cash.previousCoin50Property)\n            +EnvelopeEntry(\"20 CENT\", 0.2, cash.coin20Property, cash.previousCoin20Property)\n            +EnvelopeEntry(\"10 CENT\", 0.1, cash.coin10Property, cash.previousCoin10Property)\n            +EnvelopeEntry(\"5 CENT\", 0.05, cash.coin5Property, cash.previousCoin5Property)\n            +EnvelopeEntry(\"2 CENT\", 0.02, cash.coin2Property, cash.previousCoin2Property)\n            +EnvelopeEntry(\"1 CENT\", 0.01, cash.coin1Property, cash.previousCoin1Property)\n        }\n        boxView(\"envelope-total\") {\n            textView(t(\"total\").mapBinding { \"$it: \" })\n            inputView(sumProperty.mapBinding { \"${it.format(2)} \u20ac\" }) {\n                readonly = true\n                preventTabStop()\n            }\n        }\n\n        boxView(\"envelope-cover\") {\n            table {\n                row {\n                    cell {\n                        textView(t(\"name\").mapBinding { \"$it: \" })\n                    }\n                    cell {\n                        inputView(window.localStorage[\"username\"] ?: \"\") {\n                            valueProperty.onChange {\n                                window.localStorage[\"username\"] = value\n                            }\n                            property(this::placeholder ).bind(t(\"your_name\"))\n                        }\n                    }\n                }\n                row {\n                    cell {\n                        textView(t(\"date\").mapBinding { \"$it: \" })\n                    }\n                    cell {\n                        textView(dateString)\n                    }\n                }\n                row {\n                    cell {\n                        textView(t(\"money\").mapBinding { \"$it: \" })\n                    }\n                    cell {\n                        textView(sumProperty.mapBinding { \"${it.format(2)} \u20ac\" })\n                    }\n                }\n            }\n        }\n    }\n\n    companion object {\n\n        val dateString = Date().let { date ->\n            \"${date.getDate().let {\n                if (it < 10) \"0$it\" else it\n            }}.${(date.getMonth() + 1).let {\n                if (it < 10) \"0$it\" else it\n            }}.${date.getFullYear()}\"\n        }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n// NOTE: THIS FILE IS AUTO-GENERATED, DO NOT EDIT!\n// See libraries/tools/idl2k for details\n\n@file:Suppress(\"NESTED_CLASS_IN_EXTERNAL_INTERFACE\")\npackage org.w3c.dom\n\nimport kotlin.js.*\nimport org.khronos.webgl.*\nimport org.w3c.css.masking.*\nimport org.w3c.dom.clipboard.*\nimport org.w3c.dom.css.*\nimport org.w3c.dom.events.*\nimport org.w3c.dom.mediacapture.*\nimport org.w3c.dom.parsing.*\nimport org.w3c.dom.pointerevents.*\nimport org.w3c.dom.svg.*\nimport org.w3c.dom.url.*\nimport org.w3c.fetch.*\nimport org.w3c.files.*\nimport org.w3c.notifications.*\nimport org.w3c.performance.*\nimport org.w3c.workers.*\nimport org.w3c.xhr.*\n\n/**\n * Exposes the JavaScript [Navigator](https://developer.mozilla.org/en/docs/Web/API/Navigator) to Kotlin\n */\npublic external abstract class Navigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorContentUtils, NavigatorCookies, NavigatorPlugins, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n    open val maxTouchPoints: Int\n    open val mediaDevices: MediaDevices\n    open val clipboard: Clipboard\n    fun vibrate(pattern: dynamic): Boolean\n    fun getUserMedia(constraints: MediaStreamConstraints, successCallback: (MediaStream) -> Unit, errorCallback: (dynamic) -> Unit): Unit\n}\n\n/**\n * Exposes the JavaScript [Document](https://developer.mozilla.org/en/docs/Web/API/Document) to Kotlin\n */\npublic external open class Document : Node, GlobalEventHandlers, DocumentAndElementEventHandlers, NonElementParentNode, DocumentOrShadowRoot, ParentNode, GeometryUtils {\n    open val fullscreenEnabled: Boolean\n    open val fullscreen: Boolean\n    var onfullscreenchange: ((Event) -> dynamic)?\n    var onfullscreenerror: ((Event) -> dynamic)?\n    open val rootElement: SVGSVGElement?\n    var title: String\n    open val referrer: String\n    var domain: String\n    open val activeElement: Element?\n    open val location: Location?\n    var cookie: String\n    open val lastModified: String\n    open val readyState: DocumentReadyState\n    var dir: String\n    var body: HTMLElement?\n    open val head: HTMLHeadElement?\n    open val images: HTMLCollection\n    open val embeds: HTMLCollection\n    open val plugins: HTMLCollection\n    open val links: HTMLCollection\n    open val forms: HTMLCollection\n    open val scripts: HTMLCollection\n    open val currentScript: HTMLOrSVGScriptElement?\n    open val defaultView: Window?\n    var designMode: String\n    var onreadystatechange: ((Event) -> dynamic)?\n    var fgColor: String\n    var linkColor: String\n    var vlinkColor: String\n    var alinkColor: String\n    var bgColor: String\n    open val anchors: HTMLCollection\n    open val applets: HTMLCollection\n    open val all: HTMLAllCollection\n    open val implementation: DOMImplementation\n    open val URL: String\n    open val documentURI: String\n    open val origin: String\n    open val compatMode: String\n    open val characterSet: String\n    open val charset: String\n    open val inputEncoding: String\n    open val contentType: String\n    open val doctype: DocumentType?\n    open val documentElement: Element?\n    open val scrollingElement: Element?\n    open val styleSheets: StyleSheetList\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override val fullscreenElement: Element?\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    fun exitFullscreen(): Promise<Unit>\n    fun getElementsByName(elementName: String): NodeList\n    fun open(type: String = definedExternally, replace: String = definedExternally): Document\n    fun open(url: String, name: String, features: String): Window\n    fun close(): Unit\n    fun write(vararg text: String): Unit\n    fun writeln(vararg text: String): Unit\n    fun hasFocus(): Boolean\n    fun execCommand(commandId: String, showUI: Boolean = definedExternally, value: String = definedExternally): Boolean\n    fun queryCommandEnabled(commandId: String): Boolean\n    fun queryCommandIndeterm(commandId: String): Boolean\n    fun queryCommandState(commandId: String): Boolean\n    fun queryCommandSupported(commandId: String): Boolean\n    fun queryCommandValue(commandId: String): String\n    fun clear(): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun createElement(localName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createElementNS(namespace: String?, qualifiedName: String, options: ElementCreationOptions = definedExternally): Element\n    fun createDocumentFragment(): DocumentFragment\n    fun createTextNode(data: String): Text\n    fun createCDATASection(data: String): CDATASection\n    fun createComment(data: String): Comment\n    fun createProcessingInstruction(target: String, data: String): ProcessingInstruction\n    fun importNode(node: Node, deep: Boolean = definedExternally): Node\n    fun adoptNode(node: Node): Node\n    fun createAttribute(localName: String): Attr\n    fun createAttributeNS(namespace: String?, qualifiedName: String): Attr\n    fun createEvent(interface_: String): Event\n    fun createRange(): Range\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): NodeIterator\n    fun createNodeIterator(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): NodeIterator\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: NodeFilter? = definedExternally): TreeWalker\n    fun createTreeWalker(root: Node, whatToShow: Int = definedExternally, filter: ((Node) -> Short)? = definedExternally): TreeWalker\n    fun elementFromPoint(x: Double, y: Double): Element?\n    fun elementsFromPoint(x: Double, y: Double): Array<Element>\n    fun caretPositionFromPoint(x: Double, y: Double): CaretPosition?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n@kotlin.internal.InlineOnly inline operator fun Document.get(name: String): dynamic = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Window](https://developer.mozilla.org/en/docs/Web/API/Window) to Kotlin\n */\npublic external abstract class Window : EventTarget, GlobalEventHandlers, WindowEventHandlers, WindowOrWorkerGlobalScope, WindowSessionStorage, WindowLocalStorage, GlobalPerformance, UnionMessagePortOrWindow {\n    override val performance: Performance\n    open val window: Window\n    open val self: Window\n    open val document: Document\n    open var name: String\n    open val location: Location\n    open val history: History\n    open val customElements: CustomElementRegistry\n    open val locationbar: BarProp\n    open val menubar: BarProp\n    open val personalbar: BarProp\n    open val scrollbars: BarProp\n    open val statusbar: BarProp\n    open val toolbar: BarProp\n    open var status: String\n    open val closed: Boolean\n    open val frames: Window\n    open val length: Int\n    open val top: Window\n    open var opener: Any?\n    open val parent: Window\n    open val frameElement: Element?\n    open val navigator: Navigator\n    open val applicationCache: ApplicationCache\n    open val external: External\n    open val screen: Screen\n    open val innerWidth: Int\n    open val innerHeight: Int\n    open val scrollX: Double\n    open val pageXOffset: Double\n    open val scrollY: Double\n    open val pageYOffset: Double\n    open val screenX: Int\n    open val screenY: Int\n    open val outerWidth: Int\n    open val outerHeight: Int\n    open val devicePixelRatio: Double\n    fun close(): Unit\n    fun stop(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun open(url: String = definedExternally, target: String = definedExternally, features: String = definedExternally): Window?\n    fun alert(): Unit\n    fun alert(message: String): Unit\n    fun confirm(message: String = definedExternally): Boolean\n    fun prompt(message: String = definedExternally, default: String = definedExternally): String?\n    fun print(): Unit\n    fun requestAnimationFrame(callback: (Double) -> Unit): Int\n    fun cancelAnimationFrame(handle: Int): Unit\n    fun postMessage(message: Any?, targetOrigin: String, transfer: Array<dynamic> = definedExternally): Unit\n    fun captureEvents(): Unit\n    fun releaseEvents(): Unit\n    fun matchMedia(query: String): MediaQueryList\n    fun moveTo(x: Int, y: Int): Unit\n    fun moveBy(x: Int, y: Int): Unit\n    fun resizeTo(x: Int, y: Int): Unit\n    fun resizeBy(x: Int, y: Int): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n    fun getComputedStyle(elt: Element, pseudoElt: String? = definedExternally): CSSStyleDeclaration\n}\n@kotlin.internal.InlineOnly inline operator fun Window.get(name: String): dynamic = asDynamic()[name]\n\npublic external abstract class HTMLAllCollection {\n    open val length: Int\n//    fun namedItem(name: String): UnionElementOrHTMLCollection?\n    fun item(nameOrIndex: String = definedExternally): UnionElementOrHTMLCollection?\n}\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(index: Int): Element? = asDynamic()[index]\n//@kotlin.internal.InlineOnly inline operator fun HTMLAllCollection.get(name: String): UnionElementOrHTMLCollection? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLFormControlsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLFormControlsCollection) to Kotlin\n */\npublic external abstract class HTMLFormControlsCollection : HTMLCollection {\n//    override fun namedItem(name: String): UnionElementOrRadioNodeList?\n}\n//@kotlin.internal.InlineOnly override inline operator fun HTMLFormControlsCollection.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [RadioNodeList](https://developer.mozilla.org/en/docs/Web/API/RadioNodeList) to Kotlin\n */\npublic external abstract class RadioNodeList : NodeList, UnionElementOrRadioNodeList {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionsCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionsCollection) to Kotlin\n */\npublic external abstract class HTMLOptionsCollection : HTMLCollection {\n    override var length: Int\n    open var selectedIndex: Int\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLOptionsCollection.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLElement](https://developer.mozilla.org/en/docs/Web/API/HTMLElement) to Kotlin\n */\npublic external abstract class HTMLElement : Element, ElementCSSInlineStyle, GlobalEventHandlers, DocumentAndElementEventHandlers, ElementContentEditable {\n    open var title: String\n    open var lang: String\n    open var translate: Boolean\n    open var dir: String\n    open val dataset: DOMStringMap\n    open var hidden: Boolean\n    open var tabIndex: Int\n    open var accessKey: String\n    open val accessKeyLabel: String\n    open var draggable: Boolean\n    open val dropzone: DOMTokenList\n    open var contextMenu: HTMLMenuElement?\n    open var spellcheck: Boolean\n    open var innerText: String\n    open val offsetParent: Element?\n    open val offsetTop: Int\n    open val offsetLeft: Int\n    open val offsetWidth: Int\n    open val offsetHeight: Int\n    fun click(): Unit\n    fun focus(): Unit\n    fun blur(): Unit\n    fun forceSpellCheck(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLUnknownElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUnknownElement) to Kotlin\n */\npublic external abstract class HTMLUnknownElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [DOMStringMap](https://developer.mozilla.org/en/docs/Web/API/DOMStringMap) to Kotlin\n */\npublic external abstract class DOMStringMap {\n}\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.get(name: String): String? = asDynamic()[name]\n@kotlin.internal.InlineOnly inline operator fun DOMStringMap.set(name: String, value: String): Unit { asDynamic()[name] = value; }\n\n/**\n * Exposes the JavaScript [HTMLHtmlElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHtmlElement) to Kotlin\n */\npublic external abstract class HTMLHtmlElement : HTMLElement {\n    open var version: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadElement) to Kotlin\n */\npublic external abstract class HTMLHeadElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLTitleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTitleElement) to Kotlin\n */\npublic external abstract class HTMLTitleElement : HTMLElement {\n    open var text: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBaseElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBaseElement) to Kotlin\n */\npublic external abstract class HTMLBaseElement : HTMLElement {\n    open var href: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLinkElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLinkElement) to Kotlin\n */\npublic external abstract class HTMLLinkElement : HTMLElement, LinkStyle {\n    open var scope: String\n    open var workerType: WorkerType\n    open var href: String\n    open var crossOrigin: String?\n    open var rel: String\n    @JsName(\"as\") open var as_: RequestDestination\n    open val relList: DOMTokenList\n    open var media: String\n    open var nonce: String\n    open var hreflang: String\n    open var type: String\n    open val sizes: DOMTokenList\n    open var referrerPolicy: String\n    open var charset: String\n    open var rev: String\n    open var target: String\n}\n\n/**\n * Exposes the JavaScript [HTMLMetaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMetaElement) to Kotlin\n */\npublic external abstract class HTMLMetaElement : HTMLElement {\n    open var name: String\n    open var httpEquiv: String\n    open var content: String\n    open var scheme: String\n}\n\n/**\n * Exposes the JavaScript [HTMLStyleElement](https://developer.mozilla.org/en/docs/Web/API/HTMLStyleElement) to Kotlin\n */\npublic external abstract class HTMLStyleElement : HTMLElement, LinkStyle {\n    open var media: String\n    open var nonce: String\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLBodyElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBodyElement) to Kotlin\n */\npublic external abstract class HTMLBodyElement : HTMLElement, WindowEventHandlers {\n    open var text: String\n    open var link: String\n    open var vLink: String\n    open var aLink: String\n    open var bgColor: String\n    open var background: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHeadingElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHeadingElement) to Kotlin\n */\npublic external abstract class HTMLHeadingElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLParagraphElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParagraphElement) to Kotlin\n */\npublic external abstract class HTMLParagraphElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLHRElement) to Kotlin\n */\npublic external abstract class HTMLHRElement : HTMLElement {\n    open var align: String\n    open var color: String\n    open var noShade: Boolean\n    open var size: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPreElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPreElement) to Kotlin\n */\npublic external abstract class HTMLPreElement : HTMLElement {\n    open var width: Int\n}\n\n/**\n * Exposes the JavaScript [HTMLQuoteElement](https://developer.mozilla.org/en/docs/Web/API/HTMLQuoteElement) to Kotlin\n */\npublic external abstract class HTMLQuoteElement : HTMLElement {\n    open var cite: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOListElement) to Kotlin\n */\npublic external abstract class HTMLOListElement : HTMLElement {\n    open var reversed: Boolean\n    open var start: Int\n    open var type: String\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLUListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLUListElement) to Kotlin\n */\npublic external abstract class HTMLUListElement : HTMLElement {\n    open var compact: Boolean\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLLIElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLIElement) to Kotlin\n */\npublic external abstract class HTMLLIElement : HTMLElement {\n    open var value: Int\n    open var type: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDListElement) to Kotlin\n */\npublic external abstract class HTMLDListElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDivElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDivElement) to Kotlin\n */\npublic external abstract class HTMLDivElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLAnchorElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAnchorElement) to Kotlin\n */\npublic external abstract class HTMLAnchorElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var hreflang: String\n    open var type: String\n    open var text: String\n    open var referrerPolicy: String\n    open var coords: String\n    open var charset: String\n    open var name: String\n    open var rev: String\n    open var shape: String\n}\n\n/**\n * Exposes the JavaScript [HTMLDataElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataElement) to Kotlin\n */\npublic external abstract class HTMLDataElement : HTMLElement {\n    open var value: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTimeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTimeElement) to Kotlin\n */\npublic external abstract class HTMLTimeElement : HTMLElement {\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLSpanElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSpanElement) to Kotlin\n */\npublic external abstract class HTMLSpanElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLBRElement](https://developer.mozilla.org/en/docs/Web/API/HTMLBRElement) to Kotlin\n */\npublic external abstract class HTMLBRElement : HTMLElement {\n    open var clear: String\n}\n\n/**\n * Exposes the JavaScript [HTMLHyperlinkElementUtils](https://developer.mozilla.org/en/docs/Web/API/HTMLHyperlinkElementUtils) to Kotlin\n */\npublic external interface HTMLHyperlinkElementUtils {\n    var href: String\n    val origin: String\n    var protocol: String\n    var username: String\n    var password: String\n    var host: String\n    var hostname: String\n    var port: String\n    var pathname: String\n    var search: String\n    var hash: String\n}\n\n/**\n * Exposes the JavaScript [HTMLModElement](https://developer.mozilla.org/en/docs/Web/API/HTMLModElement) to Kotlin\n */\npublic external abstract class HTMLModElement : HTMLElement {\n    open var cite: String\n    open var dateTime: String\n}\n\n/**\n * Exposes the JavaScript [HTMLPictureElement](https://developer.mozilla.org/en/docs/Web/API/HTMLPictureElement) to Kotlin\n */\npublic external abstract class HTMLPictureElement : HTMLElement {\n}\n\n/**\n * Exposes the JavaScript [HTMLSourceElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSourceElement) to Kotlin\n */\npublic external abstract class HTMLSourceElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var srcset: String\n    open var sizes: String\n    open var media: String\n}\n\n/**\n * Exposes the JavaScript [HTMLImageElement](https://developer.mozilla.org/en/docs/Web/API/HTMLImageElement) to Kotlin\n */\npublic external abstract class HTMLImageElement : HTMLElement, TexImageSource, HTMLOrSVGImageElement {\n    open var alt: String\n    open var src: String\n    open var srcset: String\n    open var sizes: String\n    open var crossOrigin: String?\n    open var useMap: String\n    open var isMap: Boolean\n    open var width: Int\n    open var height: Int\n    open val naturalWidth: Int\n    open val naturalHeight: Int\n    open val complete: Boolean\n    open val currentSrc: String\n    open var referrerPolicy: String\n    open var name: String\n    open var lowsrc: String\n    open var align: String\n    open var hspace: Int\n    open var vspace: Int\n    open var longDesc: String\n    open var border: String\n    open val x: Int\n    open val y: Int\n}\n\n/**\n * Exposes the JavaScript [Image](https://developer.mozilla.org/en/docs/Web/API/Image) to Kotlin\n */\npublic external open class Image(width: Int = definedExternally, height: Int = definedExternally) : HTMLImageElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLIFrameElement](https://developer.mozilla.org/en/docs/Web/API/HTMLIFrameElement) to Kotlin\n */\npublic external abstract class HTMLIFrameElement : HTMLElement {\n    open var src: String\n    open var srcdoc: String\n    open var name: String\n    open val sandbox: DOMTokenList\n    open var allowFullscreen: Boolean\n    open var allowUserMedia: Boolean\n    open var width: String\n    open var height: String\n    open var referrerPolicy: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var align: String\n    open var scrolling: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var marginHeight: String\n    open var marginWidth: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLEmbedElement](https://developer.mozilla.org/en/docs/Web/API/HTMLEmbedElement) to Kotlin\n */\npublic external abstract class HTMLEmbedElement : HTMLElement {\n    open var src: String\n    open var type: String\n    open var width: String\n    open var height: String\n    open var align: String\n    open var name: String\n    fun getSVGDocument(): Document?\n}\n\n/**\n * Exposes the JavaScript [HTMLObjectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLObjectElement) to Kotlin\n */\npublic external abstract class HTMLObjectElement : HTMLElement {\n    open var data: String\n    open var type: String\n    open var typeMustMatch: Boolean\n    open var name: String\n    open var useMap: String\n    open val form: HTMLFormElement?\n    open var width: String\n    open var height: String\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open var align: String\n    open var archive: String\n    open var code: String\n    open var declare: Boolean\n    open var hspace: Int\n    open var standby: String\n    open var vspace: Int\n    open var codeBase: String\n    open var codeType: String\n    open var border: String\n    fun getSVGDocument(): Document?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLParamElement](https://developer.mozilla.org/en/docs/Web/API/HTMLParamElement) to Kotlin\n */\npublic external abstract class HTMLParamElement : HTMLElement {\n    open var name: String\n    open var value: String\n    open var type: String\n    open var valueType: String\n}\n\n/**\n * Exposes the JavaScript [HTMLVideoElement](https://developer.mozilla.org/en/docs/Web/API/HTMLVideoElement) to Kotlin\n */\npublic external abstract class HTMLVideoElement : HTMLMediaElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    open val videoWidth: Int\n    open val videoHeight: Int\n    open var poster: String\n    open var playsInline: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLAudioElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAudioElement) to Kotlin\n */\npublic external abstract class HTMLAudioElement : HTMLMediaElement {\n}\n\npublic external open class Audio(src: String = definedExternally) : HTMLAudioElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLTrackElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTrackElement) to Kotlin\n */\npublic external abstract class HTMLTrackElement : HTMLElement {\n    open var kind: String\n    open var src: String\n    open var srclang: String\n    open var label: String\n    open var default: Boolean\n    open val readyState: Short\n    open val track: TextTrack\n\n    companion object {\n        val NONE: Short\n        val LOADING: Short\n        val LOADED: Short\n        val ERROR: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [HTMLMediaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMediaElement) to Kotlin\n */\npublic external abstract class HTMLMediaElement : HTMLElement {\n    open val error: MediaError?\n    open var src: String\n    open var srcObject: dynamic\n    open val currentSrc: String\n    open var crossOrigin: String?\n    open val networkState: Short\n    open var preload: String\n    open val buffered: TimeRanges\n    open val readyState: Short\n    open val seeking: Boolean\n    open var currentTime: Double\n    open val duration: Double\n    open val paused: Boolean\n    open var defaultPlaybackRate: Double\n    open var playbackRate: Double\n    open val played: TimeRanges\n    open val seekable: TimeRanges\n    open val ended: Boolean\n    open var autoplay: Boolean\n    open var loop: Boolean\n    open var controls: Boolean\n    open var volume: Double\n    open var muted: Boolean\n    open var defaultMuted: Boolean\n    open val audioTracks: AudioTrackList\n    open val videoTracks: VideoTrackList\n    open val textTracks: TextTrackList\n    fun load(): Unit\n    fun canPlayType(type: String): CanPlayTypeResult\n    fun fastSeek(time: Double): Unit\n    fun getStartDate(): dynamic\n    fun play(): Promise<Unit>\n    fun pause(): Unit\n    fun addTextTrack(kind: TextTrackKind, label: String = definedExternally, language: String = definedExternally): TextTrack\n\n    companion object {\n        val NETWORK_EMPTY: Short\n        val NETWORK_IDLE: Short\n        val NETWORK_LOADING: Short\n        val NETWORK_NO_SOURCE: Short\n        val HAVE_NOTHING: Short\n        val HAVE_METADATA: Short\n        val HAVE_CURRENT_DATA: Short\n        val HAVE_FUTURE_DATA: Short\n        val HAVE_ENOUGH_DATA: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [MediaError](https://developer.mozilla.org/en/docs/Web/API/MediaError) to Kotlin\n */\npublic external abstract class MediaError {\n    open val code: Short\n\n    companion object {\n        val MEDIA_ERR_ABORTED: Short\n        val MEDIA_ERR_NETWORK: Short\n        val MEDIA_ERR_DECODE: Short\n        val MEDIA_ERR_SRC_NOT_SUPPORTED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [AudioTrackList](https://developer.mozilla.org/en/docs/Web/API/AudioTrackList) to Kotlin\n */\npublic external abstract class AudioTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): AudioTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun AudioTrackList.get(index: Int): AudioTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [AudioTrack](https://developer.mozilla.org/en/docs/Web/API/AudioTrack) to Kotlin\n */\npublic external abstract class AudioTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var enabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [VideoTrackList](https://developer.mozilla.org/en/docs/Web/API/VideoTrackList) to Kotlin\n */\npublic external abstract class VideoTrackList : EventTarget {\n    open val length: Int\n    open val selectedIndex: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): VideoTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun VideoTrackList.get(index: Int): VideoTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [VideoTrack](https://developer.mozilla.org/en/docs/Web/API/VideoTrack) to Kotlin\n */\npublic external abstract class VideoTrack : UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val id: String\n    open val kind: String\n    open val label: String\n    open val language: String\n    open var selected: Boolean\n}\n\npublic external abstract class TextTrackList : EventTarget {\n    open val length: Int\n    open var onchange: ((Event) -> dynamic)?\n    open var onaddtrack: ((TrackEvent) -> dynamic)?\n    open var onremovetrack: ((TrackEvent) -> dynamic)?\n    fun getTrackById(id: String): TextTrack?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackList.get(index: Int): TextTrack? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrack](https://developer.mozilla.org/en/docs/Web/API/TextTrack) to Kotlin\n */\npublic external abstract class TextTrack : EventTarget, UnionAudioTrackOrTextTrackOrVideoTrack {\n    open val kind: TextTrackKind\n    open val label: String\n    open val language: String\n    open val id: String\n    open val inBandMetadataTrackDispatchType: String\n    open var mode: TextTrackMode\n    open val cues: TextTrackCueList?\n    open val activeCues: TextTrackCueList?\n    open var oncuechange: ((Event) -> dynamic)?\n    fun addCue(cue: TextTrackCue): Unit\n    fun removeCue(cue: TextTrackCue): Unit\n}\n\npublic external abstract class TextTrackCueList {\n    open val length: Int\n    fun getCueById(id: String): TextTrackCue?\n}\n@kotlin.internal.InlineOnly inline operator fun TextTrackCueList.get(index: Int): TextTrackCue? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [TextTrackCue](https://developer.mozilla.org/en/docs/Web/API/TextTrackCue) to Kotlin\n */\npublic external abstract class TextTrackCue : EventTarget {\n    open val track: TextTrack?\n    open var id: String\n    open var startTime: Double\n    open var endTime: Double\n    open var pauseOnExit: Boolean\n    open var onenter: ((Event) -> dynamic)?\n    open var onexit: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [TimeRanges](https://developer.mozilla.org/en/docs/Web/API/TimeRanges) to Kotlin\n */\npublic external abstract class TimeRanges {\n    open val length: Int\n    fun start(index: Int): Double\n    fun end(index: Int): Double\n}\n\n/**\n * Exposes the JavaScript [TrackEvent](https://developer.mozilla.org/en/docs/Web/API/TrackEvent) to Kotlin\n */\npublic external open class TrackEvent(type: String, eventInitDict: TrackEventInit = definedExternally) : Event {\n    open val track: UnionAudioTrackOrTextTrackOrVideoTrack?\n}\n\npublic external interface TrackEventInit : EventInit {\n    var track: UnionAudioTrackOrTextTrackOrVideoTrack? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun TrackEventInit(track: UnionAudioTrackOrTextTrackOrVideoTrack? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): TrackEventInit {\n    val o = js(\"({})\")\n\n    o[\"track\"] = track\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLMapElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMapElement) to Kotlin\n */\npublic external abstract class HTMLMapElement : HTMLElement {\n    open var name: String\n    open val areas: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLAreaElement) to Kotlin\n */\npublic external abstract class HTMLAreaElement : HTMLElement, HTMLHyperlinkElementUtils {\n    open var alt: String\n    open var coords: String\n    open var shape: String\n    open var target: String\n    open var download: String\n    open var ping: String\n    open var rel: String\n    open val relList: DOMTokenList\n    open var referrerPolicy: String\n    open var noHref: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLTableElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableElement) to Kotlin\n */\npublic external abstract class HTMLTableElement : HTMLElement {\n    open var caption: HTMLTableCaptionElement?\n    open var tHead: HTMLTableSectionElement?\n    open var tFoot: HTMLTableSectionElement?\n    open val tBodies: HTMLCollection\n    open val rows: HTMLCollection\n    open var align: String\n    open var border: String\n    open var frame: String\n    open var rules: String\n    open var summary: String\n    open var width: String\n    open var bgColor: String\n    open var cellPadding: String\n    open var cellSpacing: String\n    fun createCaption(): HTMLTableCaptionElement\n    fun deleteCaption(): Unit\n    fun createTHead(): HTMLTableSectionElement\n    fun deleteTHead(): Unit\n    fun createTFoot(): HTMLTableSectionElement\n    fun deleteTFoot(): Unit\n    fun createTBody(): HTMLTableSectionElement\n    fun insertRow(index: Int = definedExternally): HTMLTableRowElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCaptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCaptionElement) to Kotlin\n */\npublic external abstract class HTMLTableCaptionElement : HTMLElement {\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableColElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableColElement) to Kotlin\n */\npublic external abstract class HTMLTableColElement : HTMLElement {\n    open var span: Int\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTableSectionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableSectionElement) to Kotlin\n */\npublic external abstract class HTMLTableSectionElement : HTMLElement {\n    open val rows: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    fun insertRow(index: Int = definedExternally): HTMLElement\n    fun deleteRow(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableRowElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableRowElement) to Kotlin\n */\npublic external abstract class HTMLTableRowElement : HTMLElement {\n    open val rowIndex: Int\n    open val sectionRowIndex: Int\n    open val cells: HTMLCollection\n    open var align: String\n    open var ch: String\n    open var chOff: String\n    open var vAlign: String\n    open var bgColor: String\n    fun insertCell(index: Int = definedExternally): HTMLElement\n    fun deleteCell(index: Int): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLTableCellElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTableCellElement) to Kotlin\n */\npublic external abstract class HTMLTableCellElement : HTMLElement {\n    open var colSpan: Int\n    open var rowSpan: Int\n    open var headers: String\n    open val cellIndex: Int\n    open var scope: String\n    open var abbr: String\n    open var align: String\n    open var axis: String\n    open var height: String\n    open var width: String\n    open var ch: String\n    open var chOff: String\n    open var noWrap: Boolean\n    open var vAlign: String\n    open var bgColor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLFormElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFormElement) to Kotlin\n */\npublic external abstract class HTMLFormElement : HTMLElement {\n    open var acceptCharset: String\n    open var action: String\n    open var autocomplete: String\n    open var enctype: String\n    open var encoding: String\n    open var method: String\n    open var name: String\n    open var noValidate: Boolean\n    open var target: String\n    open val elements: HTMLFormControlsCollection\n    open val length: Int\n    fun submit(): Unit\n    fun reset(): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLFormElement.get(name: String): UnionElementOrRadioNodeList? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [HTMLLabelElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLabelElement) to Kotlin\n */\npublic external abstract class HTMLLabelElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var htmlFor: String\n    open val control: HTMLElement?\n}\n\n/**\n * Exposes the JavaScript [HTMLInputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLInputElement) to Kotlin\n */\npublic external abstract class HTMLInputElement : HTMLElement {\n    open var accept: String\n    open var alt: String\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var defaultChecked: Boolean\n    open var checked: Boolean\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open val files: FileList?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var height: Int\n    open var indeterminate: Boolean\n    open var inputMode: String\n    open val list: HTMLElement?\n    open var max: String\n    open var maxLength: Int\n    open var min: String\n    open var minLength: Int\n    open var multiple: Boolean\n    open var name: String\n    open var pattern: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var size: Int\n    open var src: String\n    open var step: String\n    open var type: String\n    open var defaultValue: String\n    open var value: String\n    open var valueAsDate: dynamic\n    open var valueAsNumber: Double\n    open var width: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    open var align: String\n    open var useMap: String\n    fun stepUp(n: Int = definedExternally): Unit\n    fun stepDown(n: Int = definedExternally): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLButtonElement](https://developer.mozilla.org/en/docs/Web/API/HTMLButtonElement) to Kotlin\n */\npublic external abstract class HTMLButtonElement : HTMLElement {\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var formAction: String\n    open var formEnctype: String\n    open var formMethod: String\n    open var formNoValidate: Boolean\n    open var formTarget: String\n    open var name: String\n    open var type: String\n    open var value: String\n    open var menu: HTMLMenuElement?\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLSelectElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSelectElement) to Kotlin\n */\npublic external abstract class HTMLSelectElement : HTMLElement, ItemArrayLike<Element> {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var multiple: Boolean\n    open var name: String\n    open var required: Boolean\n    open var size: Int\n    open val type: String\n    open val options: HTMLOptionsCollection\n    override var length: Int\n    open val selectedOptions: HTMLCollection\n    open var selectedIndex: Int\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): HTMLOptionElement?\n    fun add(element: UnionHTMLOptGroupElementOrHTMLOptionElement, before: dynamic = definedExternally): Unit\n    fun remove(index: Int): Unit\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLSelectElement.set(index: Int, option: HTMLOptionElement?): Unit { asDynamic()[index] = option; }\n\n/**\n * Exposes the JavaScript [HTMLDataListElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDataListElement) to Kotlin\n */\npublic external abstract class HTMLDataListElement : HTMLElement {\n    open val options: HTMLCollection\n}\n\n/**\n * Exposes the JavaScript [HTMLOptGroupElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptGroupElement) to Kotlin\n */\npublic external abstract class HTMLOptGroupElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open var label: String\n}\n\n/**\n * Exposes the JavaScript [HTMLOptionElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOptionElement) to Kotlin\n */\npublic external abstract class HTMLOptionElement : HTMLElement, UnionHTMLOptGroupElementOrHTMLOptionElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var label: String\n    open var defaultSelected: Boolean\n    open var selected: Boolean\n    open var value: String\n    open var text: String\n    open val index: Int\n}\n\n/**\n * Exposes the JavaScript [Option](https://developer.mozilla.org/en/docs/Web/API/Option) to Kotlin\n */\npublic external open class Option(text: String = definedExternally, value: String = definedExternally, defaultSelected: Boolean = definedExternally, selected: Boolean = definedExternally) : HTMLOptionElement {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    override val style: CSSStyleDeclaration\n    override var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    override var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    override var onpointerdown: ((PointerEvent) -> dynamic)?\n    override var onpointermove: ((PointerEvent) -> dynamic)?\n    override var onpointerup: ((PointerEvent) -> dynamic)?\n    override var onpointercancel: ((PointerEvent) -> dynamic)?\n    override var onpointerover: ((PointerEvent) -> dynamic)?\n    override var onpointerout: ((PointerEvent) -> dynamic)?\n    override var onpointerenter: ((PointerEvent) -> dynamic)?\n    override var onpointerleave: ((PointerEvent) -> dynamic)?\n    override var onabort: ((Event) -> dynamic)?\n    override var onblur: ((FocusEvent) -> dynamic)?\n    override var oncancel: ((Event) -> dynamic)?\n    override var oncanplay: ((Event) -> dynamic)?\n    override var oncanplaythrough: ((Event) -> dynamic)?\n    override var onchange: ((Event) -> dynamic)?\n    override var onclick: ((MouseEvent) -> dynamic)?\n    override var onclose: ((Event) -> dynamic)?\n    override var oncontextmenu: ((MouseEvent) -> dynamic)?\n    override var oncuechange: ((Event) -> dynamic)?\n    override var ondblclick: ((MouseEvent) -> dynamic)?\n    override var ondrag: ((DragEvent) -> dynamic)?\n    override var ondragend: ((DragEvent) -> dynamic)?\n    override var ondragenter: ((DragEvent) -> dynamic)?\n    override var ondragexit: ((DragEvent) -> dynamic)?\n    override var ondragleave: ((DragEvent) -> dynamic)?\n    override var ondragover: ((DragEvent) -> dynamic)?\n    override var ondragstart: ((DragEvent) -> dynamic)?\n    override var ondrop: ((DragEvent) -> dynamic)?\n    override var ondurationchange: ((Event) -> dynamic)?\n    override var onemptied: ((Event) -> dynamic)?\n    override var onended: ((Event) -> dynamic)?\n    override var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    override var onfocus: ((FocusEvent) -> dynamic)?\n    override var oninput: ((InputEvent) -> dynamic)?\n    override var oninvalid: ((Event) -> dynamic)?\n    override var onkeydown: ((KeyboardEvent) -> dynamic)?\n    override var onkeypress: ((KeyboardEvent) -> dynamic)?\n    override var onkeyup: ((KeyboardEvent) -> dynamic)?\n    override var onload: ((Event) -> dynamic)?\n    override var onloadeddata: ((Event) -> dynamic)?\n    override var onloadedmetadata: ((Event) -> dynamic)?\n    override var onloadend: ((Event) -> dynamic)?\n    override var onloadstart: ((ProgressEvent) -> dynamic)?\n    override var onmousedown: ((MouseEvent) -> dynamic)?\n    override var onmouseenter: ((MouseEvent) -> dynamic)?\n    override var onmouseleave: ((MouseEvent) -> dynamic)?\n    override var onmousemove: ((MouseEvent) -> dynamic)?\n    override var onmouseout: ((MouseEvent) -> dynamic)?\n    override var onmouseover: ((MouseEvent) -> dynamic)?\n    override var onmouseup: ((MouseEvent) -> dynamic)?\n    override var onwheel: ((WheelEvent) -> dynamic)?\n    override var onpause: ((Event) -> dynamic)?\n    override var onplay: ((Event) -> dynamic)?\n    override var onplaying: ((Event) -> dynamic)?\n    override var onprogress: ((ProgressEvent) -> dynamic)?\n    override var onratechange: ((Event) -> dynamic)?\n    override var onreset: ((Event) -> dynamic)?\n    override var onresize: ((Event) -> dynamic)?\n    override var onscroll: ((Event) -> dynamic)?\n    override var onseeked: ((Event) -> dynamic)?\n    override var onseeking: ((Event) -> dynamic)?\n    override var onselect: ((Event) -> dynamic)?\n    override var onshow: ((Event) -> dynamic)?\n    override var onstalled: ((Event) -> dynamic)?\n    override var onsubmit: ((Event) -> dynamic)?\n    override var onsuspend: ((Event) -> dynamic)?\n    override var ontimeupdate: ((Event) -> dynamic)?\n    override var ontoggle: ((Event) -> dynamic)?\n    override var onvolumechange: ((Event) -> dynamic)?\n    override var onwaiting: ((Event) -> dynamic)?\n    override var oncopy: ((ClipboardEvent) -> dynamic)?\n    override var oncut: ((ClipboardEvent) -> dynamic)?\n    override var onpaste: ((ClipboardEvent) -> dynamic)?\n    override var contentEditable: String\n    override val isContentEditable: Boolean\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [HTMLTextAreaElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTextAreaElement) to Kotlin\n */\npublic external abstract class HTMLTextAreaElement : HTMLElement {\n    open var autocomplete: String\n    open var autofocus: Boolean\n    open var cols: Int\n    open var dirName: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var inputMode: String\n    open var maxLength: Int\n    open var minLength: Int\n    open var name: String\n    open var placeholder: String\n    open var readOnly: Boolean\n    open var required: Boolean\n    open var rows: Int\n    open var wrap: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val textLength: Int\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    open var selectionStart: Int?\n    open var selectionEnd: Int?\n    open var selectionDirection: String?\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n    fun select(): Unit\n    fun setRangeText(replacement: String): Unit\n    fun setRangeText(replacement: String, start: Int, end: Int, selectionMode: SelectionMode = definedExternally): Unit\n    fun setSelectionRange(start: Int, end: Int, direction: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLKeygenElement](https://developer.mozilla.org/en/docs/Web/API/HTMLKeygenElement) to Kotlin\n */\npublic external abstract class HTMLKeygenElement : HTMLElement {\n    open var autofocus: Boolean\n    open var challenge: String\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var keytype: String\n    open var name: String\n    open val type: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLOutputElement](https://developer.mozilla.org/en/docs/Web/API/HTMLOutputElement) to Kotlin\n */\npublic external abstract class HTMLOutputElement : HTMLElement {\n    open val htmlFor: DOMTokenList\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open var defaultValue: String\n    open var value: String\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    open val labels: NodeList\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLProgressElement](https://developer.mozilla.org/en/docs/Web/API/HTMLProgressElement) to Kotlin\n */\npublic external abstract class HTMLProgressElement : HTMLElement {\n    open var value: Double\n    open var max: Double\n    open val position: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLMeterElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMeterElement) to Kotlin\n */\npublic external abstract class HTMLMeterElement : HTMLElement {\n    open var value: Double\n    open var min: Double\n    open var max: Double\n    open var low: Double\n    open var high: Double\n    open var optimum: Double\n    open val labels: NodeList\n}\n\n/**\n * Exposes the JavaScript [HTMLFieldSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFieldSetElement) to Kotlin\n */\npublic external abstract class HTMLFieldSetElement : HTMLElement {\n    open var disabled: Boolean\n    open val form: HTMLFormElement?\n    open var name: String\n    open val type: String\n    open val elements: HTMLCollection\n    open val willValidate: Boolean\n    open val validity: ValidityState\n    open val validationMessage: String\n    fun checkValidity(): Boolean\n    fun reportValidity(): Boolean\n    fun setCustomValidity(error: String): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLLegendElement](https://developer.mozilla.org/en/docs/Web/API/HTMLLegendElement) to Kotlin\n */\npublic external abstract class HTMLLegendElement : HTMLElement {\n    open val form: HTMLFormElement?\n    open var align: String\n}\n\n/**\n * Exposes the JavaScript [ValidityState](https://developer.mozilla.org/en/docs/Web/API/ValidityState) to Kotlin\n */\npublic external abstract class ValidityState {\n    open val valueMissing: Boolean\n    open val typeMismatch: Boolean\n    open val patternMismatch: Boolean\n    open val tooLong: Boolean\n    open val tooShort: Boolean\n    open val rangeUnderflow: Boolean\n    open val rangeOverflow: Boolean\n    open val stepMismatch: Boolean\n    open val badInput: Boolean\n    open val customError: Boolean\n    open val valid: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLDetailsElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDetailsElement) to Kotlin\n */\npublic external abstract class HTMLDetailsElement : HTMLElement {\n    open var open: Boolean\n}\n\npublic external abstract class HTMLMenuElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var compact: Boolean\n}\n\npublic external abstract class HTMLMenuItemElement : HTMLElement {\n    open var type: String\n    open var label: String\n    open var icon: String\n    open var disabled: Boolean\n    open var checked: Boolean\n    open var radiogroup: String\n    open var default: Boolean\n}\n\npublic external open class RelatedEvent(type: String, eventInitDict: RelatedEventInit = definedExternally) : Event {\n    open val relatedTarget: EventTarget?\n}\n\npublic external interface RelatedEventInit : EventInit {\n    var relatedTarget: EventTarget? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun RelatedEventInit(relatedTarget: EventTarget? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): RelatedEventInit {\n    val o = js(\"({})\")\n\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLDialogElement](https://developer.mozilla.org/en/docs/Web/API/HTMLDialogElement) to Kotlin\n */\npublic external abstract class HTMLDialogElement : HTMLElement {\n    open var open: Boolean\n    open var returnValue: String\n    fun show(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun showModal(anchor: UnionElementOrMouseEvent = definedExternally): Unit\n    fun close(returnValue: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLScriptElement](https://developer.mozilla.org/en/docs/Web/API/HTMLScriptElement) to Kotlin\n */\npublic external abstract class HTMLScriptElement : HTMLElement, HTMLOrSVGScriptElement {\n    open var src: String\n    open var type: String\n    open var charset: String\n    open var async: Boolean\n    open var defer: Boolean\n    open var crossOrigin: String?\n    open var text: String\n    open var nonce: String\n    open var event: String\n    open var htmlFor: String\n}\n\n/**\n * Exposes the JavaScript [HTMLTemplateElement](https://developer.mozilla.org/en/docs/Web/API/HTMLTemplateElement) to Kotlin\n */\npublic external abstract class HTMLTemplateElement : HTMLElement {\n    open val content: DocumentFragment\n}\n\n/**\n * Exposes the JavaScript [HTMLSlotElement](https://developer.mozilla.org/en/docs/Web/API/HTMLSlotElement) to Kotlin\n */\npublic external abstract class HTMLSlotElement : HTMLElement {\n    open var name: String\n    fun assignedNodes(options: AssignedNodesOptions = definedExternally): Array<Node>\n}\n\npublic external interface AssignedNodesOptions {\n    var flatten: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AssignedNodesOptions(flatten: Boolean? = false): AssignedNodesOptions {\n    val o = js(\"({})\")\n\n    o[\"flatten\"] = flatten\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HTMLCanvasElement](https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement) to Kotlin\n */\npublic external abstract class HTMLCanvasElement : HTMLElement, TexImageSource {\n    open var width: Int\n    open var height: Int\n    fun getContext(contextId: String, vararg arguments: Any?): RenderingContext?\n    fun toDataURL(type: String = definedExternally, quality: Any? = definedExternally): String\n    fun toBlob(_callback: (Blob?) -> Unit, type: String = definedExternally, quality: Any? = definedExternally): Unit\n}\n\npublic external interface CanvasRenderingContext2DSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CanvasRenderingContext2DSettings(alpha: Boolean? = true): CanvasRenderingContext2DSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CanvasRenderingContext2D](https://developer.mozilla.org/en/docs/Web/API/CanvasRenderingContext2D) to Kotlin\n */\npublic external abstract class CanvasRenderingContext2D : CanvasState, CanvasTransform, CanvasCompositing, CanvasImageSmoothing, CanvasFillStrokeStyles, CanvasShadowStyles, CanvasFilters, CanvasRect, CanvasDrawPath, CanvasUserInterface, CanvasText, CanvasDrawImage, CanvasHitRegion, CanvasImageData, CanvasPathDrawingStyles, CanvasTextDrawingStyles, CanvasPath, RenderingContext {\n    open val canvas: HTMLCanvasElement\n}\n\npublic external interface CanvasState {\n    fun save(): Unit\n    fun restore(): Unit\n}\n\npublic external interface CanvasTransform {\n    fun scale(x: Double, y: Double): Unit\n    fun rotate(angle: Double): Unit\n    fun translate(x: Double, y: Double): Unit\n    fun transform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun getTransform(): DOMMatrix\n    fun setTransform(a: Double, b: Double, c: Double, d: Double, e: Double, f: Double): Unit\n    fun setTransform(transform: dynamic = definedExternally): Unit\n    fun resetTransform(): Unit\n}\n\npublic external interface CanvasCompositing {\n    var globalAlpha: Double\n    var globalCompositeOperation: String\n}\n\npublic external interface CanvasImageSmoothing {\n    var imageSmoothingEnabled: Boolean\n    var imageSmoothingQuality: ImageSmoothingQuality\n}\n\npublic external interface CanvasFillStrokeStyles {\n    var strokeStyle: dynamic\n    var fillStyle: dynamic\n    fun createLinearGradient(x0: Double, y0: Double, x1: Double, y1: Double): CanvasGradient\n    fun createRadialGradient(x0: Double, y0: Double, r0: Double, x1: Double, y1: Double, r1: Double): CanvasGradient\n    fun createPattern(image: dynamic, repetition: String): CanvasPattern?\n}\n\npublic external interface CanvasShadowStyles {\n    var shadowOffsetX: Double\n    var shadowOffsetY: Double\n    var shadowBlur: Double\n    var shadowColor: String\n}\n\npublic external interface CanvasFilters {\n    var filter: String\n}\n\npublic external interface CanvasRect {\n    fun clearRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun fillRect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun strokeRect(x: Double, y: Double, w: Double, h: Double): Unit\n}\n\npublic external interface CanvasDrawPath {\n    fun beginPath(): Unit\n    fun fill(fillRule: CanvasFillRule = definedExternally): Unit\n    fun fill(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun stroke(): Unit\n    fun stroke(path: Path2D): Unit\n    fun clip(fillRule: CanvasFillRule = definedExternally): Unit\n    fun clip(path: Path2D, fillRule: CanvasFillRule = definedExternally): Unit\n    fun resetClip(): Unit\n    fun isPointInPath(x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInPath(path: Path2D, x: Double, y: Double, fillRule: CanvasFillRule = definedExternally): Boolean\n    fun isPointInStroke(x: Double, y: Double): Boolean\n    fun isPointInStroke(path: Path2D, x: Double, y: Double): Boolean\n}\n\npublic external interface CanvasUserInterface {\n    fun drawFocusIfNeeded(element: Element): Unit\n    fun drawFocusIfNeeded(path: Path2D, element: Element): Unit\n    fun scrollPathIntoView(): Unit\n    fun scrollPathIntoView(path: Path2D): Unit\n}\n\npublic external interface CanvasText {\n    fun fillText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun strokeText(text: String, x: Double, y: Double, maxWidth: Double = definedExternally): Unit\n    fun measureText(text: String): TextMetrics\n}\n\npublic external interface CanvasDrawImage {\n    fun drawImage(image: dynamic, dx: Double, dy: Double): Unit\n    fun drawImage(image: dynamic, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n    fun drawImage(image: dynamic, sx: Double, sy: Double, sw: Double, sh: Double, dx: Double, dy: Double, dw: Double, dh: Double): Unit\n}\n\npublic external interface CanvasHitRegion {\n    fun addHitRegion(options: HitRegionOptions = definedExternally): Unit\n    fun removeHitRegion(id: String): Unit\n    fun clearHitRegions(): Unit\n}\n\npublic external interface CanvasImageData {\n    fun createImageData(sw: Double, sh: Double): ImageData\n    fun createImageData(imagedata: ImageData): ImageData\n    fun getImageData(sx: Double, sy: Double, sw: Double, sh: Double): ImageData\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double): Unit\n    fun putImageData(imagedata: ImageData, dx: Double, dy: Double, dirtyX: Double, dirtyY: Double, dirtyWidth: Double, dirtyHeight: Double): Unit\n}\n\npublic external interface CanvasPathDrawingStyles {\n    var lineWidth: Double\n    var lineCap: CanvasLineCap\n    var lineJoin: CanvasLineJoin\n    var miterLimit: Double\n    var lineDashOffset: Double\n    fun setLineDash(segments: Array<Double>): Unit\n    fun getLineDash(): Array<Double>\n}\n\npublic external interface CanvasTextDrawingStyles {\n    var font: String\n    var textAlign: CanvasTextAlign\n    var textBaseline: CanvasTextBaseline\n    var direction: CanvasDirection\n}\n\npublic external interface CanvasPath {\n    fun closePath(): Unit\n    fun moveTo(x: Double, y: Double): Unit\n    fun lineTo(x: Double, y: Double): Unit\n    fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n    fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasGradient](https://developer.mozilla.org/en/docs/Web/API/CanvasGradient) to Kotlin\n */\npublic external abstract class CanvasGradient {\n    fun addColorStop(offset: Double, color: String): Unit\n}\n\n/**\n * Exposes the JavaScript [CanvasPattern](https://developer.mozilla.org/en/docs/Web/API/CanvasPattern) to Kotlin\n */\npublic external abstract class CanvasPattern {\n    fun setTransform(transform: dynamic = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [TextMetrics](https://developer.mozilla.org/en/docs/Web/API/TextMetrics) to Kotlin\n */\npublic external abstract class TextMetrics {\n    open val width: Double\n    open val actualBoundingBoxLeft: Double\n    open val actualBoundingBoxRight: Double\n    open val fontBoundingBoxAscent: Double\n    open val fontBoundingBoxDescent: Double\n    open val actualBoundingBoxAscent: Double\n    open val actualBoundingBoxDescent: Double\n    open val emHeightAscent: Double\n    open val emHeightDescent: Double\n    open val hangingBaseline: Double\n    open val alphabeticBaseline: Double\n    open val ideographicBaseline: Double\n}\n\npublic external interface HitRegionOptions {\n    var path: Path2D? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var fillRule: CanvasFillRule? /* = CanvasFillRule.NONZERO */\n        get() = definedExternally\n        set(value) = definedExternally\n    var id: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var parentID: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cursor: String? /* = \"inherit\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var control: Element? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var label: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var role: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HitRegionOptions(path: Path2D? = null, fillRule: CanvasFillRule? = CanvasFillRule.NONZERO, id: String? = \"\", parentID: String? = null, cursor: String? = \"inherit\", control: Element? = null, label: String? = null, role: String? = null): HitRegionOptions {\n    val o = js(\"({})\")\n\n    o[\"path\"] = path\n    o[\"fillRule\"] = fillRule\n    o[\"id\"] = id\n    o[\"parentID\"] = parentID\n    o[\"cursor\"] = cursor\n    o[\"control\"] = control\n    o[\"label\"] = label\n    o[\"role\"] = role\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ImageData](https://developer.mozilla.org/en/docs/Web/API/ImageData) to Kotlin\n */\npublic external open class ImageData : TexImageSource {\n    constructor(sw: Int, sh: Int)\n    constructor(data: Uint8ClampedArray, sw: Int, sh: Int = definedExternally)\n    open val width: Int\n    open val height: Int\n    open val data: Uint8ClampedArray\n}\n\n/**\n * Exposes the JavaScript [Path2D](https://developer.mozilla.org/en/docs/Web/API/Path2D) to Kotlin\n */\npublic external open class Path2D() : CanvasPath {\n    constructor(path: Path2D)\n    constructor(paths: Array<Path2D>, fillRule: CanvasFillRule = definedExternally)\n    constructor(d: String)\n    fun addPath(path: Path2D, transform: dynamic = definedExternally): Unit\n    override fun closePath(): Unit\n    override fun moveTo(x: Double, y: Double): Unit\n    override fun lineTo(x: Double, y: Double): Unit\n    override fun quadraticCurveTo(cpx: Double, cpy: Double, x: Double, y: Double): Unit\n    override fun bezierCurveTo(cp1x: Double, cp1y: Double, cp2x: Double, cp2y: Double, x: Double, y: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radius: Double): Unit\n    override fun arcTo(x1: Double, y1: Double, x2: Double, y2: Double, radiusX: Double, radiusY: Double, rotation: Double): Unit\n    override fun rect(x: Double, y: Double, w: Double, h: Double): Unit\n    override fun arc(x: Double, y: Double, radius: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n    override fun ellipse(x: Double, y: Double, radiusX: Double, radiusY: Double, rotation: Double, startAngle: Double, endAngle: Double, anticlockwise: Boolean /* = definedExternally */): Unit\n}\n\n/**\n * Exposes the JavaScript [Touch](https://developer.mozilla.org/en/docs/Web/API/Touch) to Kotlin\n */\npublic external abstract class Touch {\n    open val region: String?\n}\n\n/**\n * Exposes the JavaScript [ImageBitmapRenderingContext](https://developer.mozilla.org/en/docs/Web/API/ImageBitmapRenderingContext) to Kotlin\n */\npublic external abstract class ImageBitmapRenderingContext {\n    open val canvas: HTMLCanvasElement\n    fun transferFromImageBitmap(bitmap: ImageBitmap?): Unit\n}\n\npublic external interface ImageBitmapRenderingContextSettings {\n    var alpha: Boolean? /* = true */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapRenderingContextSettings(alpha: Boolean? = true): ImageBitmapRenderingContextSettings {\n    val o = js(\"({})\")\n\n    o[\"alpha\"] = alpha\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomElementRegistry](https://developer.mozilla.org/en/docs/Web/API/CustomElementRegistry) to Kotlin\n */\npublic external abstract class CustomElementRegistry {\n    fun define(name: String, constructor: () -> dynamic, options: ElementDefinitionOptions = definedExternally): Unit\n    fun get(name: String): Any?\n    fun whenDefined(name: String): Promise<Unit>\n}\n\npublic external interface ElementDefinitionOptions {\n    var extends: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementDefinitionOptions(extends: String? = undefined): ElementDefinitionOptions {\n    val o = js(\"({})\")\n\n    o[\"extends\"] = extends\n\n    return o\n}\n\npublic external interface ElementContentEditable {\n    var contentEditable: String\n    val isContentEditable: Boolean\n}\n\n/**\n * Exposes the JavaScript [DataTransfer](https://developer.mozilla.org/en/docs/Web/API/DataTransfer) to Kotlin\n */\npublic external abstract class DataTransfer {\n    open var dropEffect: String\n    open var effectAllowed: String\n    open val items: DataTransferItemList\n    open val types: Array<out String>\n    open val files: FileList\n    fun setDragImage(image: Element, x: Int, y: Int): Unit\n    fun getData(format: String): String\n    fun setData(format: String, data: String): Unit\n    fun clearData(format: String = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [DataTransferItemList](https://developer.mozilla.org/en/docs/Web/API/DataTransferItemList) to Kotlin\n */\npublic external abstract class DataTransferItemList {\n    open val length: Int\n    fun add(data: String, type: String): DataTransferItem?\n    fun add(data: File): DataTransferItem?\n    fun remove(index: Int): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun DataTransferItemList.get(index: Int): DataTransferItem? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DataTransferItem](https://developer.mozilla.org/en/docs/Web/API/DataTransferItem) to Kotlin\n */\npublic external abstract class DataTransferItem {\n    open val kind: String\n    open val type: String\n    fun getAsString(_callback: ((String) -> Unit)?): Unit\n    fun getAsFile(): File?\n}\n\n/**\n * Exposes the JavaScript [DragEvent](https://developer.mozilla.org/en/docs/Web/API/DragEvent) to Kotlin\n */\npublic external open class DragEvent(type: String, eventInitDict: DragEventInit = definedExternally) : MouseEvent {\n    open val dataTransfer: DataTransfer?\n}\n\npublic external interface DragEventInit : MouseEventInit {\n    var dataTransfer: DataTransfer? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DragEventInit(dataTransfer: DataTransfer? = null, screenX: Int? = 0, screenY: Int? = 0, clientX: Int? = 0, clientY: Int? = 0, button: Short? = 0, buttons: Short? = 0, relatedTarget: EventTarget? = null, ctrlKey: Boolean? = false, shiftKey: Boolean? = false, altKey: Boolean? = false, metaKey: Boolean? = false, modifierAltGraph: Boolean? = false, modifierCapsLock: Boolean? = false, modifierFn: Boolean? = false, modifierFnLock: Boolean? = false, modifierHyper: Boolean? = false, modifierNumLock: Boolean? = false, modifierScrollLock: Boolean? = false, modifierSuper: Boolean? = false, modifierSymbol: Boolean? = false, modifierSymbolLock: Boolean? = false, view: Window? = null, detail: Int? = 0, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): DragEventInit {\n    val o = js(\"({})\")\n\n    o[\"dataTransfer\"] = dataTransfer\n    o[\"screenX\"] = screenX\n    o[\"screenY\"] = screenY\n    o[\"clientX\"] = clientX\n    o[\"clientY\"] = clientY\n    o[\"button\"] = button\n    o[\"buttons\"] = buttons\n    o[\"relatedTarget\"] = relatedTarget\n    o[\"ctrlKey\"] = ctrlKey\n    o[\"shiftKey\"] = shiftKey\n    o[\"altKey\"] = altKey\n    o[\"metaKey\"] = metaKey\n    o[\"modifierAltGraph\"] = modifierAltGraph\n    o[\"modifierCapsLock\"] = modifierCapsLock\n    o[\"modifierFn\"] = modifierFn\n    o[\"modifierFnLock\"] = modifierFnLock\n    o[\"modifierHyper\"] = modifierHyper\n    o[\"modifierNumLock\"] = modifierNumLock\n    o[\"modifierScrollLock\"] = modifierScrollLock\n    o[\"modifierSuper\"] = modifierSuper\n    o[\"modifierSymbol\"] = modifierSymbol\n    o[\"modifierSymbolLock\"] = modifierSymbolLock\n    o[\"view\"] = view\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class BarProp {\n    open val visible: Boolean\n}\n\n/**\n * Exposes the JavaScript [History](https://developer.mozilla.org/en/docs/Web/API/History) to Kotlin\n */\npublic external abstract class History {\n    open val length: Int\n    open var scrollRestoration: ScrollRestoration\n    open val state: Any?\n    fun go(delta: Int = definedExternally): Unit\n    fun back(): Unit\n    fun forward(): Unit\n    fun pushState(data: Any?, title: String, url: String? = definedExternally): Unit\n    fun replaceState(data: Any?, title: String, url: String? = definedExternally): Unit\n}\n\n/**\n * Exposes the JavaScript [Location](https://developer.mozilla.org/en/docs/Web/API/Location) to Kotlin\n */\npublic external abstract class Location {\n    open var href: String\n    open val origin: String\n    open var protocol: String\n    open var host: String\n    open var hostname: String\n    open var port: String\n    open var pathname: String\n    open var search: String\n    open var hash: String\n    open val ancestorOrigins: Array<out String>\n    fun assign(url: String): Unit\n    fun replace(url: String): Unit\n    fun reload(): Unit\n}\n\n/**\n * Exposes the JavaScript [PopStateEvent](https://developer.mozilla.org/en/docs/Web/API/PopStateEvent) to Kotlin\n */\npublic external open class PopStateEvent(type: String, eventInitDict: PopStateEventInit = definedExternally) : Event {\n    open val state: Any?\n}\n\npublic external interface PopStateEventInit : EventInit {\n    var state: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PopStateEventInit(state: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PopStateEventInit {\n    val o = js(\"({})\")\n\n    o[\"state\"] = state\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [HashChangeEvent](https://developer.mozilla.org/en/docs/Web/API/HashChangeEvent) to Kotlin\n */\npublic external open class HashChangeEvent(type: String, eventInitDict: HashChangeEventInit = definedExternally) : Event {\n    open val oldURL: String\n    open val newURL: String\n}\n\npublic external interface HashChangeEventInit : EventInit {\n    var oldURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newURL: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun HashChangeEventInit(oldURL: String? = \"\", newURL: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): HashChangeEventInit {\n    val o = js(\"({})\")\n\n    o[\"oldURL\"] = oldURL\n    o[\"newURL\"] = newURL\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PageTransitionEvent](https://developer.mozilla.org/en/docs/Web/API/PageTransitionEvent) to Kotlin\n */\npublic external open class PageTransitionEvent(type: String, eventInitDict: PageTransitionEventInit = definedExternally) : Event {\n    open val persisted: Boolean\n}\n\npublic external interface PageTransitionEventInit : EventInit {\n    var persisted: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PageTransitionEventInit(persisted: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PageTransitionEventInit {\n    val o = js(\"({})\")\n\n    o[\"persisted\"] = persisted\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [BeforeUnloadEvent](https://developer.mozilla.org/en/docs/Web/API/BeforeUnloadEvent) to Kotlin\n */\npublic external open class BeforeUnloadEvent : Event {\n    var returnValue: String\n}\n\npublic external abstract class ApplicationCache : EventTarget {\n    open val status: Short\n    open var onchecking: ((Event) -> dynamic)?\n    open var onerror: ((Event) -> dynamic)?\n    open var onnoupdate: ((Event) -> dynamic)?\n    open var ondownloading: ((Event) -> dynamic)?\n    open var onprogress: ((ProgressEvent) -> dynamic)?\n    open var onupdateready: ((Event) -> dynamic)?\n    open var oncached: ((Event) -> dynamic)?\n    open var onobsolete: ((Event) -> dynamic)?\n    fun update(): Unit\n    fun abort(): Unit\n    fun swapCache(): Unit\n\n    companion object {\n        val UNCACHED: Short\n        val IDLE: Short\n        val CHECKING: Short\n        val DOWNLOADING: Short\n        val UPDATEREADY: Short\n        val OBSOLETE: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NavigatorOnLine](https://developer.mozilla.org/en/docs/Web/API/NavigatorOnLine) to Kotlin\n */\npublic external interface NavigatorOnLine {\n    val onLine: Boolean\n}\n\n/**\n * Exposes the JavaScript [ErrorEvent](https://developer.mozilla.org/en/docs/Web/API/ErrorEvent) to Kotlin\n */\npublic external open class ErrorEvent(type: String, eventInitDict: ErrorEventInit = definedExternally) : Event {\n    open val message: String\n    open val filename: String\n    open val lineno: Int\n    open val colno: Int\n    open val error: Any?\n}\n\npublic external interface ErrorEventInit : EventInit {\n    var message: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var filename: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lineno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colno: Int? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var error: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ErrorEventInit(message: String? = \"\", filename: String? = \"\", lineno: Int? = 0, colno: Int? = 0, error: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): ErrorEventInit {\n    val o = js(\"({})\")\n\n    o[\"message\"] = message\n    o[\"filename\"] = filename\n    o[\"lineno\"] = lineno\n    o[\"colno\"] = colno\n    o[\"error\"] = error\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [PromiseRejectionEvent](https://developer.mozilla.org/en/docs/Web/API/PromiseRejectionEvent) to Kotlin\n */\npublic external open class PromiseRejectionEvent(type: String, eventInitDict: PromiseRejectionEventInit) : Event {\n    open val promise: Promise<Any?>\n    open val reason: Any?\n}\n\npublic external interface PromiseRejectionEventInit : EventInit {\n    var promise: Promise<Any?>?\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: Any?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun PromiseRejectionEventInit(promise: Promise<Any?>?, reason: Any? = undefined, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): PromiseRejectionEventInit {\n    val o = js(\"({})\")\n\n    o[\"promise\"] = promise\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [GlobalEventHandlers](https://developer.mozilla.org/en/docs/Web/API/GlobalEventHandlers) to Kotlin\n */\npublic external interface GlobalEventHandlers {\n    var ongotpointercapture: ((PointerEvent) -> dynamic)?\n    var onlostpointercapture: ((PointerEvent) -> dynamic)?\n    var onpointerdown: ((PointerEvent) -> dynamic)?\n    var onpointermove: ((PointerEvent) -> dynamic)?\n    var onpointerup: ((PointerEvent) -> dynamic)?\n    var onpointercancel: ((PointerEvent) -> dynamic)?\n    var onpointerover: ((PointerEvent) -> dynamic)?\n    var onpointerout: ((PointerEvent) -> dynamic)?\n    var onpointerenter: ((PointerEvent) -> dynamic)?\n    var onpointerleave: ((PointerEvent) -> dynamic)?\n    var onabort: ((Event) -> dynamic)?\n    var onblur: ((FocusEvent) -> dynamic)?\n    var oncancel: ((Event) -> dynamic)?\n    var oncanplay: ((Event) -> dynamic)?\n    var oncanplaythrough: ((Event) -> dynamic)?\n    var onchange: ((Event) -> dynamic)?\n    var onclick: ((MouseEvent) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    var oncontextmenu: ((MouseEvent) -> dynamic)?\n    var oncuechange: ((Event) -> dynamic)?\n    var ondblclick: ((MouseEvent) -> dynamic)?\n    var ondrag: ((DragEvent) -> dynamic)?\n    var ondragend: ((DragEvent) -> dynamic)?\n    var ondragenter: ((DragEvent) -> dynamic)?\n    var ondragexit: ((DragEvent) -> dynamic)?\n    var ondragleave: ((DragEvent) -> dynamic)?\n    var ondragover: ((DragEvent) -> dynamic)?\n    var ondragstart: ((DragEvent) -> dynamic)?\n    var ondrop: ((DragEvent) -> dynamic)?\n    var ondurationchange: ((Event) -> dynamic)?\n    var onemptied: ((Event) -> dynamic)?\n    var onended: ((Event) -> dynamic)?\n    var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    var onfocus: ((FocusEvent) -> dynamic)?\n    var oninput: ((InputEvent) -> dynamic)?\n    var oninvalid: ((Event) -> dynamic)?\n    var onkeydown: ((KeyboardEvent) -> dynamic)?\n    var onkeypress: ((KeyboardEvent) -> dynamic)?\n    var onkeyup: ((KeyboardEvent) -> dynamic)?\n    var onload: ((Event) -> dynamic)?\n    var onloadeddata: ((Event) -> dynamic)?\n    var onloadedmetadata: ((Event) -> dynamic)?\n    var onloadend: ((Event) -> dynamic)?\n    var onloadstart: ((ProgressEvent) -> dynamic)?\n    var onmousedown: ((MouseEvent) -> dynamic)?\n    var onmouseenter: ((MouseEvent) -> dynamic)?\n    var onmouseleave: ((MouseEvent) -> dynamic)?\n    var onmousemove: ((MouseEvent) -> dynamic)?\n    var onmouseout: ((MouseEvent) -> dynamic)?\n    var onmouseover: ((MouseEvent) -> dynamic)?\n    var onmouseup: ((MouseEvent) -> dynamic)?\n    var onwheel: ((WheelEvent) -> dynamic)?\n    var onpause: ((Event) -> dynamic)?\n    var onplay: ((Event) -> dynamic)?\n    var onplaying: ((Event) -> dynamic)?\n    var onprogress: ((ProgressEvent) -> dynamic)?\n    var onratechange: ((Event) -> dynamic)?\n    var onreset: ((Event) -> dynamic)?\n    var onresize: ((Event) -> dynamic)?\n    var onscroll: ((Event) -> dynamic)?\n    var onseeked: ((Event) -> dynamic)?\n    var onseeking: ((Event) -> dynamic)?\n    var onselect: ((Event) -> dynamic)?\n    var onshow: ((Event) -> dynamic)?\n    var onstalled: ((Event) -> dynamic)?\n    var onsubmit: ((Event) -> dynamic)?\n    var onsuspend: ((Event) -> dynamic)?\n    var ontimeupdate: ((Event) -> dynamic)?\n    var ontoggle: ((Event) -> dynamic)?\n    var onvolumechange: ((Event) -> dynamic)?\n    var onwaiting: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowEventHandlers](https://developer.mozilla.org/en/docs/Web/API/WindowEventHandlers) to Kotlin\n */\npublic external interface WindowEventHandlers {\n    var onafterprint: ((Event) -> dynamic)?\n    var onbeforeprint: ((Event) -> dynamic)?\n    var onbeforeunload: ((BeforeUnloadEvent) -> String?)?\n    var onhashchange: ((HashChangeEvent) -> dynamic)?\n    var onlanguagechange: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onoffline: ((Event) -> dynamic)?\n    var ononline: ((Event) -> dynamic)?\n    var onpagehide: ((PageTransitionEvent) -> dynamic)?\n    var onpageshow: ((PageTransitionEvent) -> dynamic)?\n    var onpopstate: ((PopStateEvent) -> dynamic)?\n    var onrejectionhandled: ((Event) -> dynamic)?\n    var onstorage: ((StorageEvent) -> dynamic)?\n    var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    var onunload: ((Event) -> dynamic)?\n}\n\npublic external interface DocumentAndElementEventHandlers {\n    var oncopy: ((ClipboardEvent) -> dynamic)?\n    var oncut: ((ClipboardEvent) -> dynamic)?\n    var onpaste: ((ClipboardEvent) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [WindowOrWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WindowOrWorkerGlobalScope) to Kotlin\n */\npublic external interface WindowOrWorkerGlobalScope {\n    val caches: CacheStorage\n    val origin: String\n    fun fetch(input: dynamic, init: RequestInit = definedExternally): Promise<Response>\n    fun btoa(data: String): String\n    fun atob(data: String): String\n    fun setTimeout(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearTimeout(handle: Int = definedExternally): Unit\n    fun setInterval(handler: dynamic, timeout: Int = definedExternally, vararg arguments: Any?): Int\n    fun clearInterval(handle: Int = definedExternally): Unit\n    fun createImageBitmap(image: dynamic, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n    fun createImageBitmap(image: dynamic, sx: Int, sy: Int, sw: Int, sh: Int, options: ImageBitmapOptions = definedExternally): Promise<ImageBitmap>\n}\n\n/**\n * Exposes the JavaScript [NavigatorID](https://developer.mozilla.org/en/docs/Web/API/NavigatorID) to Kotlin\n */\npublic external interface NavigatorID {\n    val appCodeName: String\n    val appName: String\n    val appVersion: String\n    val platform: String\n    val product: String\n    val productSub: String\n    val userAgent: String\n    val vendor: String\n    val vendorSub: String\n    val oscpu: String\n    fun taintEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorLanguage](https://developer.mozilla.org/en/docs/Web/API/NavigatorLanguage) to Kotlin\n */\npublic external interface NavigatorLanguage {\n    val language: String\n    val languages: Array<out String>\n}\n\npublic external interface NavigatorContentUtils {\n    fun registerProtocolHandler(scheme: String, url: String, title: String): Unit\n    fun registerContentHandler(mimeType: String, url: String, title: String): Unit\n    fun isProtocolHandlerRegistered(scheme: String, url: String): String\n    fun isContentHandlerRegistered(mimeType: String, url: String): String\n    fun unregisterProtocolHandler(scheme: String, url: String): Unit\n    fun unregisterContentHandler(mimeType: String, url: String): Unit\n}\n\npublic external interface NavigatorCookies {\n    val cookieEnabled: Boolean\n}\n\n/**\n * Exposes the JavaScript [NavigatorPlugins](https://developer.mozilla.org/en/docs/Web/API/NavigatorPlugins) to Kotlin\n */\npublic external interface NavigatorPlugins {\n    val plugins: PluginArray\n    val mimeTypes: MimeTypeArray\n    fun javaEnabled(): Boolean\n}\n\n/**\n * Exposes the JavaScript [PluginArray](https://developer.mozilla.org/en/docs/Web/API/PluginArray) to Kotlin\n */\npublic external abstract class PluginArray : ItemArrayLike<Plugin> {\n    override val length: Int\n    fun refresh(reload: Boolean = definedExternally): Unit\n    override fun item(index: Int): Plugin?\n    fun namedItem(name: String): Plugin?\n}\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(index: Int): Plugin? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun PluginArray.get(name: String): Plugin? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeTypeArray](https://developer.mozilla.org/en/docs/Web/API/MimeTypeArray) to Kotlin\n */\npublic external abstract class MimeTypeArray : ItemArrayLike<MimeType> {\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun MimeTypeArray.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [Plugin](https://developer.mozilla.org/en/docs/Web/API/Plugin) to Kotlin\n */\npublic external abstract class Plugin : ItemArrayLike<MimeType> {\n    open val name: String\n    open val description: String\n    open val filename: String\n    override val length: Int\n    override fun item(index: Int): MimeType?\n    fun namedItem(name: String): MimeType?\n}\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(index: Int): MimeType? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun Plugin.get(name: String): MimeType? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MimeType](https://developer.mozilla.org/en/docs/Web/API/MimeType) to Kotlin\n */\npublic external abstract class MimeType {\n    open val type: String\n    open val description: String\n    open val suffixes: String\n    open val enabledPlugin: Plugin\n}\n\n/**\n * Exposes the JavaScript [ImageBitmap](https://developer.mozilla.org/en/docs/Web/API/ImageBitmap) to Kotlin\n */\npublic external abstract class ImageBitmap : TexImageSource {\n    open val width: Int\n    open val height: Int\n    fun close(): Unit\n}\n\npublic external interface ImageBitmapOptions {\n    var imageOrientation: ImageOrientation? /* = ImageOrientation.NONE */\n        get() = definedExternally\n        set(value) = definedExternally\n    var premultiplyAlpha: PremultiplyAlpha? /* = PremultiplyAlpha.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var colorSpaceConversion: ColorSpaceConversion? /* = ColorSpaceConversion.DEFAULT */\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeWidth: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeHeight: Int?\n        get() = definedExternally\n        set(value) = definedExternally\n    var resizeQuality: ResizeQuality? /* = ResizeQuality.LOW */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ImageBitmapOptions(imageOrientation: ImageOrientation? = ImageOrientation.NONE, premultiplyAlpha: PremultiplyAlpha? = PremultiplyAlpha.DEFAULT, colorSpaceConversion: ColorSpaceConversion? = ColorSpaceConversion.DEFAULT, resizeWidth: Int? = undefined, resizeHeight: Int? = undefined, resizeQuality: ResizeQuality? = ResizeQuality.LOW): ImageBitmapOptions {\n    val o = js(\"({})\")\n\n    o[\"imageOrientation\"] = imageOrientation\n    o[\"premultiplyAlpha\"] = premultiplyAlpha\n    o[\"colorSpaceConversion\"] = colorSpaceConversion\n    o[\"resizeWidth\"] = resizeWidth\n    o[\"resizeHeight\"] = resizeHeight\n    o[\"resizeQuality\"] = resizeQuality\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageEvent](https://developer.mozilla.org/en/docs/Web/API/MessageEvent) to Kotlin\n */\npublic external open class MessageEvent(type: String, eventInitDict: MessageEventInit = definedExternally) : Event {\n    open val data: Any?\n    open val origin: String\n    open val lastEventId: String\n    open val source: UnionMessagePortOrWindow?\n    open val ports: Array<out MessagePort>\n    fun initMessageEvent(type: String, bubbles: Boolean, cancelable: Boolean, data: Any?, origin: String, lastEventId: String, source: UnionMessagePortOrWindow?, ports: Array<MessagePort>): Unit\n}\n\npublic external interface MessageEventInit : EventInit {\n    var data: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var origin: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var lastEventId: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var source: UnionMessagePortOrWindow? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var ports: Array<MessagePort>? /* = arrayOf() */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MessageEventInit(data: Any? = null, origin: String? = \"\", lastEventId: String? = \"\", source: UnionMessagePortOrWindow? = null, ports: Array<MessagePort>? = arrayOf(), bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MessageEventInit {\n    val o = js(\"({})\")\n\n    o[\"data\"] = data\n    o[\"origin\"] = origin\n    o[\"lastEventId\"] = lastEventId\n    o[\"source\"] = source\n    o[\"ports\"] = ports\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [EventSource](https://developer.mozilla.org/en/docs/Web/API/EventSource) to Kotlin\n */\npublic external open class EventSource(url: String, eventSourceInitDict: EventSourceInit = definedExternally) : EventTarget {\n    open val url: String\n    open val withCredentials: Boolean\n    open val readyState: Short\n    var onopen: ((Event) -> dynamic)?\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    fun close(): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSED: Short\n    }\n}\n\npublic external interface EventSourceInit {\n    var withCredentials: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventSourceInit(withCredentials: Boolean? = false): EventSourceInit {\n    val o = js(\"({})\")\n\n    o[\"withCredentials\"] = withCredentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [WebSocket](https://developer.mozilla.org/en/docs/Web/API/WebSocket) to Kotlin\n */\npublic external open class WebSocket(url: String, protocols: dynamic = definedExternally) : EventTarget {\n    open val url: String\n    open val readyState: Short\n    open val bufferedAmount: Int\n    var onopen: ((Event) -> dynamic)?\n    var onerror: ((Event) -> dynamic)?\n    var onclose: ((Event) -> dynamic)?\n    open val extensions: String\n    open val protocol: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    var binaryType: BinaryType\n    fun close(code: Short = definedExternally, reason: String = definedExternally): Unit\n    fun send(data: String): Unit\n    fun send(data: Blob): Unit\n    fun send(data: ArrayBuffer): Unit\n    fun send(data: ArrayBufferView): Unit\n\n    companion object {\n        val CONNECTING: Short\n        val OPEN: Short\n        val CLOSING: Short\n        val CLOSED: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [CloseEvent](https://developer.mozilla.org/en/docs/Web/API/CloseEvent) to Kotlin\n */\npublic external open class CloseEvent(type: String, eventInitDict: CloseEventInit = definedExternally) : Event {\n    open val wasClean: Boolean\n    open val code: Short\n    open val reason: String\n}\n\npublic external interface CloseEventInit : EventInit {\n    var wasClean: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var code: Short? /* = 0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var reason: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CloseEventInit(wasClean: Boolean? = false, code: Short? = 0, reason: String? = \"\", bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CloseEventInit {\n    val o = js(\"({})\")\n\n    o[\"wasClean\"] = wasClean\n    o[\"code\"] = code\n    o[\"reason\"] = reason\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MessageChannel](https://developer.mozilla.org/en/docs/Web/API/MessageChannel) to Kotlin\n */\npublic external open class MessageChannel {\n    open val port1: MessagePort\n    open val port2: MessagePort\n}\n\n/**\n * Exposes the JavaScript [MessagePort](https://developer.mozilla.org/en/docs/Web/API/MessagePort) to Kotlin\n */\npublic external abstract class MessagePort : EventTarget, UnionMessagePortOrWindow, UnionMessagePortOrServiceWorker, UnionClientOrMessagePortOrServiceWorker {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun start(): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [BroadcastChannel](https://developer.mozilla.org/en/docs/Web/API/BroadcastChannel) to Kotlin\n */\npublic external open class BroadcastChannel(name: String) : EventTarget {\n    open val name: String\n    var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [WorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/WorkerGlobalScope) to Kotlin\n */\npublic external abstract class WorkerGlobalScope : EventTarget, WindowOrWorkerGlobalScope, GlobalPerformance {\n    open val self: WorkerGlobalScope\n    open val location: WorkerLocation\n    open val navigator: WorkerNavigator\n    open var onerror: ((dynamic, String, Int, Int, Any?) -> dynamic)?\n    open var onlanguagechange: ((Event) -> dynamic)?\n    open var onoffline: ((Event) -> dynamic)?\n    open var ononline: ((Event) -> dynamic)?\n    open var onrejectionhandled: ((Event) -> dynamic)?\n    open var onunhandledrejection: ((PromiseRejectionEvent) -> dynamic)?\n    fun importScripts(vararg urls: String): Unit\n}\n\n/**\n * Exposes the JavaScript [DedicatedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/DedicatedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class DedicatedWorkerGlobalScope : WorkerGlobalScope {\n    open var onmessage: ((MessageEvent) -> dynamic)?\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [SharedWorkerGlobalScope](https://developer.mozilla.org/en/docs/Web/API/SharedWorkerGlobalScope) to Kotlin\n */\npublic external abstract class SharedWorkerGlobalScope : WorkerGlobalScope {\n    open val name: String\n    open val applicationCache: ApplicationCache\n    open var onconnect: ((Event) -> dynamic)?\n    fun close(): Unit\n}\n\n/**\n * Exposes the JavaScript [AbstractWorker](https://developer.mozilla.org/en/docs/Web/API/AbstractWorker) to Kotlin\n */\npublic external interface AbstractWorker {\n    var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [Worker](https://developer.mozilla.org/en/docs/Web/API/Worker) to Kotlin\n */\npublic external open class Worker(scriptURL: String, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    var onmessage: ((MessageEvent) -> dynamic)?\n    override var onerror: ((Event) -> dynamic)?\n    fun terminate(): Unit\n    fun postMessage(message: Any?, transfer: Array<dynamic> = definedExternally): Unit\n}\n\npublic external interface WorkerOptions {\n    var type: WorkerType? /* = WorkerType.CLASSIC */\n        get() = definedExternally\n        set(value) = definedExternally\n    var credentials: RequestCredentials? /* = RequestCredentials.OMIT */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun WorkerOptions(type: WorkerType? = WorkerType.CLASSIC, credentials: RequestCredentials? = RequestCredentials.OMIT): WorkerOptions {\n    val o = js(\"({})\")\n\n    o[\"type\"] = type\n    o[\"credentials\"] = credentials\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [SharedWorker](https://developer.mozilla.org/en/docs/Web/API/SharedWorker) to Kotlin\n */\npublic external open class SharedWorker(scriptURL: String, name: String = definedExternally, options: WorkerOptions = definedExternally) : EventTarget, AbstractWorker {\n    open val port: MessagePort\n    override var onerror: ((Event) -> dynamic)?\n}\n\n/**\n * Exposes the JavaScript [NavigatorConcurrentHardware](https://developer.mozilla.org/en/docs/Web/API/NavigatorConcurrentHardware) to Kotlin\n */\npublic external interface NavigatorConcurrentHardware {\n    val hardwareConcurrency: Int\n}\n\n/**\n * Exposes the JavaScript [WorkerNavigator](https://developer.mozilla.org/en/docs/Web/API/WorkerNavigator) to Kotlin\n */\npublic external abstract class WorkerNavigator : NavigatorID, NavigatorLanguage, NavigatorOnLine, NavigatorConcurrentHardware {\n    open val serviceWorker: ServiceWorkerContainer\n}\n\n/**\n * Exposes the JavaScript [WorkerLocation](https://developer.mozilla.org/en/docs/Web/API/WorkerLocation) to Kotlin\n */\npublic external abstract class WorkerLocation {\n    open var href: String\n    open val origin: String\n    open val protocol: String\n    open val host: String\n    open val hostname: String\n    open val port: String\n    open val pathname: String\n    open val search: String\n    open val hash: String\n}\n\n/**\n * Exposes the JavaScript [Storage](https://developer.mozilla.org/en/docs/Web/API/Storage) to Kotlin\n */\npublic external abstract class Storage {\n    open val length: Int\n    fun key(index: Int): String?\n    fun getItem(key: String): String?\n    fun setItem(key: String, value: String): Unit\n    fun removeItem(key: String): Unit\n    fun clear(): Unit\n}\n@kotlin.internal.InlineOnly inline operator fun Storage.get(key: String): String? = asDynamic()[key]\n@kotlin.internal.InlineOnly inline operator fun Storage.set(key: String, value: String): Unit { asDynamic()[key] = value; }\n\n/**\n * Exposes the JavaScript [WindowSessionStorage](https://developer.mozilla.org/en/docs/Web/API/WindowSessionStorage) to Kotlin\n */\npublic external interface WindowSessionStorage {\n    val sessionStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [WindowLocalStorage](https://developer.mozilla.org/en/docs/Web/API/WindowLocalStorage) to Kotlin\n */\npublic external interface WindowLocalStorage {\n    val localStorage: Storage\n}\n\n/**\n * Exposes the JavaScript [StorageEvent](https://developer.mozilla.org/en/docs/Web/API/StorageEvent) to Kotlin\n */\npublic external open class StorageEvent(type: String, eventInitDict: StorageEventInit = definedExternally) : Event {\n    open val key: String?\n    open val oldValue: String?\n    open val newValue: String?\n    open val url: String\n    open val storageArea: Storage?\n}\n\npublic external interface StorageEventInit : EventInit {\n    var key: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var oldValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var newValue: String? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n    var url: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var storageArea: Storage? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun StorageEventInit(key: String? = null, oldValue: String? = null, newValue: String? = null, url: String? = \"\", storageArea: Storage? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): StorageEventInit {\n    val o = js(\"({})\")\n\n    o[\"key\"] = key\n    o[\"oldValue\"] = oldValue\n    o[\"newValue\"] = newValue\n    o[\"url\"] = url\n    o[\"storageArea\"] = storageArea\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external abstract class HTMLAppletElement : HTMLElement {\n    open var align: String\n    open var alt: String\n    open var archive: String\n    open var code: String\n    open var codeBase: String\n    open var height: String\n    open var hspace: Int\n    open var name: String\n    open var _object: String\n    open var vspace: Int\n    open var width: String\n}\n\n/**\n * Exposes the JavaScript [HTMLMarqueeElement](https://developer.mozilla.org/en/docs/Web/API/HTMLMarqueeElement) to Kotlin\n */\npublic external abstract class HTMLMarqueeElement : HTMLElement {\n    open var behavior: String\n    open var bgColor: String\n    open var direction: String\n    open var height: String\n    open var hspace: Int\n    open var loop: Int\n    open var scrollAmount: Int\n    open var scrollDelay: Int\n    open var trueSpeed: Boolean\n    open var vspace: Int\n    open var width: String\n    open var onbounce: ((Event) -> dynamic)?\n    open var onfinish: ((Event) -> dynamic)?\n    open var onstart: ((Event) -> dynamic)?\n    fun start(): Unit\n    fun stop(): Unit\n}\n\n/**\n * Exposes the JavaScript [HTMLFrameSetElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFrameSetElement) to Kotlin\n */\npublic external abstract class HTMLFrameSetElement : HTMLElement, WindowEventHandlers {\n    open var cols: String\n    open var rows: String\n}\n\npublic external abstract class HTMLFrameElement : HTMLElement {\n    open var name: String\n    open var scrolling: String\n    open var src: String\n    open var frameBorder: String\n    open var longDesc: String\n    open var noResize: Boolean\n    open val contentDocument: Document?\n    open val contentWindow: Window?\n    open var marginHeight: String\n    open var marginWidth: String\n}\n\npublic external abstract class HTMLDirectoryElement : HTMLElement {\n    open var compact: Boolean\n}\n\n/**\n * Exposes the JavaScript [HTMLFontElement](https://developer.mozilla.org/en/docs/Web/API/HTMLFontElement) to Kotlin\n */\npublic external abstract class HTMLFontElement : HTMLElement {\n    open var color: String\n    open var face: String\n    open var size: String\n}\n\npublic external interface External {\n    fun AddSearchProvider(): Unit\n    fun IsSearchProviderInstalled(): Unit\n}\n\npublic external interface EventInit {\n    var bubbles: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var cancelable: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventInit(bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): EventInit {\n    val o = js(\"({})\")\n\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [CustomEvent](https://developer.mozilla.org/en/docs/Web/API/CustomEvent) to Kotlin\n */\npublic external open class CustomEvent(type: String, eventInitDict: CustomEventInit = definedExternally) : Event {\n    open val detail: Any?\n    fun initCustomEvent(type: String, bubbles: Boolean, cancelable: Boolean, detail: Any?): Unit\n}\n\npublic external interface CustomEventInit : EventInit {\n    var detail: Any? /* = null */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun CustomEventInit(detail: Any? = null, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): CustomEventInit {\n    val o = js(\"({})\")\n\n    o[\"detail\"] = detail\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\npublic external interface EventListenerOptions {\n    var capture: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun EventListenerOptions(capture: Boolean? = false): EventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface AddEventListenerOptions : EventListenerOptions {\n    var passive: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var once: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun AddEventListenerOptions(passive: Boolean? = false, once: Boolean? = false, capture: Boolean? = false): AddEventListenerOptions {\n    val o = js(\"({})\")\n\n    o[\"passive\"] = passive\n    o[\"once\"] = once\n    o[\"capture\"] = capture\n\n    return o\n}\n\npublic external interface NonElementParentNode {\n    fun getElementById(elementId: String): Element?\n}\n\n/**\n * Exposes the JavaScript [DocumentOrShadowRoot](https://developer.mozilla.org/en/docs/Web/API/DocumentOrShadowRoot) to Kotlin\n */\npublic external interface DocumentOrShadowRoot {\n    val fullscreenElement: Element?\n}\n\n/**\n * Exposes the JavaScript [ParentNode](https://developer.mozilla.org/en/docs/Web/API/ParentNode) to Kotlin\n */\npublic external interface ParentNode {\n    val children: HTMLCollection\n    val firstElementChild: Element?\n    val lastElementChild: Element?\n    val childElementCount: Int\n    fun prepend(vararg nodes: dynamic): Unit\n    fun append(vararg nodes: dynamic): Unit\n    fun querySelector(selectors: String): Element?\n    fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [NonDocumentTypeChildNode](https://developer.mozilla.org/en/docs/Web/API/NonDocumentTypeChildNode) to Kotlin\n */\npublic external interface NonDocumentTypeChildNode {\n    val previousElementSibling: Element?\n    val nextElementSibling: Element?\n}\n\n/**\n * Exposes the JavaScript [ChildNode](https://developer.mozilla.org/en/docs/Web/API/ChildNode) to Kotlin\n */\npublic external interface ChildNode {\n    fun before(vararg nodes: dynamic): Unit\n    fun after(vararg nodes: dynamic): Unit\n    fun replaceWith(vararg nodes: dynamic): Unit\n    fun remove(): Unit\n}\n\n/**\n * Exposes the JavaScript [Slotable](https://developer.mozilla.org/en/docs/Web/API/Slotable) to Kotlin\n */\npublic external interface Slotable {\n    val assignedSlot: HTMLSlotElement?\n}\n\n/**\n * Exposes the JavaScript [NodeList](https://developer.mozilla.org/en/docs/Web/API/NodeList) to Kotlin\n */\npublic external abstract class NodeList : ItemArrayLike<Node> {\n    override val length: Int\n    override fun item(index: Int): Node?\n}\n@kotlin.internal.InlineOnly inline operator fun NodeList.get(index: Int): Node? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [HTMLCollection](https://developer.mozilla.org/en/docs/Web/API/HTMLCollection) to Kotlin\n */\npublic external abstract class HTMLCollection : UnionElementOrHTMLCollection, ItemArrayLike<Element> {\n    override val length: Int\n    override fun item(index: Int): Element?\n    fun namedItem(name: String): Element?\n}\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(index: Int): Element? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun HTMLCollection.get(name: String): Element? = asDynamic()[name]\n\n/**\n * Exposes the JavaScript [MutationObserver](https://developer.mozilla.org/en/docs/Web/API/MutationObserver) to Kotlin\n */\npublic external open class MutationObserver(callback: (Array<MutationRecord>, MutationObserver) -> Unit) {\n    fun observe(target: Node, options: MutationObserverInit = definedExternally): Unit\n    fun disconnect(): Unit\n    fun takeRecords(): Array<MutationRecord>\n}\n\n/**\n * Exposes the JavaScript [MutationObserverInit](https://developer.mozilla.org/en/docs/Web/API/MutationObserverInit) to Kotlin\n */\npublic external interface MutationObserverInit {\n    var childList: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributes: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterData: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var subtree: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var characterDataOldValue: Boolean?\n        get() = definedExternally\n        set(value) = definedExternally\n    var attributeFilter: Array<String>?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MutationObserverInit(childList: Boolean? = false, attributes: Boolean? = undefined, characterData: Boolean? = undefined, subtree: Boolean? = false, attributeOldValue: Boolean? = undefined, characterDataOldValue: Boolean? = undefined, attributeFilter: Array<String>? = undefined): MutationObserverInit {\n    val o = js(\"({})\")\n\n    o[\"childList\"] = childList\n    o[\"attributes\"] = attributes\n    o[\"characterData\"] = characterData\n    o[\"subtree\"] = subtree\n    o[\"attributeOldValue\"] = attributeOldValue\n    o[\"characterDataOldValue\"] = characterDataOldValue\n    o[\"attributeFilter\"] = attributeFilter\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MutationRecord](https://developer.mozilla.org/en/docs/Web/API/MutationRecord) to Kotlin\n */\npublic external abstract class MutationRecord {\n    open val type: String\n    open val target: Node\n    open val addedNodes: NodeList\n    open val removedNodes: NodeList\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open val attributeName: String?\n    open val attributeNamespace: String?\n    open val oldValue: String?\n}\n\n/**\n * Exposes the JavaScript [Node](https://developer.mozilla.org/en/docs/Web/API/Node) to Kotlin\n */\npublic external abstract class Node : EventTarget {\n    open val nodeType: Short\n    open val nodeName: String\n    open val baseURI: String\n    open val isConnected: Boolean\n    open val ownerDocument: Document?\n    open val parentNode: Node?\n    open val parentElement: Element?\n    open val childNodes: NodeList\n    open val firstChild: Node?\n    open val lastChild: Node?\n    open val previousSibling: Node?\n    open val nextSibling: Node?\n    open var nodeValue: String?\n    open var textContent: String?\n    fun getRootNode(options: GetRootNodeOptions = definedExternally): Node\n    fun hasChildNodes(): Boolean\n    fun normalize(): Unit\n    fun cloneNode(deep: Boolean = definedExternally): Node\n    fun isEqualNode(otherNode: Node?): Boolean\n    fun isSameNode(otherNode: Node?): Boolean\n    fun compareDocumentPosition(other: Node): Short\n    fun contains(other: Node?): Boolean\n    fun lookupPrefix(namespace: String?): String?\n    fun lookupNamespaceURI(prefix: String?): String?\n    fun isDefaultNamespace(namespace: String?): Boolean\n    fun insertBefore(node: Node, child: Node?): Node\n    fun appendChild(node: Node): Node\n    fun replaceChild(node: Node, child: Node): Node\n    fun removeChild(child: Node): Node\n\n    companion object {\n        val ELEMENT_NODE: Short\n        val ATTRIBUTE_NODE: Short\n        val TEXT_NODE: Short\n        val CDATA_SECTION_NODE: Short\n        val ENTITY_REFERENCE_NODE: Short\n        val ENTITY_NODE: Short\n        val PROCESSING_INSTRUCTION_NODE: Short\n        val COMMENT_NODE: Short\n        val DOCUMENT_NODE: Short\n        val DOCUMENT_TYPE_NODE: Short\n        val DOCUMENT_FRAGMENT_NODE: Short\n        val NOTATION_NODE: Short\n        val DOCUMENT_POSITION_DISCONNECTED: Short\n        val DOCUMENT_POSITION_PRECEDING: Short\n        val DOCUMENT_POSITION_FOLLOWING: Short\n        val DOCUMENT_POSITION_CONTAINS: Short\n        val DOCUMENT_POSITION_CONTAINED_BY: Short\n        val DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: Short\n    }\n}\n\npublic external interface GetRootNodeOptions {\n    var composed: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun GetRootNodeOptions(composed: Boolean? = false): GetRootNodeOptions {\n    val o = js(\"({})\")\n\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [XMLDocument](https://developer.mozilla.org/en/docs/Web/API/XMLDocument) to Kotlin\n */\npublic external open class XMLDocument : Document {\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\npublic external interface ElementCreationOptions {\n    @JsName(\"is\") var is_: String?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ElementCreationOptions(is_: String? = undefined): ElementCreationOptions {\n    val o = js(\"({})\")\n\n    o[\"is\"] = is_\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMImplementation](https://developer.mozilla.org/en/docs/Web/API/DOMImplementation) to Kotlin\n */\npublic external abstract class DOMImplementation {\n    fun createDocumentType(qualifiedName: String, publicId: String, systemId: String): DocumentType\n    fun createDocument(namespace: String?, qualifiedName: String, doctype: DocumentType? = definedExternally): XMLDocument\n    fun createHTMLDocument(title: String = definedExternally): Document\n    fun hasFeature(): Boolean\n}\n\n/**\n * Exposes the JavaScript [DocumentType](https://developer.mozilla.org/en/docs/Web/API/DocumentType) to Kotlin\n */\npublic external abstract class DocumentType : Node, ChildNode {\n    open val name: String\n    open val publicId: String\n    open val systemId: String\n}\n\n/**\n * Exposes the JavaScript [DocumentFragment](https://developer.mozilla.org/en/docs/Web/API/DocumentFragment) to Kotlin\n */\npublic external open class DocumentFragment : Node, NonElementParentNode, ParentNode {\n    override val children: HTMLCollection\n    override val firstElementChild: Element?\n    override val lastElementChild: Element?\n    override val childElementCount: Int\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [ShadowRoot](https://developer.mozilla.org/en/docs/Web/API/ShadowRoot) to Kotlin\n */\npublic external open class ShadowRoot : DocumentFragment, DocumentOrShadowRoot {\n    open val mode: ShadowRootMode\n    open val host: Element\n    override val fullscreenElement: Element?\n    override fun getElementById(elementId: String): Element?\n    override fun prepend(vararg nodes: dynamic): Unit\n    override fun append(vararg nodes: dynamic): Unit\n    override fun querySelector(selectors: String): Element?\n    override fun querySelectorAll(selectors: String): NodeList\n}\n\n/**\n * Exposes the JavaScript [Element](https://developer.mozilla.org/en/docs/Web/API/Element) to Kotlin\n */\npublic external abstract class Element : Node, ParentNode, NonDocumentTypeChildNode, ChildNode, Slotable, GeometryUtils, UnionElementOrProcessingInstruction, UnionElementOrHTMLCollection, UnionElementOrRadioNodeList, UnionElementOrMouseEvent {\n    open var innerHTML: String\n    open var outerHTML: String\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val tagName: String\n    open var id: String\n    open var className: String\n    open val classList: DOMTokenList\n    open var slot: String\n    open val attributes: NamedNodeMap\n    open val shadowRoot: ShadowRoot?\n    open var scrollTop: Double\n    open var scrollLeft: Double\n    open val scrollWidth: Int\n    open val scrollHeight: Int\n    open val clientTop: Int\n    open val clientLeft: Int\n    open val clientWidth: Int\n    open val clientHeight: Int\n    fun requestFullscreen(): Promise<Unit>\n    fun setPointerCapture(pointerId: Int): Unit\n    fun releasePointerCapture(pointerId: Int): Unit\n    fun hasPointerCapture(pointerId: Int): Boolean\n    fun insertAdjacentHTML(position: String, text: String): Unit\n    fun hasAttributes(): Boolean\n    fun getAttributeNames(): Array<String>\n    fun getAttribute(qualifiedName: String): String?\n    fun getAttributeNS(namespace: String?, localName: String): String?\n    fun setAttribute(qualifiedName: String, value: String): Unit\n    fun setAttributeNS(namespace: String?, qualifiedName: String, value: String): Unit\n    fun removeAttribute(qualifiedName: String): Unit\n    fun removeAttributeNS(namespace: String?, localName: String): Unit\n    fun hasAttribute(qualifiedName: String): Boolean\n    fun hasAttributeNS(namespace: String?, localName: String): Boolean\n    fun getAttributeNode(qualifiedName: String): Attr?\n    fun getAttributeNodeNS(namespace: String?, localName: String): Attr?\n    fun setAttributeNode(attr: Attr): Attr?\n    fun setAttributeNodeNS(attr: Attr): Attr?\n    fun removeAttributeNode(attr: Attr): Attr\n    fun attachShadow(init: ShadowRootInit): ShadowRoot\n    fun closest(selectors: String): Element?\n    fun matches(selectors: String): Boolean\n    fun webkitMatchesSelector(selectors: String): Boolean\n    fun getElementsByTagName(qualifiedName: String): HTMLCollection\n    fun getElementsByTagNameNS(namespace: String?, localName: String): HTMLCollection\n    fun getElementsByClassName(classNames: String): HTMLCollection\n    fun insertAdjacentElement(where: String, element: Element): Element?\n    fun insertAdjacentText(where: String, data: String): Unit\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n    fun scrollIntoView(): Unit\n    fun scrollIntoView(arg: dynamic): Unit\n    fun scroll(options: ScrollToOptions = definedExternally): Unit\n    fun scroll(x: Double, y: Double): Unit\n    fun scrollTo(options: ScrollToOptions = definedExternally): Unit\n    fun scrollTo(x: Double, y: Double): Unit\n    fun scrollBy(options: ScrollToOptions = definedExternally): Unit\n    fun scrollBy(x: Double, y: Double): Unit\n}\n\npublic external interface ShadowRootInit {\n    var mode: ShadowRootMode?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ShadowRootInit(mode: ShadowRootMode?): ShadowRootInit {\n    val o = js(\"({})\")\n\n    o[\"mode\"] = mode\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [NamedNodeMap](https://developer.mozilla.org/en/docs/Web/API/NamedNodeMap) to Kotlin\n */\npublic external abstract class NamedNodeMap : ItemArrayLike<Attr> {\n    override val length: Int\n    override fun item(index: Int): Attr?\n    fun getNamedItem(qualifiedName: String): Attr?\n    fun getNamedItemNS(namespace: String?, localName: String): Attr?\n    fun setNamedItem(attr: Attr): Attr?\n    fun setNamedItemNS(attr: Attr): Attr?\n    fun removeNamedItem(qualifiedName: String): Attr\n    fun removeNamedItemNS(namespace: String?, localName: String): Attr\n}\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(index: Int): Attr? = asDynamic()[index]\n@kotlin.internal.InlineOnly inline operator fun NamedNodeMap.get(qualifiedName: String): Attr? = asDynamic()[qualifiedName]\n\n/**\n * Exposes the JavaScript [Attr](https://developer.mozilla.org/en/docs/Web/API/Attr) to Kotlin\n */\npublic external abstract class Attr : Node {\n    open val namespaceURI: String?\n    open val prefix: String?\n    open val localName: String\n    open val name: String\n    open var value: String\n    open val ownerElement: Element?\n    open val specified: Boolean\n}\n\n/**\n * Exposes the JavaScript [CharacterData](https://developer.mozilla.org/en/docs/Web/API/CharacterData) to Kotlin\n */\npublic external abstract class CharacterData : Node, NonDocumentTypeChildNode, ChildNode {\n    open var data: String\n    open val length: Int\n    fun substringData(offset: Int, count: Int): String\n    fun appendData(data: String): Unit\n    fun insertData(offset: Int, data: String): Unit\n    fun deleteData(offset: Int, count: Int): Unit\n    fun replaceData(offset: Int, count: Int, data: String): Unit\n}\n\n/**\n * Exposes the JavaScript [Text](https://developer.mozilla.org/en/docs/Web/API/Text) to Kotlin\n */\npublic external open class Text(data: String = definedExternally) : CharacterData, Slotable, GeometryUtils {\n    open val wholeText: String\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override val assignedSlot: HTMLSlotElement?\n    fun splitText(offset: Int): Text\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [CDATASection](https://developer.mozilla.org/en/docs/Web/API/CDATASection) to Kotlin\n */\npublic external open class CDATASection : Text {\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n    override fun getBoxQuads(options: BoxQuadOptions /* = definedExternally */): Array<DOMQuad>\n    override fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMQuad\n    override fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions /* = definedExternally */): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [ProcessingInstruction](https://developer.mozilla.org/en/docs/Web/API/ProcessingInstruction) to Kotlin\n */\npublic external abstract class ProcessingInstruction : CharacterData, LinkStyle, UnionElementOrProcessingInstruction {\n    open val target: String\n}\n\n/**\n * Exposes the JavaScript [Comment](https://developer.mozilla.org/en/docs/Web/API/Comment) to Kotlin\n */\npublic external open class Comment(data: String = definedExternally) : CharacterData {\n    override val previousElementSibling: Element?\n    override val nextElementSibling: Element?\n    override fun before(vararg nodes: dynamic): Unit\n    override fun after(vararg nodes: dynamic): Unit\n    override fun replaceWith(vararg nodes: dynamic): Unit\n    override fun remove(): Unit\n}\n\n/**\n * Exposes the JavaScript [Range](https://developer.mozilla.org/en/docs/Web/API/Range) to Kotlin\n */\npublic external open class Range {\n    open val startContainer: Node\n    open val startOffset: Int\n    open val endContainer: Node\n    open val endOffset: Int\n    open val collapsed: Boolean\n    open val commonAncestorContainer: Node\n    fun createContextualFragment(fragment: String): DocumentFragment\n    fun setStart(node: Node, offset: Int): Unit\n    fun setEnd(node: Node, offset: Int): Unit\n    fun setStartBefore(node: Node): Unit\n    fun setStartAfter(node: Node): Unit\n    fun setEndBefore(node: Node): Unit\n    fun setEndAfter(node: Node): Unit\n    fun collapse(toStart: Boolean = definedExternally): Unit\n    fun selectNode(node: Node): Unit\n    fun selectNodeContents(node: Node): Unit\n    fun compareBoundaryPoints(how: Short, sourceRange: Range): Short\n    fun deleteContents(): Unit\n    fun extractContents(): DocumentFragment\n    fun cloneContents(): DocumentFragment\n    fun insertNode(node: Node): Unit\n    fun surroundContents(newParent: Node): Unit\n    fun cloneRange(): Range\n    fun detach(): Unit\n    fun isPointInRange(node: Node, offset: Int): Boolean\n    fun comparePoint(node: Node, offset: Int): Short\n    fun intersectsNode(node: Node): Boolean\n    fun getClientRects(): Array<DOMRect>\n    fun getBoundingClientRect(): DOMRect\n\n    companion object {\n        val START_TO_START: Short\n        val START_TO_END: Short\n        val END_TO_END: Short\n        val END_TO_START: Short\n    }\n}\n\n/**\n * Exposes the JavaScript [NodeIterator](https://developer.mozilla.org/en/docs/Web/API/NodeIterator) to Kotlin\n */\npublic external abstract class NodeIterator {\n    open val root: Node\n    open val referenceNode: Node\n    open val pointerBeforeReferenceNode: Boolean\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    fun nextNode(): Node?\n    fun previousNode(): Node?\n    fun detach(): Unit\n}\n\n/**\n * Exposes the JavaScript [TreeWalker](https://developer.mozilla.org/en/docs/Web/API/TreeWalker) to Kotlin\n */\npublic external abstract class TreeWalker {\n    open val root: Node\n    open val whatToShow: Int\n    open val filter: NodeFilter?\n    open var currentNode: Node\n    fun parentNode(): Node?\n    fun firstChild(): Node?\n    fun lastChild(): Node?\n    fun previousSibling(): Node?\n    fun nextSibling(): Node?\n    fun previousNode(): Node?\n    fun nextNode(): Node?\n}\n\n/**\n * Exposes the JavaScript [NodeFilter](https://developer.mozilla.org/en/docs/Web/API/NodeFilter) to Kotlin\n */\npublic external interface NodeFilter {\n    fun acceptNode(node: Node): Short\n\n    companion object {\n        val FILTER_ACCEPT: Short\n        val FILTER_REJECT: Short\n        val FILTER_SKIP: Short\n        val SHOW_ALL: Int\n        val SHOW_ELEMENT: Int\n        val SHOW_ATTRIBUTE: Int\n        val SHOW_TEXT: Int\n        val SHOW_CDATA_SECTION: Int\n        val SHOW_ENTITY_REFERENCE: Int\n        val SHOW_ENTITY: Int\n        val SHOW_PROCESSING_INSTRUCTION: Int\n        val SHOW_COMMENT: Int\n        val SHOW_DOCUMENT: Int\n        val SHOW_DOCUMENT_TYPE: Int\n        val SHOW_DOCUMENT_FRAGMENT: Int\n        val SHOW_NOTATION: Int\n    }\n}\n\n/**\n * Exposes the JavaScript [DOMTokenList](https://developer.mozilla.org/en/docs/Web/API/DOMTokenList) to Kotlin\n */\npublic external abstract class DOMTokenList : ItemArrayLike<String> {\n    override val length: Int\n    open var value: String\n    override fun item(index: Int): String?\n    fun contains(token: String): Boolean\n    fun add(vararg tokens: String): Unit\n    fun remove(vararg tokens: String): Unit\n    fun toggle(token: String, force: Boolean = definedExternally): Boolean\n    fun replace(token: String, newToken: String): Unit\n    fun supports(token: String): Boolean\n}\n@kotlin.internal.InlineOnly inline operator fun DOMTokenList.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMPointReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMPointReadOnly) to Kotlin\n */\npublic external open class DOMPointReadOnly(x: Double, y: Double, z: Double, w: Double) {\n    open val x: Double\n    open val y: Double\n    open val z: Double\n    open val w: Double\n    fun matrixTransform(matrix: DOMMatrixReadOnly): DOMPoint\n}\n\n/**\n * Exposes the JavaScript [DOMPoint](https://developer.mozilla.org/en/docs/Web/API/DOMPoint) to Kotlin\n */\npublic external open class DOMPoint : DOMPointReadOnly {\n    constructor(point: DOMPointInit)\n    constructor(x: Double = definedExternally, y: Double = definedExternally, z: Double = definedExternally, w: Double = definedExternally)\n    override var x: Double\n    override var y: Double\n    override var z: Double\n    override var w: Double\n}\n\n/**\n * Exposes the JavaScript [DOMPointInit](https://developer.mozilla.org/en/docs/Web/API/DOMPointInit) to Kotlin\n */\npublic external interface DOMPointInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var z: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var w: Double? /* = 1.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMPointInit(x: Double? = 0.0, y: Double? = 0.0, z: Double? = 0.0, w: Double? = 1.0): DOMPointInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"z\"] = z\n    o[\"w\"] = w\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [DOMRect](https://developer.mozilla.org/en/docs/Web/API/DOMRect) to Kotlin\n */\npublic external open class DOMRect(x: Double = definedExternally, y: Double = definedExternally, width: Double = definedExternally, height: Double = definedExternally) : DOMRectReadOnly {\n    override var x: Double\n    override var y: Double\n    override var width: Double\n    override var height: Double\n}\n\n/**\n * Exposes the JavaScript [DOMRectReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMRectReadOnly) to Kotlin\n */\npublic external open class DOMRectReadOnly(x: Double, y: Double, width: Double, height: Double) {\n    open val x: Double\n    open val y: Double\n    open val width: Double\n    open val height: Double\n    open val top: Double\n    open val right: Double\n    open val bottom: Double\n    open val left: Double\n}\n\npublic external interface DOMRectInit {\n    var x: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var y: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var width: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n    var height: Double? /* = 0.0 */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun DOMRectInit(x: Double? = 0.0, y: Double? = 0.0, width: Double? = 0.0, height: Double? = 0.0): DOMRectInit {\n    val o = js(\"({})\")\n\n    o[\"x\"] = x\n    o[\"y\"] = y\n    o[\"width\"] = width\n    o[\"height\"] = height\n\n    return o\n}\n\npublic external interface DOMRectList : ItemArrayLike<DOMRect> {\n    override fun item(index: Int): DOMRect?\n}\n@kotlin.internal.InlineOnly inline operator fun DOMRectList.get(index: Int): DOMRect? = asDynamic()[index]\n\n/**\n * Exposes the JavaScript [DOMQuad](https://developer.mozilla.org/en/docs/Web/API/DOMQuad) to Kotlin\n */\npublic external open class DOMQuad {\n    constructor(p1: DOMPointInit = definedExternally, p2: DOMPointInit = definedExternally, p3: DOMPointInit = definedExternally, p4: DOMPointInit = definedExternally)\n    constructor(rect: DOMRectInit)\n    open val p1: DOMPoint\n    open val p2: DOMPoint\n    open val p3: DOMPoint\n    open val p4: DOMPoint\n    open val bounds: DOMRectReadOnly\n}\n\n/**\n * Exposes the JavaScript [DOMMatrixReadOnly](https://developer.mozilla.org/en/docs/Web/API/DOMMatrixReadOnly) to Kotlin\n */\npublic external open class DOMMatrixReadOnly(numberSequence: Array<Double>) {\n    open val a: Double\n    open val b: Double\n    open val c: Double\n    open val d: Double\n    open val e: Double\n    open val f: Double\n    open val m11: Double\n    open val m12: Double\n    open val m13: Double\n    open val m14: Double\n    open val m21: Double\n    open val m22: Double\n    open val m23: Double\n    open val m24: Double\n    open val m31: Double\n    open val m32: Double\n    open val m33: Double\n    open val m34: Double\n    open val m41: Double\n    open val m42: Double\n    open val m43: Double\n    open val m44: Double\n    open val is2D: Boolean\n    open val isIdentity: Boolean\n    fun translate(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scale(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3d(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniform(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotate(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVector(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngle(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewX(sx: Double): DOMMatrix\n    fun skewY(sy: Double): DOMMatrix\n    fun multiply(other: DOMMatrix): DOMMatrix\n    fun flipX(): DOMMatrix\n    fun flipY(): DOMMatrix\n    fun inverse(): DOMMatrix\n    fun transformPoint(point: DOMPointInit = definedExternally): DOMPoint\n    fun toFloat32Array(): Float32Array\n    fun toFloat64Array(): Float64Array\n}\n\n/**\n * Exposes the JavaScript [DOMMatrix](https://developer.mozilla.org/en/docs/Web/API/DOMMatrix) to Kotlin\n */\npublic external open class DOMMatrix() : DOMMatrixReadOnly {\n    constructor(transformList: String)\n    constructor(other: DOMMatrixReadOnly)\n    constructor(array32: Float32Array)\n    constructor(array64: Float64Array)\n    constructor(numberSequence: Array<Double>)\n    override var a: Double\n    override var b: Double\n    override var c: Double\n    override var d: Double\n    override var e: Double\n    override var f: Double\n    override var m11: Double\n    override var m12: Double\n    override var m13: Double\n    override var m14: Double\n    override var m21: Double\n    override var m22: Double\n    override var m23: Double\n    override var m24: Double\n    override var m31: Double\n    override var m32: Double\n    override var m33: Double\n    override var m34: Double\n    override var m41: Double\n    override var m42: Double\n    override var m43: Double\n    override var m44: Double\n    fun multiplySelf(other: DOMMatrix): DOMMatrix\n    fun preMultiplySelf(other: DOMMatrix): DOMMatrix\n    fun translateSelf(tx: Double, ty: Double, tz: Double = definedExternally): DOMMatrix\n    fun scaleSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun scale3dSelf(scale: Double, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun scaleNonUniformSelf(scaleX: Double, scaleY: Double = definedExternally, scaleZ: Double = definedExternally, originX: Double = definedExternally, originY: Double = definedExternally, originZ: Double = definedExternally): DOMMatrix\n    fun rotateSelf(angle: Double, originX: Double = definedExternally, originY: Double = definedExternally): DOMMatrix\n    fun rotateFromVectorSelf(x: Double, y: Double): DOMMatrix\n    fun rotateAxisAngleSelf(x: Double, y: Double, z: Double, angle: Double): DOMMatrix\n    fun skewXSelf(sx: Double): DOMMatrix\n    fun skewYSelf(sy: Double): DOMMatrix\n    fun invertSelf(): DOMMatrix\n    fun setMatrixValue(transformList: String): DOMMatrix\n}\n\npublic external interface ScrollOptions {\n    var behavior: ScrollBehavior? /* = ScrollBehavior.AUTO */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollOptions(behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollOptions {\n    val o = js(\"({})\")\n\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [ScrollToOptions](https://developer.mozilla.org/en/docs/Web/API/ScrollToOptions) to Kotlin\n */\npublic external interface ScrollToOptions : ScrollOptions {\n    var left: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n    var top: Double?\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollToOptions(left: Double? = undefined, top: Double? = undefined, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollToOptions {\n    val o = js(\"({})\")\n\n    o[\"left\"] = left\n    o[\"top\"] = top\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [MediaQueryList](https://developer.mozilla.org/en/docs/Web/API/MediaQueryList) to Kotlin\n */\npublic external abstract class MediaQueryList : EventTarget {\n    open val media: String\n    open val matches: Boolean\n    open var onchange: ((Event) -> dynamic)?\n    fun addListener(listener: EventListener?): Unit\n    fun addListener(listener: ((Event) -> Unit)?): Unit\n    fun removeListener(listener: EventListener?): Unit\n    fun removeListener(listener: ((Event) -> Unit)?): Unit\n}\n\n/**\n * Exposes the JavaScript [MediaQueryListEvent](https://developer.mozilla.org/en/docs/Web/API/MediaQueryListEvent) to Kotlin\n */\npublic external open class MediaQueryListEvent(type: String, eventInitDict: MediaQueryListEventInit = definedExternally) : Event {\n    open val media: String\n    open val matches: Boolean\n}\n\npublic external interface MediaQueryListEventInit : EventInit {\n    var media: String? /* = \"\" */\n        get() = definedExternally\n        set(value) = definedExternally\n    var matches: Boolean? /* = false */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun MediaQueryListEventInit(media: String? = \"\", matches: Boolean? = false, bubbles: Boolean? = false, cancelable: Boolean? = false, composed: Boolean? = false): MediaQueryListEventInit {\n    val o = js(\"({})\")\n\n    o[\"media\"] = media\n    o[\"matches\"] = matches\n    o[\"bubbles\"] = bubbles\n    o[\"cancelable\"] = cancelable\n    o[\"composed\"] = composed\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [Screen](https://developer.mozilla.org/en/docs/Web/API/Screen) to Kotlin\n */\npublic external abstract class Screen {\n    open val availWidth: Int\n    open val availHeight: Int\n    open val width: Int\n    open val height: Int\n    open val colorDepth: Int\n    open val pixelDepth: Int\n}\n\n/**\n * Exposes the JavaScript [CaretPosition](https://developer.mozilla.org/en/docs/Web/API/CaretPosition) to Kotlin\n */\npublic external abstract class CaretPosition {\n    open val offsetNode: Node\n    open val offset: Int\n    fun getClientRect(): DOMRect?\n}\n\npublic external interface ScrollIntoViewOptions : ScrollOptions {\n    var block: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var inline: ScrollLogicalPosition? /* = ScrollLogicalPosition.CENTER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ScrollIntoViewOptions(block: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, inline: ScrollLogicalPosition? = ScrollLogicalPosition.CENTER, behavior: ScrollBehavior? = ScrollBehavior.AUTO): ScrollIntoViewOptions {\n    val o = js(\"({})\")\n\n    o[\"block\"] = block\n    o[\"inline\"] = inline\n    o[\"behavior\"] = behavior\n\n    return o\n}\n\npublic external interface BoxQuadOptions {\n    var box: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var relativeTo: dynamic\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun BoxQuadOptions(box: CSSBoxType? = CSSBoxType.BORDER, relativeTo: dynamic = undefined): BoxQuadOptions {\n    val o = js(\"({})\")\n\n    o[\"box\"] = box\n    o[\"relativeTo\"] = relativeTo\n\n    return o\n}\n\npublic external interface ConvertCoordinateOptions {\n    var fromBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n    var toBox: CSSBoxType? /* = CSSBoxType.BORDER */\n        get() = definedExternally\n        set(value) = definedExternally\n}\n\n@kotlin.internal.InlineOnly\npublic inline fun ConvertCoordinateOptions(fromBox: CSSBoxType? = CSSBoxType.BORDER, toBox: CSSBoxType? = CSSBoxType.BORDER): ConvertCoordinateOptions {\n    val o = js(\"({})\")\n\n    o[\"fromBox\"] = fromBox\n    o[\"toBox\"] = toBox\n\n    return o\n}\n\n/**\n * Exposes the JavaScript [GeometryUtils](https://developer.mozilla.org/en/docs/Web/API/GeometryUtils) to Kotlin\n */\npublic external interface GeometryUtils {\n    fun getBoxQuads(options: BoxQuadOptions = definedExternally): Array<DOMQuad>\n    fun convertQuadFromNode(quad: dynamic, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertRectFromNode(rect: DOMRectReadOnly, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMQuad\n    fun convertPointFromNode(point: DOMPointInit, from: dynamic, options: ConvertCoordinateOptions = definedExternally): DOMPoint\n}\n\npublic external @marker interface UnionElementOrProcessingInstruction {\n}\n\npublic external @marker interface UnionElementOrHTMLCollection {\n}\n\npublic external @marker interface UnionElementOrRadioNodeList {\n}\n\npublic external @marker interface UnionHTMLOptGroupElementOrHTMLOptionElement {\n}\n\npublic external @marker interface UnionAudioTrackOrTextTrackOrVideoTrack {\n}\n\npublic external @marker interface UnionElementOrMouseEvent {\n}\n\npublic external @marker interface UnionMessagePortOrWindow {\n}\n\npublic external @marker interface UnionMessagePortOrServiceWorker {\n}\n\npublic external @marker interface HTMLOrSVGScriptElement {\n}\n\npublic external @marker interface RenderingContext {\n}\n\npublic external @marker interface HTMLOrSVGImageElement {\n}\n\n/* please, don't implement this interface! */\npublic external interface DocumentReadyState {\n    companion object\n}\npublic inline val DocumentReadyState.Companion.LOADING: DocumentReadyState get() = \"loading\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.INTERACTIVE: DocumentReadyState get() = \"interactive\".asDynamic().unsafeCast<DocumentReadyState>()\npublic inline val DocumentReadyState.Companion.COMPLETE: DocumentReadyState get() = \"complete\".asDynamic().unsafeCast<DocumentReadyState>()\n\n/* please, don't implement this interface! */\npublic external interface CanPlayTypeResult {\n    companion object\n}\npublic inline val CanPlayTypeResult.Companion.EMPTY: CanPlayTypeResult get() = \"\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.MAYBE: CanPlayTypeResult get() = \"maybe\".asDynamic().unsafeCast<CanPlayTypeResult>()\npublic inline val CanPlayTypeResult.Companion.PROBABLY: CanPlayTypeResult get() = \"probably\".asDynamic().unsafeCast<CanPlayTypeResult>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackMode {\n    companion object\n}\npublic inline val TextTrackMode.Companion.DISABLED: TextTrackMode get() = \"disabled\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.HIDDEN: TextTrackMode get() = \"hidden\".asDynamic().unsafeCast<TextTrackMode>()\npublic inline val TextTrackMode.Companion.SHOWING: TextTrackMode get() = \"showing\".asDynamic().unsafeCast<TextTrackMode>()\n\n/* please, don't implement this interface! */\npublic external interface TextTrackKind {\n    companion object\n}\npublic inline val TextTrackKind.Companion.SUBTITLES: TextTrackKind get() = \"subtitles\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CAPTIONS: TextTrackKind get() = \"captions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.DESCRIPTIONS: TextTrackKind get() = \"descriptions\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.CHAPTERS: TextTrackKind get() = \"chapters\".asDynamic().unsafeCast<TextTrackKind>()\npublic inline val TextTrackKind.Companion.METADATA: TextTrackKind get() = \"metadata\".asDynamic().unsafeCast<TextTrackKind>()\n\n/* please, don't implement this interface! */\npublic external interface SelectionMode {\n    companion object\n}\npublic inline val SelectionMode.Companion.SELECT: SelectionMode get() = \"select\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.START: SelectionMode get() = \"start\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.END: SelectionMode get() = \"end\".asDynamic().unsafeCast<SelectionMode>()\npublic inline val SelectionMode.Companion.PRESERVE: SelectionMode get() = \"preserve\".asDynamic().unsafeCast<SelectionMode>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasFillRule {\n    companion object\n}\npublic inline val CanvasFillRule.Companion.NONZERO: CanvasFillRule get() = \"nonzero\".asDynamic().unsafeCast<CanvasFillRule>()\npublic inline val CanvasFillRule.Companion.EVENODD: CanvasFillRule get() = \"evenodd\".asDynamic().unsafeCast<CanvasFillRule>()\n\n/* please, don't implement this interface! */\npublic external interface ImageSmoothingQuality {\n    companion object\n}\npublic inline val ImageSmoothingQuality.Companion.LOW: ImageSmoothingQuality get() = \"low\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.MEDIUM: ImageSmoothingQuality get() = \"medium\".asDynamic().unsafeCast<ImageSmoothingQuality>()\npublic inline val ImageSmoothingQuality.Companion.HIGH: ImageSmoothingQuality get() = \"high\".asDynamic().unsafeCast<ImageSmoothingQuality>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineCap {\n    companion object\n}\npublic inline val CanvasLineCap.Companion.BUTT: CanvasLineCap get() = \"butt\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.ROUND: CanvasLineCap get() = \"round\".asDynamic().unsafeCast<CanvasLineCap>()\npublic inline val CanvasLineCap.Companion.SQUARE: CanvasLineCap get() = \"square\".asDynamic().unsafeCast<CanvasLineCap>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasLineJoin {\n    companion object\n}\npublic inline val CanvasLineJoin.Companion.ROUND: CanvasLineJoin get() = \"round\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.BEVEL: CanvasLineJoin get() = \"bevel\".asDynamic().unsafeCast<CanvasLineJoin>()\npublic inline val CanvasLineJoin.Companion.MITER: CanvasLineJoin get() = \"miter\".asDynamic().unsafeCast<CanvasLineJoin>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextAlign {\n    companion object\n}\npublic inline val CanvasTextAlign.Companion.START: CanvasTextAlign get() = \"start\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.END: CanvasTextAlign get() = \"end\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.LEFT: CanvasTextAlign get() = \"left\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.RIGHT: CanvasTextAlign get() = \"right\".asDynamic().unsafeCast<CanvasTextAlign>()\npublic inline val CanvasTextAlign.Companion.CENTER: CanvasTextAlign get() = \"center\".asDynamic().unsafeCast<CanvasTextAlign>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasTextBaseline {\n    companion object\n}\npublic inline val CanvasTextBaseline.Companion.TOP: CanvasTextBaseline get() = \"top\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.HANGING: CanvasTextBaseline get() = \"hanging\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.MIDDLE: CanvasTextBaseline get() = \"middle\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.ALPHABETIC: CanvasTextBaseline get() = \"alphabetic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.IDEOGRAPHIC: CanvasTextBaseline get() = \"ideographic\".asDynamic().unsafeCast<CanvasTextBaseline>()\npublic inline val CanvasTextBaseline.Companion.BOTTOM: CanvasTextBaseline get() = \"bottom\".asDynamic().unsafeCast<CanvasTextBaseline>()\n\n/* please, don't implement this interface! */\npublic external interface CanvasDirection {\n    companion object\n}\npublic inline val CanvasDirection.Companion.LTR: CanvasDirection get() = \"ltr\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.RTL: CanvasDirection get() = \"rtl\".asDynamic().unsafeCast<CanvasDirection>()\npublic inline val CanvasDirection.Companion.INHERIT: CanvasDirection get() = \"inherit\".asDynamic().unsafeCast<CanvasDirection>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollRestoration {\n    companion object\n}\npublic inline val ScrollRestoration.Companion.AUTO: ScrollRestoration get() = \"auto\".asDynamic().unsafeCast<ScrollRestoration>()\npublic inline val ScrollRestoration.Companion.MANUAL: ScrollRestoration get() = \"manual\".asDynamic().unsafeCast<ScrollRestoration>()\n\n/* please, don't implement this interface! */\npublic external interface ImageOrientation {\n    companion object\n}\npublic inline val ImageOrientation.Companion.NONE: ImageOrientation get() = \"none\".asDynamic().unsafeCast<ImageOrientation>()\npublic inline val ImageOrientation.Companion.FLIPY: ImageOrientation get() = \"flipY\".asDynamic().unsafeCast<ImageOrientation>()\n\n/* please, don't implement this interface! */\npublic external interface PremultiplyAlpha {\n    companion object\n}\npublic inline val PremultiplyAlpha.Companion.NONE: PremultiplyAlpha get() = \"none\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.PREMULTIPLY: PremultiplyAlpha get() = \"premultiply\".asDynamic().unsafeCast<PremultiplyAlpha>()\npublic inline val PremultiplyAlpha.Companion.DEFAULT: PremultiplyAlpha get() = \"default\".asDynamic().unsafeCast<PremultiplyAlpha>()\n\n/* please, don't implement this interface! */\npublic external interface ColorSpaceConversion {\n    companion object\n}\npublic inline val ColorSpaceConversion.Companion.NONE: ColorSpaceConversion get() = \"none\".asDynamic().unsafeCast<ColorSpaceConversion>()\npublic inline val ColorSpaceConversion.Companion.DEFAULT: ColorSpaceConversion get() = \"default\".asDynamic().unsafeCast<ColorSpaceConversion>()\n\n/* please, don't implement this interface! */\npublic external interface ResizeQuality {\n    companion object\n}\npublic inline val ResizeQuality.Companion.PIXELATED: ResizeQuality get() = \"pixelated\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.LOW: ResizeQuality get() = \"low\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.MEDIUM: ResizeQuality get() = \"medium\".asDynamic().unsafeCast<ResizeQuality>()\npublic inline val ResizeQuality.Companion.HIGH: ResizeQuality get() = \"high\".asDynamic().unsafeCast<ResizeQuality>()\n\n/* please, don't implement this interface! */\npublic external interface BinaryType {\n    companion object\n}\npublic inline val BinaryType.Companion.BLOB: BinaryType get() = \"blob\".asDynamic().unsafeCast<BinaryType>()\npublic inline val BinaryType.Companion.ARRAYBUFFER: BinaryType get() = \"arraybuffer\".asDynamic().unsafeCast<BinaryType>()\n\n/* please, don't implement this interface! */\npublic external interface WorkerType {\n    companion object\n}\npublic inline val WorkerType.Companion.CLASSIC: WorkerType get() = \"classic\".asDynamic().unsafeCast<WorkerType>()\npublic inline val WorkerType.Companion.MODULE: WorkerType get() = \"module\".asDynamic().unsafeCast<WorkerType>()\n\n/* please, don't implement this interface! */\npublic external interface ShadowRootMode {\n    companion object\n}\npublic inline val ShadowRootMode.Companion.OPEN: ShadowRootMode get() = \"open\".asDynamic().unsafeCast<ShadowRootMode>()\npublic inline val ShadowRootMode.Companion.CLOSED: ShadowRootMode get() = \"closed\".asDynamic().unsafeCast<ShadowRootMode>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollBehavior {\n    companion object\n}\npublic inline val ScrollBehavior.Companion.AUTO: ScrollBehavior get() = \"auto\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.INSTANT: ScrollBehavior get() = \"instant\".asDynamic().unsafeCast<ScrollBehavior>()\npublic inline val ScrollBehavior.Companion.SMOOTH: ScrollBehavior get() = \"smooth\".asDynamic().unsafeCast<ScrollBehavior>()\n\n/* please, don't implement this interface! */\npublic external interface ScrollLogicalPosition {\n    companion object\n}\npublic inline val ScrollLogicalPosition.Companion.START: ScrollLogicalPosition get() = \"start\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.CENTER: ScrollLogicalPosition get() = \"center\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.END: ScrollLogicalPosition get() = \"end\".asDynamic().unsafeCast<ScrollLogicalPosition>()\npublic inline val ScrollLogicalPosition.Companion.NEAREST: ScrollLogicalPosition get() = \"nearest\".asDynamic().unsafeCast<ScrollLogicalPosition>()\n\n/* please, don't implement this interface! */\npublic external interface CSSBoxType {\n    companion object\n}\npublic inline val CSSBoxType.Companion.MARGIN: CSSBoxType get() = \"margin\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.BORDER: CSSBoxType get() = \"border\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.PADDING: CSSBoxType get() = \"padding\".asDynamic().unsafeCast<CSSBoxType>()\npublic inline val CSSBoxType.Companion.CONTENT: CSSBoxType get() = \"content\".asDynamic().unsafeCast<CSSBoxType>()\n\n","package de.ascii\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kobserve.minus\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.inputView\nimport de.westermann.kwebview.components.textView\n\nclass EnvelopeEntry(\n        label: String,\n        val value: Double,\n        val property: Property<Int>,\n        previousProperty: Property<Int>\n) : ViewCollection<View>() {\n\n    private val difference = previousProperty - property\n\n    init {\n        textView(label)\n\n        textView(\"\u2715\")\n\n        inputView {\n            readonly = true\n            preventTabStop()\n\n            bind(difference.mapBinding { it.toString() })\n\n        }\n\n\n        /*\n        inputView {\n            readonly = true\n            preventTabStop()\n\n            bind(difference.mapBinding {\n                (it * this@EnvelopeEntry.value).format(2) + \" \u20ac\"\n            })\n        }*/\n    }\n}","package de.ascii\n\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.*\nimport de.westermann.kwebview.components.*\nimport de.westermann.kwebview.extra.listFactory\nimport kotlin.js.Date\n\nclass History() : ViewCollection<View>() {\n    init {\n        table {\n            row {\n                head { textView(t(\"date\")) }\n                head { textView(t(\"total\")) }\n                head { textView(t(\"action\")) }\n            }\n            tbody {\n                listFactory(Snapshot.sorted, { snapshot ->\n                    TableRow().apply {\n                        cell {\n                            textView(Snapshot.nowProperty.mapBinding {\n                                Snapshot.formatTimeDiff((it - snapshot.date) / 1000)\n                            })\n\n                            property(this::title).bind(Snapshot.nowProperty.mapBinding {\n                                Date(snapshot.date).toLocaleString(i18n.locale.id)\n                            })\n                            onClick {\n                                snapshot.load()\n                            }\n                        }\n                        cell {\n                            textView(snapshot.cash.totalProperty.mapBinding { \"${it.format(2)} \u20ac\" })\n                            onClick {\n                                snapshot.load()\n                            }\n                        }\n                        cell {\n                            iconView(MaterialIcon.DELETE) {\n                                property(this::title).bind(t(\"delete\"))\n                                onClick {\n                                    snapshot.delete()\n                                }\n                            }\n                        }\n                    }\n                }, animateRemove = 400)\n            }\n        }\n    }\n}\n","package de.ascii\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.event.emit\nimport de.westermann.kobserve.property.FunctionAccessor\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.Document\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.InputView\nimport de.westermann.kwebview.modifierKey\nimport org.w3c.dom.HTMLInputElement\nimport org.w3c.dom.events.KeyboardEvent\nimport kotlin.math.absoluteValue\nimport kotlin.math.roundToInt\nimport kotlin.math.sign\nimport kotlin.math.sqrt\n\nabstract class MoneyGroup(\n        val property: Property<Int>,\n        val editable: ReadOnlyProperty<Boolean>,\n        val maximum: Int\n) : ViewCollection<View>() {\n\n    protected val stringProperty = property(object : FunctionAccessor<String> {\n        override fun set(value: String): Boolean {\n            if (editable.value) {\n                val number = value.toIntOrNull() ?: 0\n                property.value = kotlin.math.max(number, 0)\n                if (number < 0) {\n                    property.onChange.emit(Unit)\n                }\n            }\n            return true\n        }\n\n        override fun get(): String {\n            return property.value.toString()\n        }\n    }, property)\n\n    private var wheelCounter: Int = 0\n    private var wheelUpwards: Boolean? = null\n    private var isHovered = false\n\n    abstract val input: InputView\n\n    protected fun onKeyDown(event: KeyboardEvent) {\n        val input = (event.target as? HTMLInputElement)?.let {\n            if (it == input.html) input else null\n        }\n        if (editable.value && isHovered && input == null || input == this.input) {\n            event.stopPropagation()\n            when (event.keyCode) {\n                33, 38, 75 -> {\n                    if (event.keyCode == 33 || event.modifierKey) {\n                        property.value = ((property.value / 5) + 1) * 5\n                    } else {\n                        property.value += 1\n                    }\n                    event.preventDefault()\n                    return\n                }\n                34, 40, 74 -> {\n                    if (property.value > 0) {\n                        if (event.keyCode == 34 || event.modifierKey) {\n                            if (property.value % 5 == 0) {\n                                property.value = ((property.value / 5) - 1) * 5\n                            } else {\n                                property.value = ((property.value / 5)) * 5\n                            }\n                        } else {\n                            property.value -= 1\n                        }\n                    }\n                    event.preventDefault()\n                    return\n                }\n            }\n\n            if (input == null) return\n\n            when (event.keyCode) {\n                in 48..57 -> {\n                    if (input.value.length >= 3) {\n                        input.value = input.value.drop(1)\n                    }\n                }\n                8, 9, 46, in 112..123 -> {\n                    // Pass through this keys\n                }\n                72 -> {\n                    event.preventDefault()\n                    previousView(this)\n                }\n                37 -> {\n                    if (input.selectionStart == 0 && input.selectionStart == input.selectionEnd || event.modifierKey) {\n                        previousView(this)\n                    } else {\n                        val start = input.selectionStart\n                        if (start == null || start == 0) {\n                            input.selectRange(0)\n                        } else {\n                            input.selectRange(start -1)\n                        }\n                    }\n                }\n                76 -> {\n                    event.preventDefault()\n                    nextView(this)\n                }\n                39 -> {\n                    if (input.selectionStart == input.value.length && input.selectionStart == input.selectionEnd || event.modifierKey) {\n                        nextView(this)\n                    } else {\n                        val start = input.selectionStart\n                        if (start == null || start == input.value.length) {\n                            input.selectRange(input.value.length)\n                        } else {\n                            input.selectRange(start + 1)\n                        }\n                    }\n                }\n                13 -> {\n                    emit(CalculateEvent)\n                }\n                else -> {\n                    //println(\"prevent ${event.keyCode}\")\n                    event.preventDefault()\n                }\n            }\n        }\n    }\n\n    init {\n        onMouseEnter {\n            isHovered = true\n        }\n        onMouseLeave {\n            isHovered = false\n        }\n\n        onWheel {\n            if (editable.value) {\n                if (it.deltaY > 0 && wheelUpwards != false) {\n                    wheelUpwards = false\n                    wheelCounter = 0\n                } else if (it.deltaY < 0 && wheelUpwards != true) {\n                    wheelUpwards = true\n                    wheelCounter = 0\n                }\n\n                wheelCounter += sqrt(it.deltaY.absoluteValue).roundToInt()\n                val toAdd = -it.deltaY.sign.toInt() * (wheelCounter / WHEEL_THRESHOLD)\n                wheelCounter %= WHEEL_THRESHOLD\n                property.value = kotlin.math.min(kotlin.math.max(0, property.value + toAdd), maximum)\n            }\n\n            it.preventDefault()\n            it.stopPropagation()\n        }\n        Document.onKeyDown(this::onKeyDown)\n\n        MoneyGroup.groups.add(this)\n    }\n\n    companion object {\n        private val groups = mutableListOf<MoneyGroup>()\n\n        private fun nextView(current: MoneyGroup) {\n            val index = groups.indexOf(current)\n            if (index < 0) return\n\n            groups[(index + 1) % groups.size].input.focus()\n        }\n\n        private fun previousView(current: MoneyGroup) {\n            val index = groups.indexOf(current)\n            if (index < 0) return\n\n            groups[(groups.size + index - 1) % groups.size].input.focus()\n        }\n\n        const val WHEEL_THRESHOLD: Int = 4\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function. The [init] function returns a list element given its index.\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which [comparison] function returns zero using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the provided [comparison],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that compares an element of the list with the element being searched.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","package de.ascii\n\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.boxView\nimport de.westermann.kwebview.components.selectView\nimport de.westermann.kwebview.components.textView\nimport de.westermann.kwebview.i18n\nimport de.westermann.kwebview.t\n\nclass Settings() : ViewCollection<View>() {\n    init {\n        boxView {\n            textView(t(\"language\"))\n            selectView(i18n.availableLocales, i18n.localeProperty, transform = { locale: i18n.Locale ->\n                \"${locale.name} (${locale.id})\"\n            })\n        }\n    }\n}\n","package de.ascii\n\nimport de.westermann.kobserve.event.EventHandler\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kobserve.property.property\nimport de.westermann.kobserve.list.ObservableList\nimport de.westermann.kobserve.list.observableListOf\nimport de.westermann.kobserve.list.sortObservable\nimport de.westermann.kwebview.interval\nimport de.westermann.kwebview.t\nimport org.w3c.dom.get\nimport org.w3c.dom.set\nimport kotlin.browser.window\nimport kotlin.js.Date\n\nclass Snapshot private constructor(\n        val id: Int,\n        var date: Long,\n        val cash: CashEntry\n) {\n\n    private val key = \"$PREFIX-$id\"\n\n    fun save() {\n        if (cash.totalProperty.value <= 0.0) {\n            delete()\n        } else {\n            date = Date.now().toLong()\n            val value = listOf(\n                    date,\n                    cash.note100Property.value,\n                    cash.note50Property.value,\n                    cash.note20Property.value,\n                    cash.note10Property.value,\n                    cash.note5Property.value,\n                    cash.coin200Property.value,\n                    cash.coin100Property.value,\n                    cash.coin50Property.value,\n                    cash.coin20Property.value,\n                    cash.coin10Property.value,\n                    cash.coin5Property.value,\n                    cash.coin2Property.value,\n                    cash.coin1Property.value\n            ).joinToString(SEPARATOR)\n            window.localStorage[key] = value\n        }\n    }\n\n    fun load() {\n        allowAdd = false\n        currentSnapshot = this\n        onLoad.emit(this)\n    }\n\n    fun delete() {\n        window.localStorage.removeItem(key)\n        list -= this\n    }\n\n    companion object {\n        private const val PREFIX = \"ascii-snapshot\"\n        private const val SEPARATOR = \"|\"\n        private const val THRESHOLD = 1000 * 60 * 5 // 5 minutes\n        private var allowAdd = false\n\n        val onLoad = EventHandler<Snapshot>()\n\n        fun save(cash: CashEntry) {\n            if (cash.totalProperty.value <= 0.0) {\n                allowAdd = false\n                return\n            }\n\n            val last = newestSnapshot.value\n            val now = Date.now().toLong()\n            if (allowAdd && last != null && last.date + THRESHOLD > now) {\n                last.cash.load(cash)\n                last.save()\n            } else {\n                val id = (list.maxBy { it.id }?.id ?: -1) + 1\n                val snap = Snapshot(id, now, cash)\n                snap.save()\n                list += snap\n                allowAdd = true\n            }\n        }\n\n        val list: ObservableList<Snapshot> = observableListOf()\n        val sorted = list.sortObservable(Comparator { a, b -> b.date.compareTo(a.date) })\n\n        val newestSnapshot = sorted.mapBinding { it.firstOrNull() }\n        val currentSnapshotProperty = property(newestSnapshot.value)\n        var currentSnapshot by currentSnapshotProperty\n\n        private fun parse(key: String, value: String) {\n            try {\n                val id = key.removePrefix(\"$PREFIX-\").toInt()\n                val split = value.split(SEPARATOR)\n                val date = split[0].toLong()\n                val data = split.drop(1).map { it.toInt() }\n                val cash = CashEntry(\n                        data[0],\n                        data[1],\n                        data[2],\n                        data[3],\n                        data[4],\n                        data[5],\n                        data[6],\n                        data[7],\n                        data[8],\n                        data[9],\n                        data[10],\n                        data[11],\n                        data[12]\n                )\n\n                list += Snapshot(\n                        id,\n                        date,\n                        cash\n                )\n            } catch (e: Error) {\n            }\n        }\n\n        fun formatTimeDiff(seconds: Long): String {\n            var diff = seconds\n            if (diff < 60) {\n                return t(diff, \"second\", diff).value\n            }\n            diff /= 60\n            if (diff < 60) {\n                return t(diff, \"minute\", diff).value\n            }\n            diff /= 60\n            if (diff < 24) {\n                return t(diff, \"hour\", diff).value\n            }\n            diff /= 24\n            if (diff < 30) {\n                return t(diff, \"day\", diff).value\n            }\n            diff /= 30\n            if (diff < 12) {\n                return t(diff, \"month\", diff).value\n            }\n            diff /= 12\n            return t(diff, \"year\", diff).value\n        }\n\n        init {\n            val length = window.localStorage.length\n            for (i in 0 until length) {\n                val key = window.localStorage.key(i) ?: continue\n                if (key.startsWith(PREFIX)) {\n                    val value = window.localStorage[key] ?: continue\n                    parse(key, value)\n                }\n            }\n\n            newestSnapshot.onChange {\n                currentSnapshot = newestSnapshot.value\n            }\n            currentSnapshot = newestSnapshot.value\n\n            interval(1000) {\n                nowProperty.value = Date.now().toLong()\n            }\n        }\n\n        val nowProperty = property(Date.now().toLong())\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.toHashSet())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.toHashSet())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.toHashSet()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n/**\n * Randomly shuffles elements in this mutable list using the specified [random] instance as the source of randomness.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n","package de.ascii.coin\n\nimport de.westermann.kwebview.View\n\nclass Coin(\n        val index: Int\n) : View() {\n    var position: Int = 0\n}","package de.ascii.coin\n\nimport de.ascii.Cash\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.boxView\n\nclass CoinBox(\n        val cash: Cash,\n        editable: ReadOnlyProperty<Boolean>\n) : ViewCollection<View>() {\n    init {\n        boxView {\n            +CoinGroup(\"2 EURO\", 12, 200, cash.coin200Property, cash.previousCoin200Property, editable)\n        }\n\n        boxView {\n            +CoinGroup(\"1 EURO\", 11, 100, cash.coin100Property, cash.previousCoin100Property, editable)\n        }\n\n        boxView {\n            +CoinGroup(\"50 CENT\", 11, 50, cash.coin50Property, cash.previousCoin50Property, editable)\n        }\n\n        boxView {\n            +CoinGroup(\"20 CENT\", 12, 20, cash.coin20Property, cash.previousCoin20Property, editable)\n        }\n\n        boxView {\n            +CoinGroup(\"10 CENT\", 13, 10, cash.coin10Property, cash.previousCoin10Property, editable)\n        }\n\n        boxView {\n            +CoinGroup(\"5 CENT\", 15, 5, cash.coin5Property, cash.previousCoin5Property, editable)\n        }\n\n        boxView {\n            +CoinGroup(\"2 CENT\", 6, 2, cash.coin2Property, cash.previousCoin2Property, editable)\n            +CoinGroup(\"1 CENT\", 7, 1, cash.coin1Property, cash.previousCoin1Property, editable)\n        }\n    }\n}\n","package de.ascii.coin\n\nimport de.ascii.MoneyGroup\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.event.EventListener\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kwebview.*\nimport de.westermann.kwebview.components.*\nimport org.w3c.dom.events.MouseEvent\n\nclass CoinGroup(\n        name: String,\n        stackCount: Int,\n        private val value: Int,\n        property: Property<Int>,\n        private val previousProperty: Property<Int>,\n        editable: ReadOnlyProperty<Boolean>\n) : MoneyGroup(property, editable, stackCount * 5) {\n\n\n    override lateinit var input: InputView\n\n    private fun updateCoin(coin: Coin) {\n        coin.classList[\"active\"] = coin.position < property.value\n        coin.classList[\"overflow\"] = coin.position + maximum < property.value\n        coin.classList[\"dead\"] = 2 * maximum < property.value\n\n        coin.classList[\"previous\"] = coin.position < previousProperty.value\n    }\n\n    init {\n        textView(name) {\n            onMouseDown {\n                it.stopPropagation()\n            }\n        }\n\n        val coins = mutableMapOf<Int, Coin>()\n        val type = \"coin$value\"\n\n        property.onChange {\n            for (c in coins.values) {\n                updateCoin(c)\n            }\n        }\n        previousProperty.onChange {\n            for (c in coins.values) {\n                updateCoin(c)\n            }\n        }\n\n        val stack = CoinStackGroup(stackCount, type, value / 100.0)\n        +stack\n\n        for (s in stack) {\n            for (c in s) {\n                val position = c.position\n                coins[position] = c\n                updateCoin(c)\n            }\n        }\n\n        val references = mutableListOf<EventListener<*>>()\n\n        fun updatemove(pageY: Double) {\n            val c0 = coins[0] ?: return\n            if (c0.offsetTopTotal + c0.clientHeight < pageY) {\n                property.value = 0\n                return\n            }\n\n            var max = c0\n            for ((_, coin) in coins.entries.sortedBy { it.key }) {\n                val top = coin.offsetTopTotal\n\n                if (top < pageY) {\n                    property.value = coin.position + 1\n                    return\n                }\n\n                max = coin\n            }\n\n            property.value = max.position + 1\n        }\n\n        val mousemove = lambda@{ event: MouseEvent ->\n            if (event.type == \"mouseup\" || event.buttons == 0.toShort()) {\n                references.forEach { it.detach() }\n                references.clear()\n            }\n\n            updatemove(event.pageY)\n        }\n\n        val touchmove = lambda@{ event: TouchEvent ->\n            val touches = event.touches.all()\n            if (event.type == \"touchend\" || event.type == \"touchcancel\" || touches.size != 1) {\n                references.forEach { it.detach() }\n                references.clear()\n            } else {\n                event.preventDefault()\n                // event.stopPropagation()\n            }\n\n            if (touches.size == 1) {\n                updatemove(touches[0].pageY)\n            }\n        }\n\n        onMouseDown {\n            if (editable.value) {\n                mousemove(it)\n\n                references += Body.onMouseMove.reference(mousemove)\n                references += Body.onMouseUp.reference(mousemove)\n            }\n        }\n        onTouchStart {\n            if (editable.value) {\n                touchmove(it)\n\n                references += Body.onTouchMove.reference(touchmove)\n                references += Body.onTouchEnd.reference(touchmove)\n                references += Body.onTouchCancel.reference(touchmove)\n            }\n        }\n\n        boxView {\n            onMouseDown {\n                it.stopPropagation()\n            }\n\n            classList += \"coin-input\"\n\n            input = inputView {\n                maxLength = 3\n\n                bind(stringProperty)\n\n                editable.onChange {\n                    readonly = !editable.value\n                }\n                readonly = !editable.value\n\n                var focused = false\n\n                onFocus {\n                    if (!focused) {\n                        focused = true\n                        async {\n                            selectRange(0, value.length)\n                        }\n                    }\n                }\n                onBlur {\n                    focused = false\n                }\n\n                onKeyDown(this@CoinGroup::onKeyDown)\n            }\n            inputView {\n                readonly = true\n                preventTabStop()\n\n                bind(property.mapBinding {\n                    (it * (this@CoinGroup.value / 100.0)).format(2) + \" \u20ac\"\n                })\n            }\n        }\n    }\n}\n","package de.ascii.coin\n\nimport de.westermann.kwebview.ViewCollection\n\nclass CoinStack(type: String) : ViewCollection<Coin>() {\n    init {\n        for (i in (5 - 1) downTo 0) {\n            val coin = Coin(i)\n            coin.classList += type\n            +coin\n        }\n    }\n}","package de.ascii.coin\n\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.format\nimport kotlin.math.abs\nimport kotlin.math.floor\nimport kotlin.math.round\n\nclass CoinStackGroup(stackCount: Int, type: String, value: Double) : ViewCollection<CoinStack>() {\n\n    private val superMap = mapOf(\n            '0' to '\u2070',\n            '1' to '\u00b9',\n            '2' to '\u00b2',\n            '3' to '\u00b3',\n            '4' to '\u2074',\n            '5' to '\u2075',\n            '6' to '\u2076',\n            '7' to '\u2077',\n            '8' to '\u2078',\n            '9' to '\u2079'\n    )\n\n    private fun transformMoney(value: String): String {\n        val split = value.split(\".\")\n        return split.first() + split.last().map {\n            superMap[it]\n        }.joinToString(\"\")\n    }\n\n    init {\n        for (i in (stackCount - 1) downTo 0) {\n            val stack = CoinStack(type)\n\n\n            for (c in stack) {\n                c.position = i * 5 + c.index\n            }\n\n            val money = value * (i + 1) * 5\n            if (abs(money - floor(money)) < 0.001) {\n                stack.dataset[\"value\"] = floor(money).toString()\n            } else {\n                stack.dataset[\"value\"] = transformMoney((round(money * 100) / 100).format(2))\n            }\n\n            +stack\n        }\n    }\n}","package de.ascii\n\nimport de.westermann.kwebview.components.Body\nimport de.westermann.kwebview.i18n\nimport org.w3c.dom.get\nimport org.w3c.dom.set\nimport kotlin.browser.window\n\n@Suppress(\"UNUSED\")\nfun main(args: Array<String>) {\n    i18n.register(\"en\", \"English\", \"languages/en.json\", true)\n    i18n.register(\"de\", \"Deutsch\", \"languages/de.json\")\n\n    window.onload = {\n        i18n.load(window.localStorage[\"language\"] ?: \"en\") {\n            Body += CashBox()\n\n            i18n.localeProperty.onChange {\n                window.localStorage[\"language\"] = i18n.locale.id\n            }\n        }\n    }\n}\n","package de.ascii.note\n\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.imageView\nimport kotlin.math.pow\n\nclass Note(\n        val value: Int,\n        position: Int\n) : ViewCollection<View>() {\n    init {\n        imageView(\"images/note$value.png\") {\n            style {\n                val angle = (2.0 * MAX_ANGLE + 1) * 1.2.pow(-position)\n                transform = \"rotate(${-angle + MAX_ANGLE}deg)\"\n                boxShadow = \"0 1px 4px rgba(0, 0, 0, ${angle / (2 * MAX_ANGLE + 1)})\"\n            }\n\n            onMouseDown {\n                it.preventDefault()\n            }\n        }\n    }\n\n    companion object {\n        const val MAX_ANGLE = 20\n    }\n}","package de.ascii.note\n\nimport de.ascii.Cash\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.components.boxView\n\nclass NoteBox(\n        private val cash: Cash,\n        editable: ReadOnlyProperty<Boolean>\n) : ViewCollection<View>() {\n    init {\n        boxView {\n            +NoteGroup(100, cash.note100Property, editable)\n        }\n        boxView {\n            +NoteGroup(50, cash.note50Property, editable)\n        }\n        boxView {\n            +NoteGroup(20, cash.note20Property, editable)\n        }\n        boxView {\n            +NoteGroup(10, cash.note10Property, editable)\n        }\n        boxView {\n            +NoteGroup(5, cash.note5Property, editable)\n        }\n    }\n}\n","package de.ascii.note\n\nimport de.ascii.MoneyGroup\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kwebview.async\nimport de.westermann.kwebview.components.InputView\nimport de.westermann.kwebview.components.boxView\nimport de.westermann.kwebview.components.inputView\nimport de.westermann.kwebview.components.textView\nimport de.westermann.kwebview.format\n\nclass NoteGroup(\n        val value: Int,\n        property: Property<Int>,\n        editable: ReadOnlyProperty<Boolean>\n) : MoneyGroup(property, editable, Note.MAX_ANGLE * 2) {\n\n    override lateinit var input: InputView\n\n    init {\n        textView(\"$value EURO\") {\n            onMouseDown {\n                it.stopPropagation()\n            }\n        }\n\n        +NoteStack(value, property)\n\n        boxView {\n            classList += \"note-button\"\n            textView(\"+\") {\n                onClick {\n                    it.preventDefault()\n                    if (editable.value) {\n                        property.value += 1\n                    }\n                }\n            }\n            textView(\"-\") {\n                onClick {\n                    it.preventDefault()\n                    if (editable.value && property.value > 0) {\n                        property.value -= 1\n                    }\n                }\n            }\n\n            style {\n                editable.onChange {\n                    display = if (editable.value) \"block\" else \"none\"\n                }\n                display = if (editable.value) \"block\" else \"none\"\n            }\n        }\n\n        boxView {\n            classList += \"note-input\"\n            input = inputView {\n                maxLength = 3\n\n                bind(stringProperty)\n\n                editable.onChange {\n                    readonly = !editable.value\n                }\n                readonly = !editable.value\n\n                var focused = false\n\n                onFocus {\n                    if (!focused) {\n                        focused = true\n                        async {\n                            selectRange(0, value.length)\n                        }\n                    }\n                }\n                onBlur {\n                    focused = false\n                }\n\n                onKeyDown(this@NoteGroup::onKeyDown)\n            }\n            inputView {\n                readonly = true\n                preventTabStop()\n\n                bind(property.mapBinding {\n                    (it * this@NoteGroup.value.toDouble()).format(2) + \" \u20ac\"\n                })\n            }\n        }\n    }\n}","package de.ascii.note\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kwebview.ViewCollection\n\nclass NoteStack(\n        val value: Int,\n        val property: Property<Int>\n) : ViewCollection<Note>() {\n\n    private fun update() {\n        val count = property.value\n\n        while (size - 1 > count) {\n            remove(last())\n        }\n\n        while (size - 1 < count) {\n            append(Note(value, size - 1))\n        }\n    }\n\n    init {\n        +Note(value, 0)\n        property.onChange { update() }\n        update()\n    }\n}","package de.westermann.kwebview\n\nimport kotlin.reflect.KProperty\n\n/**\n * Delegate to easily access html attributes.\n *\n * @author lars\n */\nclass AttributeDelegate(\n        private val paramName: String? = null\n) {\n\n    private fun getParamName(property: KProperty<*>): String = paramName ?: property.name.toLowerCase()\n\n    operator fun getValue(container: View, property: KProperty<*>) = container.html.getAttribute(getParamName(property))\n\n    operator fun setValue(container: View, property: KProperty<*>, value: String?) {\n        if (value == null) {\n            container.html.removeAttribute(getParamName(property))\n        } else {\n            container.html.setAttribute(getParamName(property), value.toString())\n        }\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","package de.westermann.kwebview\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.property.property\nimport kotlin.reflect.KProperty\n\n/**\n * Delegate to easily set css classes as boolean attributes.\n *\n * @author lars\n */\nclass ClassDelegate(\n        className: String? = null\n) {\n\n    private lateinit var container: View\n    private lateinit var paramName: String\n    private lateinit var classProperty: Property<Boolean>\n\n    operator fun getValue(container: View, property: KProperty<*>): Property<Boolean> {\n        if (!this::container.isInitialized) {\n            this.container = container\n        }\n\n        if (!this::paramName.isInitialized) {\n            var name = property.name.toDashCase()\n            if (name.endsWith(\"-property\")) {\n                name = name.replace(\"-property\", \"\")\n            }\n            paramName = name\n        }\n\n        if (!this::classProperty.isInitialized) {\n            classProperty = property(container.html.classList.contains(paramName))\n\n            classProperty.onChange {\n                container.html.classList.toggle(paramName, classProperty.value)\n            }\n        }\n\n        return classProperty\n    }\n\n    init {\n        if (className != null) {\n            this.paramName = className\n        }\n    }\n}","package de.westermann.kwebview\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.event.EventListener\nimport org.w3c.dom.DOMTokenList\n\n/**\n * Represents the css classes of an html element.\n *\n * @author lars\n */\nclass ClassList(\n        private val list: DOMTokenList\n) : Iterable<String> {\n\n    private val bound: MutableMap<String, Bound> = mutableMapOf()\n\n\n    /**\n     * Add css class.\n     */\n    fun add(clazz: String) {\n        if (clazz in bound) {\n            val p = bound[clazz] ?: return\n            if (p.property is Property<Boolean>) {\n                p.property.value = true\n            } else {\n                throw IllegalStateException(\"The given class is bound and cannot be modified manually!\")\n            }\n        } else {\n            list.add(clazz)\n        }\n    }\n\n    /**\n     * Add css class.\n     */\n    operator fun plusAssign(clazz: String) = add(clazz)\n\n    /**\n     * Add css class.\n     */\n    fun remove(clazz: String) {\n        if (clazz in bound) {\n            val p = bound[clazz] ?: return\n            if (p.property is Property<Boolean>) {\n                p.property.value = false\n            } else {\n                throw IllegalStateException(\"The given class is bound and cannot be modified manually!\")\n            }\n        } else {\n            list.remove(clazz)\n        }\n    }\n\n    /**\n     * Remove css class.\n     */\n    operator fun minusAssign(clazz: String) = remove(clazz)\n\n    /**\n     * Check if css class exits.\n     */\n    operator fun get(clazz: String): Boolean = list.contains(clazz)\n\n    /**\n     * Check if css class exits.\n     */\n    operator fun contains(clazz: String): Boolean = list.contains(clazz)\n\n    /**\n     * Set css class present.\n     */\n    operator fun set(clazz: String, present: Boolean) =\n            if (present) {\n                add(clazz)\n            } else {\n                remove(clazz)\n            }\n\n    /**\n     * Toggle css class.\n     */\n    fun toggle(clazz: String, force: Boolean? = null) = set(clazz, force ?: !contains(clazz))\n\n    fun bind(clazz: String, property: ReadOnlyProperty<Boolean>) {\n        if (clazz in bound) {\n            throw IllegalArgumentException(\"Class is already bound!\")\n        }\n\n        set(clazz, property.value)\n        bound[clazz] = Bound(property,\n                property.onChange.reference {\n                    list.toggle(clazz, property.value)\n                }\n        )\n    }\n\n    fun unbind(clazz: String) {\n        if (clazz !in bound) {\n            throw IllegalArgumentException(\"Class is not bound!\")\n        }\n\n        bound[clazz]?.reference?.detach()\n        bound -= clazz\n    }\n\n    override fun iterator(): Iterator<String> {\n        return toString().split(\" +\".toRegex()).iterator()\n    }\n\n    override fun toString(): String = list.value\n\n    private data class Bound(\n            val property: ReadOnlyProperty<Boolean>,\n            val reference: EventListener<Unit>\n    )\n}","package de.westermann.kwebview\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.event.EventListener\nimport org.w3c.dom.DOMStringMap\nimport org.w3c.dom.get\nimport org.w3c.dom.set\n\n/**\n * Represents the css classes of an html element.\n *\n * @author lars\n */\nclass DataSet(\n        private val map: DOMStringMap\n) {\n\n    private val bound: MutableMap<String, Bound> = mutableMapOf()\n\n    /**\n     * Add css class.\n     */\n    operator fun plusAssign(entry: Pair<String, String>) {\n        if (entry.first in bound) {\n            bound[entry.first]?.set(entry.second)\n        } else {\n            map[entry.first] = entry.second\n        }\n    }\n\n    /**\n     * Remove css class.\n     */\n    operator fun minusAssign(key: String) {\n        if (key in bound) {\n            bound[key]?.set(null)\n        } else {\n            delete(map, key)\n        }\n    }\n\n    /**\n     * Check if css class exits.\n     */\n    operator fun get(key: String): String? = map[key]\n\n    /**\n     * Set css class present.\n     */\n    operator fun set(key: String, value: String?) =\n            if (value == null) {\n                this -= key\n            } else {\n                this += key to value\n            }\n\n    fun bind(key: String, property: ReadOnlyProperty<String>) {\n        if (key in bound) {\n            throw IllegalArgumentException(\"Class is already bound!\")\n        }\n\n        bound[key] = Bound(key, null, property)\n    }\n\n    fun bind(key: String, property: ReadOnlyProperty<String?>) {\n        if (key in bound) {\n            throw IllegalArgumentException(\"Class is already bound!\")\n        }\n\n        bound[key] = Bound(key, property, null)\n    }\n\n    fun unbind(key: String) {\n        if (key !in bound) {\n            throw IllegalArgumentException(\"Class is not bound!\")\n        }\n\n        bound[key]?.reference?.detach()\n        bound -= key\n    }\n\n    private inner class Bound(\n            val key: String,\n            val propertyNullable: ReadOnlyProperty<String?>?,\n            val property: ReadOnlyProperty<String>?\n    ) {\n\n        lateinit var reference: EventListener<Unit>\n\n        fun set(value: String?) {\n            if (propertyNullable != null && propertyNullable is Property) {\n                propertyNullable.value = value\n            } else if (property != null && property is Property && value != null) {\n                property.value = value\n            } else {\n                throw IllegalStateException(\"The given class is bound and cannot be modified manually!\")\n            }\n        }\n\n        init {\n            if (propertyNullable != null) {\n                reference = propertyNullable.onChange.reference {\n                    val value = propertyNullable.value\n                    if (value == null) {\n                        delete(map, key)\n                    } else {\n                        map[key] = value\n                    }\n                }\n\n                val value = propertyNullable.value\n                if (value == null) {\n                    delete(map, key)\n                } else {\n                    map[key] = value\n                }\n            } else if (property != null) {\n                reference = property.onChange.reference {\n                    map[key] = property.value\n                }\n\n                map[key] = property.value\n            }\n\n        }\n    }\n}","package de.westermann.kwebview\n\nimport kotlin.math.abs\nimport kotlin.math.min\n\n/**\n * @author lars\n */\ndata class Dimension(\n        val left: Double,\n        val top: Double,\n        val width: Double = 0.0,\n        val height: Double = 0.0\n) {\n\n    constructor(position: Point, size: Point = Point.ZERO) : this(position.x, position.y, size.x, size.y)\n\n    val position: Point\n        get() = Point(left, top)\n\n    val size: Point\n        get() = Point(width, height)\n\n    val right: Double\n        get() = left + width\n\n    val bottom: Double\n        get() = top + height\n\n    val edges: Set<Point>\n        get() = setOf(\n                Point(left, top),\n                Point(right, top),\n                Point(left, bottom),\n                Point(right, bottom)\n        )\n\n    val normalized: Dimension\n        get() {\n            val l = min(left, right)\n            val t = min(top, bottom)\n            return Dimension(l, t, abs(width), abs(width))\n        }\n\n    operator fun contains(other: Dimension): Boolean = !(other.left > right ||\n            other.right < left ||\n            other.top > bottom ||\n            other.bottom < top)\n\n\n    operator fun contains(other: Point): Boolean {\n        val n = normalized\n        return (n.left <= other.x && (n.left + width) >= other.x)\n                && (n.top <= other.y && (n.top + height) >= other.y)\n    }\n\n    operator fun plus(point: Point) = copy(left + point.x, top + point.y)\n\n    companion object {\n        val ZERO = Dimension(0.0, 0.0)\n    }\n}","package de.westermann.kwebview\n\nimport de.westermann.kobserve.event.EventHandler\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport org.w3c.dom.DOMRect\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.events.*\nimport kotlin.browser.document\nimport kotlin.browser.window\n\ninline fun <reified V : HTMLElement> createHtmlView(tag: String? = null): V {\n    var tagName: String\n    if (tag != null) {\n        tagName = tag\n    } else {\n        tagName = V::class.js.name.toLowerCase().replace(\"html([a-z]*)element\".toRegex(), \"$1\")\n        if (tagName.isBlank()) {\n            tagName = \"div\"\n        }\n    }\n    return document.createElement(tagName) as V\n}\n\nfun String.toDashCase() = replace(\"([a-z])([A-Z])\".toRegex(), \"$1-$2\").toLowerCase()\n\ninline fun <reified T> EventHandler<T>.bind(element: EventTarget, event: String) {\n    val listener = object : EventListener {\n        override fun handleEvent(event: Event) {\n            this@bind.emit(event as T)\n        }\n    }\n    var isAttached = false\n\n    val updateState = {\n        if (isEmpty() && isAttached) {\n            element.removeEventListener(event, listener)\n            isAttached = false\n        } else if (!isEmpty() && !isAttached) {\n            element.addEventListener(event, listener)\n            isAttached = true\n        }\n    }\n\n    onAttach = updateState\n    onDetach = updateState\n    updateState()\n}\n\nfun MouseEvent.toPoint(): Point = Point(clientX, clientY)\nfun DOMRect.toDimension(): Dimension = Dimension(x, y, width, height)\n\nfun Number.format(digits: Int): String = this.asDynamic().toFixed(digits)\n\nexternal fun delete(p: dynamic): Boolean = definedExternally\n\nfun delete(thing: dynamic, key: String) {\n    delete(thing[key])\n}\n\n/**\n * Apply current dom changes and recalculate all sizes. Executes the given block afterwards.\n *\n * @param timeout Optionally set a timeout for this call. Defaults to 1.\n * @param block Callback\n */\nfun async(timeout: Int = 1, block: () -> Unit) {\n    if (timeout < 1) throw IllegalArgumentException(\"Timeout must be greater than 0!\")\n    window.setTimeout(block, timeout)\n}\n\nfun interval(timeout: Int, block: () -> Unit): Int {\n    if (timeout < 1) throw IllegalArgumentException(\"Timeout must be greater than 0!\")\n    return window.setInterval(block, timeout)\n}\n\nfun clearInterval(id: Int) {\n    window.clearInterval(id)\n}\n\nfun <V : View> ViewCollection<V>.bindView(vararg properties: ReadOnlyProperty<*>, block: () -> V): ReadOnlyProperty<V> {\n    val viewProperty = property(block())\n    var view by viewProperty\n    +view\n\n    fun change() {\n        val new = block()\n        if (new != view) {\n            replace(view, new)\n            view = new\n        }\n    }\n    for (p in properties) {\n        p.onChange { change() }\n    }\n\n    return viewProperty\n}\n\nval KeyboardEvent.modifierKey: Boolean\n    get() = altKey || ctrlKey || shiftKey","package de.westermann.kwebview\n\nimport de.westermann.kobserve.event.EventHandler\nimport org.w3c.dom.events.FocusEvent\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.events.WheelEvent\nimport kotlin.browser.document\n\nobject Document {\n\n    val onClick = EventHandler<MouseEvent>()\n    val onDblClick = EventHandler<MouseEvent>()\n    val onContext = EventHandler<MouseEvent>()\n\n    val onMouseDown = EventHandler<MouseEvent>()\n    val onMouseMove = EventHandler<MouseEvent>()\n    val onMouseUp = EventHandler<MouseEvent>()\n    val onMouseEnter = EventHandler<MouseEvent>()\n    val onMouseLeave = EventHandler<MouseEvent>()\n\n    val onWheel = EventHandler<WheelEvent>()\n\n    val onKeyDown = EventHandler<KeyboardEvent>()\n    val onKeyPress = EventHandler<KeyboardEvent>()\n    val onKeyUp = EventHandler<KeyboardEvent>()\n\n    val onFocus = EventHandler<FocusEvent>()\n    val onBlur = EventHandler<FocusEvent>()\n\n    init {\n        onClick.bind(document, \"click\")\n        onDblClick.bind(document, \"dblclick\")\n        onContext.bind(document, \"contextmenu\")\n\n        onMouseDown.bind(document, \"mousedown\")\n        onMouseMove.bind(document, \"mousemove\")\n        onMouseUp.bind(document, \"mouseup\")\n        onMouseEnter.bind(document, \"mouseenter\")\n        onMouseLeave.bind(document, \"mouseleave\")\n\n        onWheel.bind(document, \"wheel\")\n\n        onKeyDown.bind(document, \"keydown\")\n        onKeyPress.bind(document, \"keypress\")\n        onKeyUp.bind(document, \"keyup\")\n\n        onFocus.bind(document, \"focus\")\n        onBlur.bind(document, \"blur\")\n    }\n}\n","package de.westermann.kwebview\n\n@DslMarker\nannotation class KWebViewDsl\n","package de.westermann.kwebview\n\nimport kotlin.math.max\nimport kotlin.math.min\nimport kotlin.math.sqrt\n\n/**\n * @author lars\n */\ndata class Point(\n        val x: Double,\n        val y: Double\n) {\n    constructor(x: Int, y: Int) : this(x.toDouble(), y.toDouble())\n\n    operator fun plus(number: Int) = Point(x + number, y + number)\n    operator fun plus(number: Double) = Point(x + number, y + number)\n    operator fun plus(point: Point) = Point(x + point.x, y + point.y)\n\n    operator fun minus(number: Int) = Point(x - number, y - number)\n    operator fun minus(number: Double) = Point(x - number, y - number)\n    operator fun minus(point: Point) = Point(x - point.x, y - point.y)\n\n    operator fun times(number: Int) = Point(x * number, y * number)\n    operator fun times(number: Double) = Point(x * number, y * number)\n    operator fun times(point: Point) = Point(x * point.x, y * point.y)\n\n    operator fun div(number: Int) = Point(x / number, y / number)\n    operator fun div(number: Double) = Point(x / number, y / number)\n    operator fun div(point: Point) = Point(x / point.x, y / point.y)\n\n    operator fun unaryMinus(): Point = Point(-x, -y)\n\n    fun min(): Double = min(x, y)\n    fun max(): Double = max(x, y)\n\n    val isZero: Boolean\n        get() = x == 0.0 && y == 0.0\n\n    companion object {\n        val ZERO = Point(0.0, 0.0)\n    }\n\n    val asPx: String\n        get() = \"${x}px, ${y}px\"\n\n    fun distance(): Double = sqrt(x * x + y * y)\n\n    infix fun distance(other: Point) = (this - other).distance()\n}\n","package de.westermann.kwebview\n\nimport org.w3c.dom.events.EventTarget\nimport org.w3c.dom.events.UIEvent\n\n/**\n * @author lars\n */\n\nopen external class TouchEvent(type: String) : UIEvent {\n    open val changedTouches: TouchList\n    open val targetTouches: TouchList\n    open val touches: TouchList\n    open val ctrlKey: Boolean\n    open val shiftKey: Boolean\n    open val altKey: Boolean\n    open val metaKey: Boolean\n    fun getModifierState(keyArg: String): Boolean\n}\n\nopen external class TouchList() {\n    open val length: Int\n    open fun item(index: Int): Touch?\n}\n\nopen external class Touch() {\n    open val identifier: Int\n    open val target: EventTarget\n    open val screenX: Double\n    open val screenY: Double\n    open val clientX: Double\n    open val clientY: Double\n    open val pageX: Double\n    open val pageY: Double\n}\n\noperator fun TouchList.get(index: Int) = item(index)\nfun TouchList.all(): List<Touch> = (0..length).mapNotNull { item(it) }\nfun TouchList.find(identifier: Int): Touch? = all().find { it.identifier == identifier }","package de.westermann.kwebview\n\nimport de.westermann.kobserve.event.EventHandler\nimport org.w3c.dom.HTMLElement\nimport org.w3c.dom.css.CSSStyleDeclaration\nimport org.w3c.dom.events.FocusEvent\nimport org.w3c.dom.events.KeyboardEvent\nimport org.w3c.dom.events.MouseEvent\nimport org.w3c.dom.events.WheelEvent\n\nabstract class View(view: HTMLElement = createHtmlView()) {\n\n    open val html: HTMLElement = view.also { view ->\n        this::class.simpleName?.let { name ->\n            view.classList.add(name.toDashCase())\n        }\n    }\n\n    val classList = ClassList(view.classList)\n    val dataset = DataSet(view.dataset)\n\n    var id by AttributeDelegate()\n\n    val clientLeft: Int\n        get() = html.clientLeft\n    val clientTop: Int\n        get() = html.clientTop\n    val clientWidth: Int\n        get() = html.clientWidth\n    val clientHeight: Int\n        get() = html.clientHeight\n\n    val offsetLeft: Int\n        get() = html.offsetLeft\n    val offsetTop: Int\n        get() = html.offsetTop\n    val offsetWidth: Int\n        get() = html.offsetWidth\n    val offsetHeight: Int\n        get() = html.offsetHeight\n\n    val offsetLeftTotal: Int\n        get() {\n            var element: HTMLElement? = html\n            var offset = 0\n            while (element != null) {\n                offset += element.offsetLeft\n                element = element.offsetParent as? HTMLElement\n            }\n            return offset\n        }\n    val offsetTopTotal: Int\n        get() {\n            var element: HTMLElement? = html\n            var offset = 0\n            while (element != null) {\n                offset += element.offsetTop\n                element = element.offsetParent as? HTMLElement\n            }\n            return offset\n        }\n\n    val dimension: Dimension\n        get() = html.getBoundingClientRect().toDimension()\n\n    var title by AttributeDelegate()\n\n    val style = view.style\n    fun style(block: CSSStyleDeclaration.() -> Unit) {\n        block(style)\n    }\n\n    fun focus() {\n        html.focus()\n    }\n\n    fun blur() {\n        html.blur()\n    }\n\n    fun click() {\n        html.click()\n    }\n\n    val onClick = EventHandler<MouseEvent>()\n    val onDblClick = EventHandler<MouseEvent>()\n    val onContext = EventHandler<MouseEvent>()\n\n    val onMouseDown = EventHandler<MouseEvent>()\n    val onMouseMove = EventHandler<MouseEvent>()\n    val onMouseUp = EventHandler<MouseEvent>()\n    val onMouseEnter = EventHandler<MouseEvent>()\n    val onMouseLeave = EventHandler<MouseEvent>()\n\n    val onTouchStart = EventHandler<TouchEvent>()\n    val onTouchEnd = EventHandler<TouchEvent>()\n    val onTouchMove = EventHandler<TouchEvent>()\n    val onTouchCancel = EventHandler<TouchEvent>()\n\n    val onWheel = EventHandler<WheelEvent>()\n\n    val onKeyDown = EventHandler<KeyboardEvent>()\n    val onKeyPress = EventHandler<KeyboardEvent>()\n    val onKeyUp = EventHandler<KeyboardEvent>()\n\n    val onFocus = EventHandler<FocusEvent>()\n    val onBlur = EventHandler<FocusEvent>()\n\n    init {\n        onClick.bind(view, \"click\")\n        onDblClick.bind(view, \"dblclick\")\n        onContext.bind(view, \"contextmenu\")\n\n        onMouseDown.bind(view, \"mousedown\")\n        onMouseMove.bind(view, \"mousemove\")\n        onMouseUp.bind(view, \"mouseup\")\n        onMouseEnter.bind(view, \"mouseenter\")\n        onMouseLeave.bind(view, \"mouseleave\")\n\n        if (js(\"!!window.TouchEvent\") == true) {\n            onTouchStart.bind(view, \"touchstart\")\n            onTouchEnd.bind(view, \"touchend\")\n            onTouchMove.bind(view, \"touchmove\")\n            onTouchCancel.bind(view, \"touchcancel\")\n        }\n\n        onWheel.bind(view, \"wheel\")\n\n        onKeyDown.bind(view, \"keydown\")\n        onKeyPress.bind(view, \"keypress\")\n        onKeyUp.bind(view, \"keyup\")\n\n        onFocus.bind(view, \"focus\")\n        onBlur.bind(view, \"blur\")\n    }\n}\n","package de.westermann.kwebview\n\nimport org.w3c.dom.HTMLElement\nimport kotlin.dom.clear\n\n/**\n * @author lars\n */\nabstract class ViewCollection<V : View>(view: HTMLElement = createHtmlView()) : View(view), Collection<V> {\n\n    private val children: MutableList<V> = mutableListOf()\n\n    fun append(view: V) {\n        children += view\n        html.appendChild(view.html)\n    }\n\n    operator fun plusAssign(view: V) = append(view)\n\n    fun prepand(view: V) {\n        children.add(0, view)\n        html.insertBefore(view.html, html.firstChild)\n    }\n\n    fun remove(view: V) {\n        if (children.contains(view)) {\n            children -= view\n            html.removeChild(view.html)\n        }\n    }\n\n    fun replace(oldView: V, newView: V) {\n        if (children.contains(oldView)) {\n            children.add(children.indexOf(oldView), newView)\n            html.insertBefore(newView.html, oldView.html)\n            children -= oldView\n            html.removeChild(oldView.html)\n        }\n    }\n\n    fun add(view: V) = append(view)\n\n    fun add(index: Int, view: V) {\n        if (index >= size) {\n            append(view)\n        } else {\n            html.insertBefore(view.html, children[index].html)\n            children.add(index, view)\n        }\n    }\n\n    operator fun get(index: Int): V {\n        return children[index]\n    }\n\n    fun removeAt(index: Int) {\n        if (index in 0 until size) {\n            remove(children[index])\n        }\n    }\n\n    fun toForeground(view: V) {\n        if (view in children && children.indexOf(view) < children.size - 1) {\n            remove(view)\n            append(view)\n        }\n    }\n\n    fun toBackground(view: V) {\n        if (view in children && children.indexOf(view) > 0) {\n            remove(view)\n            prepand(view)\n        }\n    }\n\n    fun first(): V = children.first()\n    fun last(): V = children.last()\n\n    operator fun minusAssign(view: V) = remove(view)\n\n    override fun isEmpty(): Boolean = children.isEmpty()\n\n    fun clear() {\n        children.clear()\n        html.clear()\n    }\n\n    override fun iterator(): Iterator<V> = children.iterator()\n\n    override val size: Int\n        get() = children.size\n\n    override fun contains(element: V) = children.contains(element)\n\n    override fun containsAll(elements: Collection<V>): Boolean = children.containsAll(elements)\n\n    operator fun V.unaryPlus() {\n        append(this)\n    }\n}\n","package de.westermann.kwebview\n\nimport de.westermann.kwebview.components.Label\nimport org.w3c.dom.HTMLInputElement\nimport kotlin.math.abs\nimport kotlin.random.Random\n\nabstract class ViewForLabel : View(createHtmlView<HTMLInputElement>()) {\n    override val html = super.html as HTMLInputElement\n\n    private var label: Label? = null\n\n    fun setLabel(label: Label) {\n        if (this.label != null) {\n            throw IllegalStateException(\"Label already set!\")\n        }\n\n        this.label = label\n\n        val id = id\n        if (id?.isNotBlank() == true) {\n            label.html.htmlFor = id\n        } else {\n            val newId = this::class.simpleName?.toDashCase() + \"-\" + generateId()\n            this.id = newId\n            label.html.htmlFor = newId\n        }\n    }\n\n    private var requiredInternal by AttributeDelegate(\"required\")\n    var required: Boolean\n        get() = requiredInternal != null\n        set(value) {\n            requiredInternal = if (value) \"required\" else null\n        }\n    private var readonlyInternal by AttributeDelegate(\"readonly\")\n    var readonly: Boolean\n        get() = readonlyInternal != null\n        set(value) {\n            readonlyInternal = if (value) \"readonly\" else null\n        }\n\n    var tabindex by AttributeDelegate()\n    fun preventTabStop() {\n        tabindex = \"-1\"\n    }\n\n    companion object {\n        fun generateId(length: Int = 16): String {\n            var str = \"\"\n            while (str.length <= length) {\n                str += abs(Random.nextLong()).toString(36)\n            }\n            return str.take(length)\n        }\n    }\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.i18n\nimport org.w3c.dom.HTMLBodyElement\nimport kotlin.browser.document\nimport kotlin.browser.window\n\nobject Body : ViewCollection<View>(document.body\n        ?: throw NullPointerException(\"Access to body before body was loaded\")) {\n    override val html = super.html as HTMLBodyElement\n}\n\n@KWebViewDsl\nfun init(language: String? = null, block: Body.() -> Unit) {\n    var done = if (language == null) 1 else 2\n    window.onload = {\n        done -= 1\n        if (done <= 0) {\n            block(Body)\n        }\n    }\n    if (language != null) {\n        i18n.load(language) {\n            done -= 1\n            if (done <= 0) {\n                block(Body)\n            }\n        }\n    }\n}","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLDivElement\n\nclass BoxView() : ViewCollection<View>(createHtmlView<HTMLDivElement>()) {\n    override val html = super.html as HTMLDivElement\n}\n\n@KWebViewDsl\nfun ViewCollection<in BoxView>.boxView(vararg classes: String, init: BoxView.() -> Unit = {}): BoxView {\n    val view = BoxView()\n    for (c in classes) {\n        view.classList += c\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLButtonElement\n\n/**\n * Represents a html span element.\n *\n * @author lars\n */\nclass Button() : ViewCollection<View>(createHtmlView<HTMLButtonElement>()) {\n\n    constructor(text: String) : this() {\n        this.text = text\n    }\n\n    override val html = super.html as HTMLButtonElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        textProperty.bind(property)\n    }\n\n    fun unbind() {\n        textProperty.unbind()\n    }\n\n    var text: String\n        get() = html.textContent ?: \"\"\n        set(value) {\n            html.textContent = value\n            textProperty.invalidate()\n        }\n\n    val textProperty: Property<String> = property(this::text)\n}\n\n@KWebViewDsl\nfun ViewCollection<in Button>.button(text: String = \"\", init: Button.() -> Unit = {}) =\n        Button(text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Button>.button(text: ReadOnlyProperty<String>, init: Button.() -> Unit = {}) =\n        Button(text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Button>.button(init: Button.() -> Unit = {}) =\n        Button().also(this::append).also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.ViewForLabel\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\n\nclass Checkbox(\n        initValue: Boolean = false\n) : ViewForLabel() {\n\n    fun bind(property: ReadOnlyProperty<Boolean>) {\n        checkedProperty.bind(property)\n        readonly = true\n    }\n\n    fun bind(property: Property<Boolean>) {\n        checkedProperty.bindBidirectional(property)\n    }\n\n    fun unbind() {\n        checkedProperty.unbind()\n    }\n\n    var checked: Boolean\n        get() = html.checked\n        set(value) {\n            html.checked = value\n            checkedProperty.invalidate()\n        }\n\n    val checkedProperty: Property<Boolean> = property(this::checked)\n\n    init {\n        checked = initValue\n        html.type = \"checkbox\"\n\n        var lastValue = checked\n        val changeListener = object : EventListener {\n            override fun handleEvent(event: Event) {\n                val value = checked\n                if (value != checkedProperty.value || value != lastValue) {\n                    lastValue = value\n                    checkedProperty.value = value\n                }\n            }\n        }\n\n        html.addEventListener(\"change\", changeListener)\n        html.addEventListener(\"keyup\", changeListener)\n        html.addEventListener(\"keypress\", changeListener)\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Checkbox>.checkbox(value: Boolean = false, init: Checkbox.() -> Unit = {}) =\n        Checkbox(value).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Checkbox>.checkbox(value: ReadOnlyProperty<Boolean>, init: Checkbox.() -> Unit = {}) =\n        Checkbox(value.value).also(this::append).also { it.bind(value) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Checkbox>.checkbox(value: Property<Boolean>, init: Checkbox.() -> Unit = {}) =\n        Checkbox(value.value).also(this::append).also { it.bind(value) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\n\nclass FilterList<T, V : View>(\n        val property: ReadOnlyProperty<T>,\n        val filter: Filter<T, V>\n) : ViewCollection<V>(createHtmlView()) {\n\n    private val content: MutableMap<T, V> = mutableMapOf()\n\n    fun update() {\n        val list = filter.filter(property.value)\n        var missing = list\n\n        for ((element, view) in content.entries) {\n            if (element in list) {\n                missing -= element\n            } else {\n                if (contains(view)) {\n                    remove(view)\n                }\n                if (!filter.useCache) {\n                    content -= element\n                }\n            }\n        }\n\n        for (element in missing) {\n            val view = filter.render(element)\n            append(view)\n            if (property is Property<T>) {\n                view.onClick {\n                    property.value = element\n                }\n            }\n            content[element] = view\n        }\n\n        clear()\n\n        for (element in list) {\n            append(content[element]!!)\n        }\n    }\n\n    init {\n        update()\n\n        property.onChange {\n            update()\n        }\n    }\n}\n\ninterface Filter<T, V : View> {\n    fun filter(partial: T): List<T>\n    fun render(element: T): V\n\n    val useCache: Boolean\n}\n\nclass StringFilter(\n        private val dataSet: List<String>\n) : Filter<String, TextView> {\n    override fun filter(partial: String): List<String> {\n        val lower = partial.trim().toLowerCase()\n        return dataSet.filter {\n            it.toLowerCase().contains(lower)\n        }.sortedBy { it.length + it.toLowerCase().indexOf(partial) * 2 }\n    }\n\n    override fun render(element: String) = TextView(element)\n\n    override val useCache = true\n}\n\nclass StaticStringFilter(\n        private val dataSet: List<String>\n) : Filter<String, TextView> {\n    override fun filter(partial: String) = dataSet\n\n    override fun render(element: String) = TextView(element)\n\n    override val useCache = true\n}\n\n\nclass DynamicStringFilter(\n        private val filter: (partial: String) -> List<String>\n) : Filter<String, TextView> {\n    override fun filter(partial: String) = filter.invoke(partial)\n\n    override fun render(element: String) = TextView(element)\n\n    override val useCache = false\n}\n\n\nfun <T, V : View> ViewCollection<in FilterList<T, V>>.filterList(property: ReadOnlyProperty<T>, filter: Filter<T, V>, init: FilterList<T, V>.() -> Unit = {}) =\n        FilterList(property, filter).also(this::append).also(init)","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLHeadingElement\n\nclass Heading(\n        val type: Type,\n        value: String = \"\"\n) : View(createHtmlView<HTMLHeadingElement>(type.tagName)) {\n\n    override val html = super.html as HTMLHeadingElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        textProperty.bind(property)\n    }\n\n    fun unbind() {\n        textProperty.unbind()\n    }\n\n    var text: String\n        get() = html.textContent ?: \"\"\n        set(value) {\n            html.textContent = value\n            textProperty.invalidate()\n        }\n\n    val textProperty: Property<String> = property(this::text)\n\n    init {\n        text = value\n    }\n\n    enum class Type(val tagName: String) {\n        H1(\"h1\"),\n        H2(\"h2\"),\n        H3(\"h3\"),\n        H4(\"h4\"),\n        H5(\"h5\"),\n        H6(\"h6\")\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h1(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H1, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h1(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H1, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h2(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H2, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h2(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H2, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h3(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H3, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h3(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H3, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h4(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H4, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h4(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H4, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h5(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H5, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h5(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H5, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h6(text: String = \"\", init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H6, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Heading>.h6(text: ReadOnlyProperty<String>, init: Heading.() -> Unit = {}) =\n        Heading(Heading.Type.H6, text.value).also(this::append).also { it.bind(text) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLSpanElement\nimport kotlin.dom.clear\n\n/**\n * Represents all kinds of icon views.\n *\n * @author lars\n */\nclass IconView(icon: Icon?) : View(createHtmlView<HTMLSpanElement>()) {\n\n    override val html = super.html as HTMLSpanElement\n\n    fun bind(property: ReadOnlyProperty<Icon?>) {\n        iconProperty.bind(property)\n    }\n\n    fun unbind() {\n        iconProperty.unbind()\n    }\n\n    var icon: Icon? = null\n        set(value) {\n            field = value\n            html.clear()\n            value?.let {\n                html.appendChild(it.element)\n            }\n            iconProperty.invalidate()\n        }\n\n    val iconProperty: Property<Icon?> = property(this::icon)\n\n    init {\n        this.icon = icon\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in IconView>.iconView(icon: Icon? = null, init: IconView.() -> Unit = {}) =\n        IconView(icon).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in IconView>.iconView(icon: ReadOnlyProperty<Icon?>, init: IconView.() -> Unit = {}) =\n        IconView(icon.value).also(this::append).also { it.bind(icon) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLImageElement\n\nclass ImageView(\n        src: String\n) : View(createHtmlView<HTMLImageElement>(\"img\")) {\n\n    override val html = super.html as HTMLImageElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        sourceProperty.bind(property)\n    }\n\n    fun unbind() {\n        sourceProperty.unbind()\n    }\n\n    var source: String\n        get() = html.src\n        set(value) {\n            html.src = value\n            sourceProperty.invalidate()\n        }\n\n    val sourceProperty: Property<String> = property(this::source)\n\n\n    var alt by AttributeDelegate(\"alt\")\n\n    init {\n        source = src\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in ImageView>.imageView(src: String = \"\", init: ImageView.() -> Unit = {}) =\n        ImageView(src).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in ImageView>.imageView(src: ReadOnlyProperty<String>, init: ImageView.() -> Unit = {}) =\n        ImageView(src.value).also(this::append).also { it.bind(src) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.ValidationProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kobserve.not\nimport de.westermann.kwebview.*\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\nimport org.w3c.dom.events.KeyboardEvent\n\nclass InputView(\n        type: InputType,\n        initValue: String = \"\"\n) : ViewForLabel() {\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        valueProperty.bind(property)\n        readonly = true\n    }\n\n    fun bind(property: Property<String>) {\n        valueProperty.bindBidirectional(property)\n    }\n\n    fun bind(property: ValidationProperty<String>) {\n        valueProperty.bindBidirectional(property)\n        invalidProperty.bind(!property.validProperty)\n    }\n\n    fun unbind() {\n        valueProperty.unbind()\n        if (invalidProperty.isBound) {\n            invalidProperty.unbind()\n        }\n    }\n\n    var value: String\n        get() = html.value\n        set(value) {\n            html.value = value\n            valueProperty.invalidate()\n        }\n\n    val valueProperty: Property<String> = property(this::value)\n\n    var placeholder: String\n        get() = html.placeholder\n        set(value) {\n            html.placeholder = value\n            placeholderProperty.invalidate()\n        }\n\n    val placeholderProperty: Property<String> = property(this::placeholder)\n\n    val invalidProperty by ClassDelegate(\"invalid\")\n    var invalid by invalidProperty\n\n    private var typeInternal by AttributeDelegate(\"type\")\n    var type: InputType?\n        get() = typeInternal?.let(InputType.Companion::find)\n        set(value) {\n            typeInternal = value?.html\n        }\n    private var maxLengthInternal by AttributeDelegate(\"maxLength\")\n    var maxLength: Int?\n        get() = maxLengthInternal?.toIntOrNull()\n        set(value) {\n            maxLengthInternal = value?.toString()\n        }\n    private var minInternal by AttributeDelegate(\"min\")\n    var min: Double?\n        get() = minInternal?.toDoubleOrNull()\n        set(value) {\n            minInternal = value?.toString()\n        }\n    private var maxInternal by AttributeDelegate(\"max\")\n    var max: Double?\n        get() = maxInternal?.toDoubleOrNull()\n        set(value) {\n            maxInternal = value?.toString()\n        }\n    private var stepInternal by AttributeDelegate(\"step\")\n    var step: Double?\n        get() = stepInternal?.toDoubleOrNull()\n        set(value) {\n            stepInternal = value?.toString()\n        }\n\n    val selectionStart: Int?\n        get() = html.selectionStart\n    val selectionEnd: Int?\n        get() = html.selectionEnd\n\n    fun selectRange(start: Int, end: Int = start) = html.setSelectionRange(start, end)\n\n    init {\n        value = initValue\n        this.type = type\n\n        var lastValue = value\n        val changeListener = object : EventListener {\n            override fun handleEvent(event: Event) {\n                val value = value\n                if (value != valueProperty.value || value != lastValue) {\n                    lastValue = value\n                    valueProperty.value = value\n                }\n\n                (event as? KeyboardEvent)?.let { e ->\n                    when (e.keyCode) {\n                        13, 27 -> blur()\n                    }\n                }\n            }\n        }\n\n        html.addEventListener(\"change\", changeListener)\n        html.addEventListener(\"keyup\", changeListener)\n        html.addEventListener(\"keypress\", changeListener)\n    }\n}\n\nenum class InputType(val html: String) {\n    TEXT(\"text\"),\n    NUMBER(\"number\"),\n    PASSWORD(\"password\");\n\n    companion object {\n        fun find(html: String): InputType? = values().find { it.html == html }\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(text: String = \"\", init: InputView.() -> Unit = {}) =\n        InputView(InputType.TEXT, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(text: ReadOnlyProperty<String>, init: InputView.() -> Unit = {}) =\n        InputView(InputType.TEXT, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(text: Property<String>, init: InputView.() -> Unit = {}) =\n        InputView(InputType.TEXT, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(text: ValidationProperty<String>, init: InputView.() -> Unit = {}) =\n        InputView(InputType.TEXT, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(type: InputType = InputType.TEXT, text: String = \"\", init: InputView.() -> Unit = {}) =\n        InputView(type, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(type: InputType = InputType.TEXT, text: ReadOnlyProperty<String>, init: InputView.() -> Unit = {}) =\n        InputView(type, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(type: InputType = InputType.TEXT, text: Property<String>, init: InputView.() -> Unit = {}) =\n        InputView(type, text.value).also(this::append).also { it.bind(text) }.also(init)\n\n@KWebViewDsl\nfun ViewCollection<in InputView>.inputView(type: InputType = InputType.TEXT, text: ValidationProperty<String>, init: InputView.() -> Unit = {}) =\n        InputView(type, text.value).also(this::append).also { it.bind(text) }.also(init)\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the array is empty.\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size)))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original array.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    val set = LinkedHashSet<Byte>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    val set = LinkedHashSet<Short>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    val set = LinkedHashSet<Int>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    val set = LinkedHashSet<Long>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    val set = LinkedHashSet<Float>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    val set = LinkedHashSet<Double>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    val set = LinkedHashSet<Boolean>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    val set = LinkedHashSet<Char>(mapCapacity(size))\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.max(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ByteArray.max(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun ShortArray.max(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun IntArray.max(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun LongArray.max(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.max(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.max(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    if (max.isNaN()) return max\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun CharArray.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Double>.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Array<out Float>.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Array<out T>.min(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ByteArray.min(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun ShortArray.min(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun IntArray.min(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun LongArray.min(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun FloatArray.min(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\npublic fun DoubleArray.min(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    if (min.isNaN()) return min\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun CharArray.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLLabelElement\n\n/**\n * Represents a html label element.\n *\n * @author lars\n */\nclass Label(\n    inputElement: ViewForLabel,\n    value: String = \"\"\n) : View(createHtmlView<HTMLLabelElement>()) {\n\n    override val html = super.html as HTMLLabelElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        textProperty.bind(property)\n    }\n\n    fun unbind() {\n        textProperty.unbind()\n    }\n\n    var text: String\n        get() = html.textContent ?: \"\"\n        set(value) {\n            html.textContent = value\n            textProperty.invalidate()\n        }\n\n    val textProperty: Property<String> = property(this::text)\n\n    init {\n        text = value\n\n        inputElement.setLabel(this)\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Label>.label(inputElement: ViewForLabel, text: String = \"\", init: Label.() -> Unit = {}) =\n    Label(inputElement, text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in Label>.label(inputElement: ViewForLabel, text: ReadOnlyProperty<String>, init: Label.() -> Unit = {}) =\n    Label(inputElement, text.value).also(this::append).also { it.bind(text) }.also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLAnchorElement\n\n/**\n * Represents a html span element.\n *\n * @author lars\n */\nclass Link(target: String) : ViewCollection<View>(createHtmlView<HTMLAnchorElement>(\"a\")) {\n\n    override val html = super.html as HTMLAnchorElement\n\n    var text: String?\n        get() = html.textContent\n        set(value) {\n            html.textContent = value\n        }\n\n    var target: String\n        get() = html.href\n        set(value) {\n            html.href = value\n        }\n\n    init {\n        this.target = target\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in Link>.link(target: String, text: String? = null, init: Link.() -> Unit = {}): Link {\n    val view = Link(target)\n    if (text != null) {\n        view.text = text\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport org.w3c.dom.Element\nimport kotlin.browser.document\n\n/**\n * List of material design icons.\n */\nenum class MaterialIcon(private val ligature: String) : Icon {\n    ROTATION_3D(\"3d_rotation\"),\n    AC_UNIT(\"ac_unit\"),\n    ACCESS_ALARM(\"access_alarm \"),\n    ACCESS_ALARMS(\"access_alarms\"),\n    ACCESS_TIME(\"access_time\"),\n    ACCESSIBILITY(\"accessibility\"),\n    ACCESSIBLE(\"accessible\"),\n    ACCOUNT_BALANCE(\"account_balance\"),\n    ACCOUNT_BALANCE_WALLET(\"account_balance_wallet\"),\n    ACCOUNT_BOX(\"account_box\"),\n    ACCOUNT_CIRCLE(\"account_circle\"),\n    ADB(\"adb\"),\n    ADD(\"add\"),\n    ADD_A_PHOTO(\"add_a_photo\"),\n    ADD_ALARM(\"add_alarm\"),\n    ADD_ALERT(\"add_alert\"),\n    ADD_BOX(\"add_box\"),\n    ADD_CIRCLE(\"add_circle\"),\n    ADD_CIRCLE_OUTLINE(\"add_circle_outline\"),\n    ADD_LOCATION(\"add_location \"),\n    ADD_SHOPPING_CART(\"add_shopping_cart\"),\n    ADD_TO_PHOTOS(\"add_to_photos\"),\n    ADD_TO_QUEUE(\"add_to_queue \"),\n    ADJUST(\"adjust\"),\n    AIRLINE_SEAT_FLAT(\"airline_seat_flat\"),\n    AIRLINE_SEAT_FLAT_ANGLED(\"airline_seat_flat_angled\"),\n    AIRLINE_SEAT_INDIVIDUAL_SUITE(\"airline_seat_individual_suite\"),\n    AIRLINE_SEAT_LEGROOM_EXTRA(\"airline_seat_legroom_extra\"),\n    AIRLINE_SEAT_LEGROOM_NORMAL(\"airline_seat_legroom_normal\"),\n    AIRLINE_SEAT_LEGROOM_REDUCED(\"airline_seat_legroom_reduced\"),\n    AIRLINE_SEAT_RECLINE_EXTRA(\"airline_seat_recline_extra\"),\n    AIRLINE_SEAT_RECLINE_NORMAL(\"airline_seat_recline_normal\"),\n    AIRPLANEMODE_ACTIVE(\"airplanemode_active\"),\n    AIRPLANEMODE_INACTIVE(\"airplanemode_inactive\"),\n    AIRPLAY(\"airplay\"),\n    AIRPORT_SHUTTLE(\"airport_shuttle\"),\n    ALARM(\"alarm\"),\n    ALARM_ADD(\"alarm_add\"),\n    ALARM_OFF(\"alarm_off\"),\n    ALARM_ON(\"alarm_on\"),\n    ALBUM(\"album\"),\n    ALL_INCLUSIVE(\"all_inclusive\"),\n    ALL_OUT(\"all_out\"),\n    ANDROID(\"android\"),\n    ANNOUNCEMENT(\"announcement \"),\n    APPS(\"apps\"),\n    ARCHIVE(\"archive\"),\n    ARROW_BACK(\"arrow_back\"),\n    ARROW_DOWNWARD(\"arrow_downward\"),\n    ARROW_DROP_DOWN(\"arrow_drop_down\"),\n    ARROW_DROP_DOWN_CIRCLE(\"arrow_drop_down_circle\"),\n    ARROW_DROP_UP(\"arrow_drop_up\"),\n    ARROW_FORWARD(\"arrow_forward\"),\n    ARROW_UPWARD(\"arrow_upward \"),\n    ART_TRACK(\"art_track\"),\n    ASPECT_RATIO(\"aspect_ratio \"),\n    ASSESSMENT(\"assessment\"),\n    ASSIGNMENT(\"assignment\"),\n    ASSIGNMENT_IND(\"assignment_ind\"),\n    ASSIGNMENT_LATE(\"assignment_late\"),\n    ASSIGNMENT_RETURN(\"assignment_return\"),\n    ASSIGNMENT_RETURNED(\"assignment_returned\"),\n    ASSIGNMENT_TURNED_IN(\"assignment_turned_in\"),\n    ASSISTANT(\"assistant\"),\n    ASSISTANT_PHOTO(\"assistant_photo\"),\n    ATTACH_FILE(\"attach_file\"),\n    ATTACH_MONEY(\"attach_money \"),\n    ATTACHMENT(\"attachment\"),\n    AUDIOTRACK(\"audiotrack\"),\n    AUTORENEW(\"autorenew\"),\n    AV_TIMER(\"av_timer\"),\n    BACKSPACE(\"backspace\"),\n    BACKUP(\"backup\"),\n    BATTERY_ALERT(\"battery_alert\"),\n    BATTERY_CHARGING_FULL(\"battery_charging_full\"),\n    BATTERY_FULL(\"battery_full \"),\n    BATTERY_STD(\"battery_std\"),\n    BATTERY_UNKNOWN(\"battery_unknown\"),\n    BEACH_ACCESS(\"beach_access \"),\n    BEENHERE(\"beenhere\"),\n    BLOCK(\"block\"),\n    BLUETOOTH(\"bluetooth\"),\n    BLUETOOTH_AUDIO(\"bluetooth_audio\"),\n    BLUETOOTH_CONNECTED(\"bluetooth_connected\"),\n    BLUETOOTH_DISABLED(\"bluetooth_disabled\"),\n    BLUETOOTH_SEARCHING(\"bluetooth_searching\"),\n    BLUR_CIRCULAR(\"blur_circular\"),\n    BLUR_LINEAR(\"blur_linear\"),\n    BLUR_OFF(\"blur_off\"),\n    BLUR_ON(\"blur_on\"),\n    BOOK(\"book\"),\n    BOOKMARK(\"bookmark\"),\n    BOOKMARK_BORDER(\"bookmark_border\"),\n    BORDER_ALL(\"border_all\"),\n    BORDER_BOTTOM(\"border_bottom\"),\n    BORDER_CLEAR(\"border_clear \"),\n    BORDER_COLOR(\"border_color \"),\n    BORDER_HORIZONTAL(\"border_horizontal\"),\n    BORDER_INNER(\"border_inner \"),\n    BORDER_LEFT(\"border_left\"),\n    BORDER_OUTER(\"border_outer \"),\n    BORDER_RIGHT(\"border_right \"),\n    BORDER_STYLE(\"border_style \"),\n    BORDER_TOP(\"border_top\"),\n    BORDER_VERTICAL(\"border_vertical\"),\n    BRANDING_WATERMARK(\"branding_watermark\"),\n    BRIGHTNESS_1(\"brightness_1 \"),\n    BRIGHTNESS_2(\"brightness_2 \"),\n    BRIGHTNESS_3(\"brightness_3 \"),\n    BRIGHTNESS_4(\"brightness_4 \"),\n    BRIGHTNESS_5(\"brightness_5 \"),\n    BRIGHTNESS_6(\"brightness_6 \"),\n    BRIGHTNESS_7(\"brightness_7 \"),\n    BRIGHTNESS_AUTO(\"brightness_auto\"),\n    BRIGHTNESS_HIGH(\"brightness_high\"),\n    BRIGHTNESS_LOW(\"brightness_low\"),\n    BRIGHTNESS_MEDIUM(\"brightness_medium\"),\n    BROKEN_IMAGE(\"broken_image \"),\n    BRUSH(\"brush\"),\n    BUBBLE_CHART(\"bubble_chart \"),\n    BUG_REPORT(\"bug_report\"),\n    BUILD(\"build\"),\n    BURST_MODE(\"burst_mode\"),\n    BUSINESS(\"business\"),\n    BUSINESS_CENTER(\"business_center\"),\n    CACHED(\"cached\"),\n    CAKE(\"cake\"),\n    CALL(\"call\"),\n    CALL_END(\"call_end\"),\n    CALL_MADE(\"call_made\"),\n    CALL_MERGE(\"call_merge\"),\n    CALL_MISSED(\"call_missed\"),\n    CALL_MISSED_OUTGOING(\"call_missed_outgoing\"),\n    CALL_RECEIVED(\"call_received\"),\n    CALL_SPLIT(\"call_split\"),\n    CALL_TO_ACTION(\"call_to_action\"),\n    CAMERA(\"camera\"),\n    CAMERA_ALT(\"camera_alt\"),\n    CAMERA_ENHANCE(\"camera_enhance\"),\n    CAMERA_FRONT(\"camera_front \"),\n    CAMERA_REAR(\"camera_rear\"),\n    CAMERA_ROLL(\"camera_roll\"),\n    CANCEL(\"cancel\"),\n    CARD_GIFTCARD(\"card_giftcard\"),\n    CARD_MEMBERSHIP(\"card_membership\"),\n    CARD_TRAVEL(\"card_travel\"),\n    CASINO(\"casino\"),\n    CAST(\"cast\"),\n    CAST_CONNECTED(\"cast_connected\"),\n    CENTER_FOCUS_STRONG(\"center_focus_strong\"),\n    CENTER_FOCUS_WEAK(\"center_focus_weak\"),\n    CHANGE_HISTORY(\"change_history\"),\n    CHAT(\"chat\"),\n    CHAT_BUBBLE(\"chat_bubble\"),\n    CHAT_BUBBLE_OUTLINE(\"chat_bubble_outline\"),\n    CHECK(\"checkUpdates\"),\n    CHECK_BOX(\"check_box\"),\n    CHECK_BOX_OUTLINE_BLANK(\"check_box_outline_blank\"),\n    CHECK_CIRCLE(\"check_circle \"),\n    CHEVRON_LEFT(\"chevron_left \"),\n    CHEVRON_RIGHT(\"chevron_right\"),\n    CHILD_CARE(\"child_care\"),\n    CHILD_FRIENDLY(\"child_friendly\"),\n    CHROME_RR_MODE(\"chrome_rr_mode\"),\n    CLASS(\"class\"),\n    CLEAR(\"clear\"),\n    CLEAR_ALL(\"clear_all\"),\n    CLOSE(\"close\"),\n    CLOSED_CAPTION(\"closed_caption\"),\n    CLOUD(\"cloud\"),\n    CLOUD_CIRCLE(\"cloud_circle \"),\n    CLOUD_DONE(\"cloud_done\"),\n    CLOUD_DOWNLOAD(\"cloud_download\"),\n    CLOUD_OFF(\"cloud_off\"),\n    CLOUD_QUEUE(\"cloud_queue\"),\n    CLOUD_UPLOAD(\"cloud_upload \"),\n    CODE(\"code\"),\n    COLLECTIONS(\"collections\"),\n    COLLECTIONS_BOOKMARK(\"collections_bookmark\"),\n    COLOR_LENS(\"color_lens\"),\n    COLORIZE(\"colorize\"),\n    COMMENT(\"comment\"),\n    COMPARE(\"compare\"),\n    COMPARE_ARROWS(\"compare_arrows\"),\n    COMPUTER(\"computer\"),\n    CONFIRMATION_NUMBER(\"confirmation_number\"),\n    CONTACT_MAIL(\"contact_mail \"),\n    CONTACT_PHONE(\"contact_phone\"),\n    CONTACTS(\"contacts\"),\n    CONTENT_COPY(\"content_copy \"),\n    CONTENT_CUT(\"content_cut\"),\n    CONTENT_PASTE(\"content_paste\"),\n    CONTROL_POINT(\"control_point\"),\n    CONTROL_POINT_DUPLICATE(\"control_point_duplicate\"),\n    COPYRIGHT(\"copyright\"),\n    CREATE(\"onCreate\"),\n    CREATE_NEW_FOLDER(\"create_new_folder\"),\n    CREDIT_CARD(\"credit_card\"),\n    CROP(\"crop\"),\n    CROP_16_9(\"crop_16_9\"),\n    CROP_3_2(\"crop_3_2\"),\n    CROP_5_4(\"crop_5_4\"),\n    CROP_7_5(\"crop_7_5\"),\n    CROP_DIN(\"crop_din\"),\n    CROP_FREE(\"crop_free\"),\n    CROP_LANDSCAPE(\"crop_landscape\"),\n    CROP_ORIGINAL(\"crop_original\"),\n    CROP_PORTRAIT(\"crop_portrait\"),\n    CROP_ROTATE(\"crop_rotate\"),\n    CROP_SQUARE(\"crop_square\"),\n    DASHBOARD(\"dashboard\"),\n    DATA_USAGE(\"data_usage\"),\n    DATE_RANGE(\"date_range\"),\n    DEHAZE(\"dehaze\"),\n    DELETE(\"delete\"),\n    DELETE_FOREVER(\"delete_forever\"),\n    DELETE_SWEEP(\"delete_sweep \"),\n    DESCRIPTION(\"description\"),\n    DESKTOP_MAC(\"desktop_mac\"),\n    DESKTOP_WINDOWS(\"desktop_windows\"),\n    DETAILS(\"details\"),\n    DEVELOPER_BOARD(\"developer_board\"),\n    DEVELOPER_MODE(\"developer_mode\"),\n    DEVICE_HUB(\"device_hub\"),\n    DEVICES(\"devices\"),\n    DEVICES_OTHER(\"devices_other\"),\n    DIALER_SIP(\"dialer_sip\"),\n    DIALPAD(\"dialpad\"),\n    DIRECTIONS(\"directions\"),\n    DIRECTIONS_BIKE(\"directions_bike\"),\n    DIRECTIONS_BOAT(\"directions_boat\"),\n    DIRECTIONS_BUS(\"directions_bus\"),\n    DIRECTIONS_CAR(\"directions_car\"),\n    DIRECTIONS_RAILWAY(\"directions_railway\"),\n    DIRECTIONS_RUN(\"directions_run\"),\n    DIRECTIONS_SUBWAY(\"directions_subway\"),\n    DIRECTIONS_TRANSIT(\"directions_transit\"),\n    DIRECTIONS_WALK(\"directions_walk\"),\n    DISC_FULL(\"disc_full\"),\n    DNS(\"dns\"),\n    DO_NOT_DISTURB(\"do_not_disturb\"),\n    DO_NOT_DISTURB_ALT(\"do_not_disturb_alt\"),\n    DO_NOT_DISTURB_OFF(\"do_not_disturb_off\"),\n    DO_NOT_DISTURB_ON(\"do_not_disturb_on\"),\n    DOCK(\"dock\"),\n    DOMAIN(\"domain\"),\n    DONE(\"done\"),\n    DONE_ALL(\"done_all\"),\n    DONUT_LARGE(\"donut_large\"),\n    DONUT_SMALL(\"donut_small\"),\n    DRAFTS(\"drafts\"),\n    DRAG_HANDLE(\"drag_handle\"),\n    DRIVE_ETA(\"drive_eta\"),\n    DVR(\"dvr\"),\n    EDIT(\"edit\"),\n    EDIT_LOCATION(\"edit_location\"),\n    EJECT(\"eject\"),\n    EMAIL(\"email\"),\n    ENHANCED_ENCRYPTION(\"enhanced_encryption\"),\n    EQUALIZER(\"equalizer\"),\n    ERROR(\"error\"),\n    ERROR_OUTLINE(\"error_outline\"),\n    EURO_SYMBOL(\"euro_symbol\"),\n    EV_STATION(\"ev_station\"),\n    EVENT(\"model\"),\n    EVENT_AVAILABLE(\"event_available\"),\n    EVENT_BUSY(\"event_busy\"),\n    EVENT_NOTE(\"event_note\"),\n    EVENT_SEAT(\"event_seat\"),\n    EXIT_TO_APP(\"exit_to_app\"),\n    EXPAND_LESS(\"expand_less\"),\n    EXPAND_MORE(\"expand_more\"),\n    EXPLICIT(\"explicit\"),\n    EXPLORE(\"explore\"),\n    EXPOSURE(\"exposure\"),\n    EXPOSURE_NEG_1(\"exposure_neg_1\"),\n    EXPOSURE_NEG_2(\"exposure_neg_2\"),\n    EXPOSURE_PLUS_1(\"exposure_plus_1\"),\n    EXPOSURE_PLUS_2(\"exposure_plus_2\"),\n    EXPOSURE_ZERO(\"exposure_zero\"),\n    EXTENSION(\"extension\"),\n    FACE(\"face\"),\n    FAST_FORWARD(\"fast_forward \"),\n    FAST_REWIND(\"fast_rewind\"),\n    FAVORITE(\"favorite\"),\n    FAVORITE_BORDER(\"favorite_border\"),\n    FEATURED_PLAY_LIST(\"featured_play_list\"),\n    FEATURED_VIDEO(\"featured_video\"),\n    FACK(\"fack\"),\n    FIBER_DVR(\"fiber_dvr\"),\n    FIBER_MANUAL_RECORD(\"fiber_manual_record\"),\n    FIBER_NEW(\"fiber_new\"),\n    FIBER_PIN(\"fiber_pin\"),\n    FIBER_SMART_RECORD(\"fiber_smart_record\"),\n    FILE_DOWNLOAD(\"file_download\"),\n    FILE_UPLOAD(\"file_upload\"),\n    FILTER(\"filter\"),\n    FILTER_1(\"filter_1\"),\n    FILTER_2(\"filter_2\"),\n    FILTER_3(\"filter_3\"),\n    FILTER_4(\"filter_4\"),\n    FILTER_5(\"filter_5\"),\n    FILTER_6(\"filter_6\"),\n    FILTER_7(\"filter_7\"),\n    FILTER_8(\"filter_8\"),\n    FILTER_9(\"filter_9\"),\n    FILTER_9_PLUS(\"filter_9_plus\"),\n    FILTER_B_AND_W(\"filter_b_and_w\"),\n    FILTER_CENTER_FOCUS(\"filter_center_focus\"),\n    FILTER_DRAMA(\"filter_drama \"),\n    FILTER_FRAMES(\"filter_frames\"),\n    FILTER_HDR(\"filter_hdr\"),\n    FILTER_LIST(\"filter_list\"),\n    FILTER_NONE(\"filter_none\"),\n    FILTER_TILT_SHIFT(\"filter_tilt_shift\"),\n    FILTER_VINTAGE(\"filter_vintage\"),\n    FIND_IN_PAGE(\"find_in_page \"),\n    FIND_REPLACE(\"find_replace \"),\n    FINGERPRINT(\"fingerprint\"),\n    FIRST_PAGE(\"first_page\"),\n    FITNESS_CENTER(\"fitness_center\"),\n    FLAG(\"flag\"),\n    FLARE(\"flare\"),\n    FLASH_AUTO(\"flash_auto\"),\n    FLASH_OFF(\"flash_off\"),\n    FLASH_ON(\"flash_on\"),\n    FLIGHT(\"flight\"),\n    FLIGHT_LAND(\"flight_land\"),\n    FLIGHT_TAKEOFF(\"flight_takeoff\"),\n    FLIP(\"flip\"),\n    FLIP_TO_BACK(\"flip_to_back \"),\n    FLIP_TO_FRONT(\"flip_to_front\"),\n    FOLDER(\"folder\"),\n    FOLDER_OPEN(\"folder_open\"),\n    FOLDER_SHARED(\"folder_shared\"),\n    FOLDER_SPECIAL(\"folder_special\"),\n    FONT_DOWNLOAD(\"font_download\"),\n    FORMAT_ALIGN_CENTER(\"format_align_center\"),\n    FORMAT_ALIGN_JUSTIFY(\"format_align_justify\"),\n    FORMAT_ALIGN_LEFT(\"format_align_left\"),\n    FORMAT_ALIGN_RIGHT(\"format_align_right\"),\n    FORMAT_BOLD(\"format_bold\"),\n    FORMAT_CLEAR(\"format_clear \"),\n    FORMAT_COLOR_FILL(\"format_color_fill\"),\n    FORMAT_COLOR_RESET(\"format_color_reset\"),\n    FORMAT_COLOR_TEXT(\"format_color_text\"),\n    FORMAT_INDENT_DECREASE(\"format_indent_decrease\"),\n    FORMAT_INDENT_INCREASE(\"format_indent_increase\"),\n    FORMAT_ITALIC(\"format_italic\"),\n    FORMAT_LINE_SPACING(\"format_line_spacing\"),\n    FORMAT_LIST_BULLETED(\"format_list_bulleted\"),\n    FORMAT_LIST_NUMBERED(\"format_list_numbered\"),\n    FORMAT_PAINT(\"format_paint \"),\n    FORMAT_QUOTE(\"format_quote \"),\n    FORMAT_SHAPES(\"format_shapes\"),\n    FORMAT_SIZE(\"format_size\"),\n    FORMAT_STRIKETHROUGH(\"format_strikethrough\"),\n    FORMAT_TEXTDIRECTION_L_TO_R(\"format_textdirection_l_to_r\"),\n    FORMAT_TEXTDIRECTION_R_TO_L(\"format_textdirection_r_to_l\"),\n    FORMAT_UNDERLINED(\"format_underlined\"),\n    FORUM(\"forum\"),\n    FORWARD(\"forward\"),\n    FORWARD_10(\"forward_10\"),\n    FORWARD_30(\"forward_30\"),\n    FORWARD_5(\"forward_5\"),\n    FREE_BREAKFAST(\"free_breakfast\"),\n    FULLSCREEN(\"fullscreen\"),\n    FULLSCREEN_EXIT(\"fullscreen_exit\"),\n    FUNCTIONS(\"functions\"),\n    G_TRANSLATE(\"g_translate\"),\n    GAMEPAD(\"gamepad\"),\n    GAMES(\"games\"),\n    GAVEL(\"gavel\"),\n    GESTURE(\"gesture\"),\n    GET_APP(\"get_app\"),\n    GIF(\"gif\"),\n    GOLF_COURSE(\"golf_course\"),\n    GPS_FIXED(\"gps_fixed\"),\n    GPS_NOT_FIXED(\"gps_not_fixed\"),\n    GPS_OFF(\"gps_off\"),\n    GRADE(\"grade\"),\n    GRADIENT(\"gradient\"),\n    GRAIN(\"grain\"),\n    GRAPHIC_EQ(\"graphic_eq\"),\n    GRID_OFF(\"grid_off\"),\n    GRID_ON(\"grid_on\"),\n    GROUP(\"group\"),\n    GROUP_ADD(\"group_add\"),\n    GROUP_WORK(\"group_work\"),\n    HD(\"hd\"),\n    HDR_OFF(\"hdr_off\"),\n    HDR_ON(\"hdr_on\"),\n    HDR_STRONG(\"hdr_strong\"),\n    HDR_WEAK(\"hdr_weak\"),\n    HEADSET(\"headset\"),\n    HEADSET_MIC(\"headset_mic\"),\n    HEALING(\"healing\"),\n    HEARING(\"hearing\"),\n    HELP(\"help\"),\n    HELP_OUTLINE(\"help_outline \"),\n    HIGH_QUALITY(\"high_quality \"),\n    HIGHLIGHT(\"highlight\"),\n    HIGHLIGHT_OFF(\"highlight_off\"),\n    HISTORY(\"history\"),\n    HOME(\"home\"),\n    HOT_TUB(\"hot_tub\"),\n    HOTEL(\"hotel\"),\n    HOURGLASS_EMPTY(\"hourglass_empty\"),\n    HOURGLASS_FULL(\"hourglass_full\"),\n    HTTP(\"http\"),\n    HTTPS(\"https\"),\n    IMAGE(\"image\"),\n    IMAGE_ASPECT_RATIO(\"image_aspect_ratio\"),\n    IMPORT_CONTACTS(\"import_contacts\"),\n    IMPORT_EXPORT(\"import_export\"),\n    IMPORTANT_DEVICES(\"important_devices\"),\n    INBOX(\"inbox\"),\n    INDETERMINATE_CHECK_BOX(\"indeterminate_check_box\"),\n    INFO(\"info\"),\n    INFO_OUTLINE(\"info_outline \"),\n    INPUT(\"input\"),\n    INSERT_CHART(\"insert_chart \"),\n    INSERT_COMMENT(\"insert_comment\"),\n    INSERT_DRIVE_FILE(\"insert_drive_file\"),\n    INSERT_EMOTICON(\"insert_emoticon\"),\n    INSERT_INVITATION(\"insert_invitation\"),\n    INSERT_LINK(\"insert_link\"),\n    INSERT_PHOTO(\"insert_photo \"),\n    INVERT_COLORS(\"invert_colors\"),\n    INVERT_COLORS_OFF(\"invert_colors_off\"),\n    ISO(\"iso\"),\n    KEYBOARD(\"keyboard\"),\n    KEYBOARD_ARROW_DOWN(\"keyboard_arrow_down\"),\n    KEYBOARD_ARROW_LEFT(\"keyboard_arrow_left\"),\n    KEYBOARD_ARROW_RIGHT(\"keyboard_arrow_right\"),\n    KEYBOARD_ARROW_UP(\"keyboard_arrow_up\"),\n    KEYBOARD_BACKSPACE(\"keyboard_backspace\"),\n    KEYBOARD_CAPSLOCK(\"keyboard_capslock\"),\n    KEYBOARD_HIDE(\"keyboard_hide\"),\n    KEYBOARD_RETURN(\"keyboard_return\"),\n    KEYBOARD_TAB(\"keyboard_tab \"),\n    KEYBOARD_VOICE(\"keyboard_voice\"),\n    KITCHEN(\"kitchen\"),\n    LABEL(\"label\"),\n    LABEL_OUTLINE(\"label_outline\"),\n    LANDSCAPE(\"landscape\"),\n    LANGUAGE(\"language\"),\n    LAPTOP(\"laptop\"),\n    LAPTOP_CHROMEBOOK(\"laptop_chromebook\"),\n    LAPTOP_MAC(\"laptop_mac\"),\n    LAPTOP_WINDOWS(\"laptop_windows\"),\n    LAST_PAGE(\"last_page\"),\n    LAUNCH(\"launch\"),\n    LAYERS(\"layers\"),\n    LAYERS_CLEAR(\"layers_clear \"),\n    LEAK_ADD(\"leak_add\"),\n    LEAK_REMOVE(\"leak_remove\"),\n    LENS(\"lens\"),\n    LIBRARY_ADD(\"library_add\"),\n    LIBRARY_BOOKS(\"library_books\"),\n    LIBRARY_MUSIC(\"library_music\"),\n    LIGHTBULB_OUTLINE(\"lightbulb_outline\"),\n    LINE_STYLE(\"line_style\"),\n    LINE_WEIGHT(\"line_weight\"),\n    LINEAR_SCALE(\"linear_scale \"),\n    LINK(\"link\"),\n    LINKED_CAMERA(\"linked_camera\"),\n    LIST(\"list\"),\n    LIVE_HELP(\"live_help\"),\n    LIVE_TV(\"live_tv\"),\n    LOCAL_ACTIVITY(\"local_activity\"),\n    LOCAL_AIRPORT(\"local_airport\"),\n    LOCAL_ATM(\"local_atm\"),\n    LOCAL_BAR(\"local_bar\"),\n    LOCAL_CAFE(\"local_cafe\"),\n    LOCAL_CAR_WASH(\"local_car_wash\"),\n    LOCAL_CONVENIENCE_STORE(\"local_convenience_store\"),\n    LOCAL_DINING(\"local_dining \"),\n    LOCAL_DRINK(\"local_drink\"),\n    LOCAL_FLORIST(\"local_florist\"),\n    LOCAL_GAS_STATION(\"local_gas_station\"),\n    LOCAL_GROCERY_STORE(\"local_grocery_store\"),\n    LOCAL_HOSPITAL(\"local_hospital\"),\n    LOCAL_HOTEL(\"local_hotel\"),\n    LOCAL_LAUNDRY_SERVICE(\"local_laundry_service\"),\n    LOCAL_LIBRARY(\"local_library\"),\n    LOCAL_MALL(\"local_mall\"),\n    LOCAL_MOVIES(\"local_movies \"),\n    LOCAL_OFFER(\"local_offer\"),\n    LOCAL_PARKING(\"local_parking\"),\n    LOCAL_PHARMACY(\"local_pharmacy\"),\n    LOCAL_PHONE(\"local_phone\"),\n    LOCAL_PIZZA(\"local_pizza\"),\n    LOCAL_PLAY(\"local_play\"),\n    LOCAL_POST_OFFICE(\"local_post_office\"),\n    LOCAL_PRINTSHOP(\"local_printshop\"),\n    LOCAL_SEE(\"local_see\"),\n    LOCAL_SHIPPING(\"local_shipping\"),\n    LOCAL_TAXI(\"local_taxi\"),\n    LOCATION_CITY(\"location_city\"),\n    LOCATION_DISABLED(\"location_disabled\"),\n    LOCATION_OFF(\"location_off \"),\n    LOCATION_ON(\"location_on\"),\n    LOCATION_SEARCHING(\"location_searching\"),\n    LOCK(\"lock\"),\n    LOCK_OPEN(\"lock_open\"),\n    LOCK_OUTLINE(\"lock_outline \"),\n    LOOKS(\"looks\"),\n    LOOKS_3(\"looks_3\"),\n    LOOKS_4(\"looks_4\"),\n    LOOKS_5(\"looks_5\"),\n    LOOKS_6(\"looks_6\"),\n    LOOKS_ONE(\"looks_one\"),\n    LOOKS_TWO(\"looks_two\"),\n    LOOP(\"loop\"),\n    LOUPE(\"loupe\"),\n    LOW_PRIORITY(\"low_priority \"),\n    LOYALTY(\"loyalty\"),\n    MAIL(\"mail\"),\n    MAIL_OUTLINE(\"mail_outline \"),\n    MAP(\"map\"),\n    MARKUNREAD(\"markunread\"),\n    MARKUNREAD_MAILBOX(\"markunread_mailbox\"),\n    MEMORY(\"memory\"),\n    MENU(\"menu\"),\n    MERGE_TYPE(\"merge_type\"),\n    MESSAGE(\"message\"),\n    MIC(\"mic\"),\n    MIC_NONE(\"mic_none\"),\n    MIC_OFF(\"mic_off\"),\n    MMS(\"mms\"),\n    MODE_COMMENT(\"mode_comment \"),\n    MODE_EDIT(\"mode_edit\"),\n    MONETIZATION_ON(\"monetization_on\"),\n    MONEY_OFF(\"money_off\"),\n    MONOCHROME_PHOTOS(\"monochrome_photos\"),\n    MOOD(\"mood\"),\n    MOOD_BAD(\"mood_bad\"),\n    MORE(\"more\"),\n    MORE_HORIZ(\"more_horiz\"),\n    MORE_VERT(\"more_vert\"),\n    MOTORCYCLE(\"motorcycle\"),\n    MOUSE(\"mouse\"),\n    MOVE_TO_INBOX(\"move_to_inbox\"),\n    MOVIE(\"movie\"),\n    MOVIE_CREATION(\"movie_creation\"),\n    MOVIE_FILTER(\"movie_filter \"),\n    MULTILINE_CHART(\"multiline_chart\"),\n    MUSIC_NOTE(\"music_note\"),\n    MUSIC_VIDEO(\"music_video\"),\n    MY_LOCATION(\"my_location\"),\n    NATURE(\"nature\"),\n    NATURE_PEOPLE(\"nature_people\"),\n    NAVIGATE_BEFORE(\"navigate_before\"),\n    NAVIGATE_NEXT(\"navigate_next\"),\n    NAVIGATION(\"navigationDrawer\"),\n    NEAR_ME(\"near_me\"),\n    NETWORK_CELL(\"network_cell \"),\n    NETWORK_CHECK(\"network_check\"),\n    NETWORK_LOCKED(\"network_locked\"),\n    NETWORK_WIFI(\"network_wifi \"),\n    NEW_RELEASES(\"new_releases \"),\n    NEXT_WEEK(\"next_week\"),\n    NFC(\"nfc\"),\n    NO_ENCRYPTION(\"no_encryption\"),\n    NO_SIM(\"no_sim\"),\n    NOT_INTERESTED(\"not_interested\"),\n    NOTE(\"note\"),\n    NOTE_ADD(\"note_add\"),\n    NOTIFICATIONS(\"notifications\"),\n    NOTIFICATIONS_ACTIVE(\"notifications_active\"),\n    NOTIFICATIONS_NONE(\"notifications_none\"),\n    NOTIFICATIONS_OFF(\"notifications_off\"),\n    NOTIFICATIONS_PAUSED(\"notifications_paused\"),\n    OFFLINE_PIN(\"offline_pin\"),\n    ONDEMAND_VIDEO(\"ondemand_video\"),\n    OPACITY(\"opacity\"),\n    OPEN_IN_BROWSER(\"open_in_browser\"),\n    OPEN_IN_NEW(\"open_in_new\"),\n    OPEN_WITH(\"open_with\"),\n    PAGES(\"pages\"),\n    PAGEVIEW(\"pageview\"),\n    PALETTE(\"palette\"),\n    PAN_TOOL(\"pan_tool\"),\n    PANORAMA(\"panorama\"),\n    PANORAMA_FISH_EYE(\"panorama_fish_eye\"),\n    PANORAMA_HORIZONTAL(\"panorama_horizontal\"),\n    PANORAMA_VERTICAL(\"panorama_vertical\"),\n    PANORAMA_WIDE_ANGLE(\"panorama_wide_angle\"),\n    PARTY_MODE(\"party_mode\"),\n    PAUSE(\"pause\"),\n    PAUSE_CIRCLE_FILLED(\"pause_circle_filled\"),\n    PAUSE_CIRCLE_OUTLINE(\"pause_circle_outline\"),\n    PAYMENT(\"payment\"),\n    PEOPLE(\"people\"),\n    PEOPLE_OUTLINE(\"people_outline\"),\n    PERM_CAMERA_MIC(\"perm_camera_mic\"),\n    PERM_CONTACT_CALENDAR(\"perm_contact_calendar\"),\n    PERM_DATA_SETTING(\"perm_data_setting\"),\n    PERM_DEVICE_INFORMATION(\"perm_device_information\"),\n    PERM_IDENTITY(\"perm_identity\"),\n    PERM_MEDIA(\"perm_media\"),\n    PERM_PHONE_MSG(\"perm_phone_msg\"),\n    PERM_SCAN_WIFI(\"perm_scan_wifi\"),\n    PERSON(\"person\"),\n    PERSON_ADD(\"person_add\"),\n    PERSON_OUTLINE(\"person_outline\"),\n    PERSON_PIN(\"person_pin\"),\n    PERSON_PIN_CIRCLE(\"person_pin_circle\"),\n    PERSONAL_VIDEO(\"personal_video\"),\n    PETS(\"pets\"),\n    PHONE(\"phone\"),\n    PHONE_ANDROID(\"phone_android\"),\n    PHONE_BLUETOOTH_SPEAKER(\"phone_bluetooth_speaker\"),\n    PHONE_FORWARDED(\"phone_forwarded\"),\n    PHONE_IN_TALK(\"phone_in_talk\"),\n    PHONE_IPHONE(\"phone_iphone \"),\n    PHONE_LOCKED(\"phone_locked \"),\n    PHONE_MISSED(\"phone_missed \"),\n    PHONE_PAUSED(\"phone_paused \"),\n    PHONELINK(\"phonelink\"),\n    PHONELINK_ERASE(\"phonelink_erase\"),\n    PHONELINK_LOCK(\"phonelink_lock\"),\n    PHONELINK_OFF(\"phonelink_off\"),\n    PHONELINK_RING(\"phonelink_ring\"),\n    PHONELINK_SETUP(\"phonelink_setup\"),\n    PHOTO(\"photo\"),\n    PHOTO_ALBUM(\"photo_album\"),\n    PHOTO_CAMERA(\"photo_camera \"),\n    PHOTO_FILTER(\"photo_filter \"),\n    PHOTO_LIBRARY(\"photo_library\"),\n    PHOTO_SIZE_SELECT_ACTUAL(\"photo_size_select_actual\"),\n    PHOTO_SIZE_SELECT_LARGE(\"photo_size_select_large\"),\n    PHOTO_SIZE_SELECT_SMALL(\"photo_size_select_small\"),\n    PICTURE_AS_PDF(\"picture_as_pdf\"),\n    PICTURE_IN_PICTURE(\"picture_in_picture\"),\n    PICTURE_IN_PICTURE_ALT(\"picture_in_picture_alt\"),\n    PIE_CHART(\"pie_chart\"),\n    PIE_CHART_OUTLINED(\"pie_chart_outlined\"),\n    PIN_DROP(\"pin_drop\"),\n    PLACE(\"place\"),\n    PLAY_ARROW(\"play_arrow\"),\n    PLAY_CIRCLE_FILLED(\"play_circle_filled\"),\n    PLAY_CIRCLE_OUTLINE(\"play_circle_outline\"),\n    PLAY_FOR_WORK(\"play_for_work\"),\n    PLAYLIST_ADD(\"playlist_add \"),\n    PLAYLIST_ADD_CHECK(\"playlist_add_check\"),\n    PLAYLIST_PLAY(\"playlist_play\"),\n    PLUS_ONE(\"plus_one\"),\n    POLL(\"poll\"),\n    POLYMER(\"polymer\"),\n    POOL(\"pool\"),\n    PORTABLE_WIFI_OFF(\"portable_wifi_off\"),\n    PORTRAIT(\"portrait\"),\n    POWER(\"power\"),\n    POWER_INPUT(\"power_input\"),\n    POWER_SETTINGS_NEW(\"power_settings_new\"),\n    PREGNANT_WOMAN(\"pregnant_woman\"),\n    PRESENT_TO_ALL(\"present_to_all\"),\n    PRINT(\"print\"),\n    PRIORITY_HIGH(\"priority_high\"),\n    PUBLIC(\"public\"),\n    PUBLISH(\"publish\"),\n    QUERY_BUILDER(\"query_builder\"),\n    QUESTION_ANSWER(\"question_answer\"),\n    QUEUE(\"queue\"),\n    QUEUE_MUSIC(\"queue_music\"),\n    QUEUE_PLAY_NEXT(\"queue_play_next\"),\n    RADIO(\"radio\"),\n    RADIO_BUTTON_CHECKED(\"radio_button_checked\"),\n    RADIO_BUTTON_UNCHECKED(\"radio_button_unchecked\"),\n    RATE_REVIEW(\"rate_review\"),\n    RECEIPT(\"receipt\"),\n    RECENT_ACTORS(\"recent_actors\"),\n    RECORD_VOICE_OVER(\"record_voice_over\"),\n    RM(\"rm\"),\n    REDO(\"redo\"),\n    REFRESH(\"refresh\"),\n    REMOVE(\"remove\"),\n    REMOVE_CIRCLE(\"remove_circle\"),\n    REMOVE_CIRCLE_OUTLINE(\"remove_circle_outline\"),\n    REMOVE_FROM_QUEUE(\"remove_from_queue\"),\n    REMOVE_RED_EYE(\"remove_red_eye\"),\n    REMOVE_SHOPPING_CART(\"remove_shopping_cart\"),\n    REORDER(\"reorder\"),\n    REPEAT(\"repeat\"),\n    REPEAT_ONE(\"repeat_one\"),\n    REPLAY(\"replay\"),\n    REPLAY_10(\"replay_10\"),\n    REPLAY_30(\"replay_30\"),\n    REPLAY_5(\"replay_5\"),\n    REPLY(\"reply\"),\n    REPLY_ALL(\"reply_all\"),\n    REPORT(\"report\"),\n    REPORT_PROBLEM(\"report_problem\"),\n    RESTAURANT(\"restaurant\"),\n    RESTAURANT_MENU(\"restaurant_menu\"),\n    RESTORE(\"restore\"),\n    RESTORE_PAGE(\"restore_page \"),\n    RING_VOLUME(\"ring_volume\"),\n    ROOM(\"room\"),\n    ROOM_SERVICE(\"room_service \"),\n    ROTATE_90_DEGREES_CCW(\"rotate_90_degrees_ccw\"),\n    ROTATE_LEFT(\"rotate_left\"),\n    ROTATE_RIGHT(\"rotate_right \"),\n    ROUNDED_CORNER(\"rounded_corner\"),\n    ROUTER(\"router\"),\n    ROWING(\"rowing\"),\n    RSS_FEED(\"rss_feed\"),\n    RV_HOOKUP(\"rv_hookup\"),\n    SATELLITE(\"satellite\"),\n    SAVE(\"save\"),\n    SCANNER(\"scanner\"),\n    SCHEDULE(\"schedule\"),\n    SCHOOL(\"school\"),\n    SCREEN_LOCK_LANDSCAPE(\"screen_lock_landscape\"),\n    SCREEN_LOCK_PORTRAIT(\"screen_lock_portrait\"),\n    SCREEN_LOCK_ROTATION(\"screen_lock_rotation\"),\n    SCREEN_ROTATION(\"screen_rotation\"),\n    SCREEN_SHARE(\"screen_share \"),\n    SD_CARD(\"sd_card\"),\n    SD_STORAGE(\"sd_storage\"),\n    SEARCH(\"search\"),\n    SECURITY(\"security\"),\n    SELECT_ALL(\"select_all\"),\n    SEND(\"send\"),\n    SENTIMENT_DISSATISFIED(\"sentiment_dissatisfied\"),\n    SENTIMENT_NEUTRAL(\"sentiment_neutral\"),\n    SENTIMENT_SATISFIED(\"sentiment_satisfied\"),\n    SENTIMENT_VERY_DISSATISFIED(\"sentiment_very_dissatisfied\"),\n    SENTIMENT_VERY_SATISFIED(\"sentiment_very_satisfied\"),\n    SETTINGS(\"settings\"),\n    SETTINGS_APPLICATIONS(\"settings_applications\"),\n    SETTINGS_BACKUP_RESTORE(\"settings_backup_restore\"),\n    SETTINGS_BLUETOOTH(\"settings_bluetooth\"),\n    SETTINGS_BRIGHTNESS(\"settings_brightness\"),\n    SETTINGS_CELL(\"settings_cell\"),\n    SETTINGS_ETHERNET(\"settings_ethernet\"),\n    SETTINGS_INPUT_ANTENNA(\"settings_input_antenna\"),\n    SETTINGS_INPUT_COMPONENT(\"settings_input_component\"),\n    SETTINGS_INPUT_COMPOSITE(\"settings_input_composite\"),\n    SETTINGS_INPUT_HDMI(\"settings_input_hdmi\"),\n    SETTINGS_INPUT_SVIDEO(\"settings_input_svideo\"),\n    SETTINGS_OVERSCAN(\"settings_overscan\"),\n    SETTINGS_PHONE(\"settings_phone\"),\n    SETTINGS_POWER(\"settings_power\"),\n    SETTINGS_REMOTE(\"settings_remote\"),\n    SETTINGS_SYSTEM_DAYDREAM(\"settings_system_daydream\"),\n    SETTINGS_VOICE(\"settings_voice\"),\n    SHARE(\"share\"),\n    SHOP(\"shop\"),\n    SHOP_TWO(\"shop_two\"),\n    SHOPPING_BASKET(\"shopping_basket\"),\n    SHOPPING_CART(\"shopping_cart\"),\n    SHORT_TEXT(\"short_text\"),\n    SHOW_CHART(\"show_chart\"),\n    SHUFFLE(\"shuffle\"),\n    SIGNAL_CELLULAR_4_BAR(\"signal_cellular_4_bar\"),\n    SIGNAL_CELLULAR_CONNECTED_NO_INTERNET_4_BAR(\"signal_cellular_connected_no_internet_4_bar\"),\n    SIGNAL_CELLULAR_NO_SIM(\"signal_cellular_no_sim\"),\n    SIGNAL_CELLULAR_NULL(\"signal_cellular_null\"),\n    SIGNAL_CELLULAR_OFF(\"signal_cellular_off\"),\n    SIGNAL_WIFI_4_BAR(\"signal_wifi_4_bar\"),\n    SIGNAL_WIFI_4_BAR_LOCK(\"signal_wifi_4_bar_lock\"),\n    SIGNAL_WIFI_OFF(\"signal_wifi_off\"),\n    SIM_CARD(\"sim_card\"),\n    SIM_CARD_ALERT(\"sim_card_alert\"),\n    SKIP_NEXT(\"skip_next\"),\n    SKIP_PREVIOUS(\"skip_previous\"),\n    SLIDESHOW(\"slideshow\"),\n    SLOW_MOTION_VIDEO(\"slow_motion_video\"),\n    SMARTPHONE(\"smartphone\"),\n    SMOKE_FREE(\"smoke_free\"),\n    SMOKING_ROOMS(\"smoking_rooms\"),\n    SMS(\"sms\"),\n    SMS_FAILED(\"sms_failed\"),\n    SNOOZE(\"snooze\"),\n    SORT(\"sort\"),\n    SORT_BY_ALPHA(\"sort_by_alpha\"),\n    SPA(\"spa\"),\n    SPACE_BAR(\"space_bar\"),\n    SPEAKER(\"speaker\"),\n    SPEAKER_GROUP(\"speaker_group\"),\n    SPEAKER_NOTES(\"speaker_notes\"),\n    SPEAKER_NOTES_OFF(\"speaker_notes_off\"),\n    SPEAKER_PHONE(\"speaker_phone\"),\n    SPELLCHECK(\"spellcheck\"),\n    STAR(\"star\"),\n    STAR_BORDER(\"star_border\"),\n    STAR_HALF(\"star_half\"),\n    STARS(\"stars\"),\n    STAY_CURRENT_LANDSCAPE(\"stay_current_landscape\"),\n    STAY_CURRENT_PORTRAIT(\"stay_current_portrait\"),\n    STAY_PRIMARY_LANDSCAPE(\"stay_primary_landscape\"),\n    STAY_PRIMARY_PORTRAIT(\"stay_primary_portrait\"),\n    STOP(\"stop\"),\n    STOP_SCREEN_SHARE(\"stop_screen_share\"),\n    STORAGE(\"storage\"),\n    STORE(\"store\"),\n    STORE_MALL_DIRECTORY(\"store_mall_directory\"),\n    STRAIGHTEN(\"straighten\"),\n    STREETVIEW(\"streetview\"),\n    STRIKETHROUGH_S(\"strikethrough_s\"),\n    STYLE(\"style\"),\n    SUBDIRECTORY_ARROW_LEFT(\"subdirectory_arrow_left\"),\n    SUBDIRECTORY_ARROW_RIGHT(\"subdirectory_arrow_right\"),\n    SUBJECT(\"subject\"),\n    SUBSCRIPTIONS(\"subscriptions\"),\n    SUBTITLES(\"subtitles\"),\n    SUBWAY(\"subway\"),\n    SUPERVISOR_ACCOUNT(\"supervisor_account\"),\n    SURROUND_SOUND(\"surround_sound\"),\n    SWAP_CALLS(\"swap_calls\"),\n    SWAP_HORIZ(\"swap_horiz\"),\n    SWAP_VERT(\"swap_vert\"),\n    SWAP_VERTICAL_CIRCLE(\"swap_vertical_circle\"),\n    SWITCH_CAMERA(\"switch_camera\"),\n    SWITCH_VIDEO(\"switch_video \"),\n    SYNC(\"sync\"),\n    SYNC_DISABLED(\"sync_disabled\"),\n    SYNC_PROBLEM(\"sync_problem \"),\n    SYSTEM_UPDATE(\"system_update\"),\n    SYSTEM_UPDATE_ALT(\"system_update_alt\"),\n    TAB(\"tab\"),\n    TAB_UNSELECTED(\"tab_unselected\"),\n    TABLET(\"tablet\"),\n    TABLET_ANDROID(\"tablet_android\"),\n    TABLET_MAC(\"tablet_mac\"),\n    TAG_FACES(\"tag_faces\"),\n    TAP_AND_PLAY(\"tap_and_play \"),\n    TERRAIN(\"terrain\"),\n    TEXT_FIELDS(\"text_fields\"),\n    TEXT_FORMAT(\"text_format\"),\n    TEXTSMS(\"textsms\"),\n    TEXTURE(\"texture\"),\n    THEATERS(\"theaters\"),\n    THUMB_DOWN(\"thumb_down\"),\n    THUMB_UP(\"thumb_up\"),\n    THUMBS_UP_DOWN(\"thumbs_up_down\"),\n    TIME_TO_LEAVE(\"time_to_leave\"),\n    TIMELAPSE(\"timelapse\"),\n    TIMELINE(\"timeline\"),\n    TIMER(\"timer\"),\n    TIMER_10(\"timer_10\"),\n    TIMER_3(\"timer_3\"),\n    TIMER_OFF(\"timer_off\"),\n    TITLE(\"title\"),\n    TOC(\"toc\"),\n    TODAY(\"today\"),\n    TOLL(\"toll\"),\n    TONALITY(\"tonality\"),\n    TOUCH_APP(\"touch_app\"),\n    TOYS(\"toys\"),\n    TRACK_CHANGES(\"track_changes\"),\n    TRAFFIC(\"traffic\"),\n    TRAIN(\"train\"),\n    TRAM(\"tram\"),\n    TRANSFER_WITHIN_A_STATION(\"transfer_within_a_station\"),\n    TRANSFORM(\"transform\"),\n    TRANSLATE(\"translate\"),\n    TRENDING_DOWN(\"trending_down\"),\n    TRENDING_FLAT(\"trending_flat\"),\n    TRENDING_UP(\"trending_up\"),\n    TUNE(\"tune\"),\n    TURNED_IN(\"turned_in\"),\n    TURNED_IN_NOT(\"turned_in_not\"),\n    TV(\"tv\"),\n    UNARCHIVE(\"unarchive\"),\n    UNDO(\"undo\"),\n    UNFOLD_LESS(\"unfold_less\"),\n    UNFOLD_MORE(\"unfold_more\"),\n    UPDATE(\"update\"),\n    USB(\"usb\"),\n    VERIFIED_USER(\"verified_user\"),\n    VERTICAL_ALIGN_BOTTOM(\"vertical_align_bottom\"),\n    VERTICAL_ALIGN_CENTER(\"vertical_align_center\"),\n    VERTICAL_ALIGN_TOP(\"vertical_align_top\"),\n    VIBRATION(\"vibration\"),\n    VIDEO_CALL(\"video_call\"),\n    VIDEO_LABEL(\"video_label\"),\n    VIDEO_LIBRARY(\"video_library\"),\n    VIDEOCAM(\"videocam\"),\n    VIDEOCAM_OFF(\"videocam_off \"),\n    VIDEOGAME_ASSET(\"videogame_asset\"),\n    VIEW_AGENDA(\"view_agenda\"),\n    VIEW_ARRAY(\"view_array\"),\n    VIEW_CAROUSEL(\"view_carousel\"),\n    VIEW_COLUMN(\"view_column\"),\n    VIEW_COMFY(\"view_comfy\"),\n    VIEW_COMPACT(\"view_compact \"),\n    VIEW_DAY(\"view_day\"),\n    VIEW_HEADLINE(\"view_headline\"),\n    VIEW_LIST(\"view_list\"),\n    VIEW_MODULE(\"view_module\"),\n    VIEW_QUILT(\"view_quilt\"),\n    VIEW_STREAM(\"view_stream\"),\n    VIEW_WEEK(\"view_week\"),\n    VIGNETTE(\"vignette\"),\n    VISIBILITY(\"visibility\"),\n    VISIBILITY_OFF(\"visibility_off\"),\n    VOICE_CHAT(\"voice_chat\"),\n    VOICEMAIL(\"voicemail\"),\n    VOLUME_DOWN(\"volume_down\"),\n    VOLUME_MUTE(\"volume_mute\"),\n    VOLUME_OFF(\"volume_off\"),\n    VOLUME_UP(\"volume_up\"),\n    VPN_KEY(\"vpn_key\"),\n    VPN_LOCK(\"vpn_lock\"),\n    WALLPAPER(\"wallpaper\"),\n    WARNING(\"warning\"),\n    WATCH(\"watch\"),\n    WATCH_LATER(\"watch_later\"),\n    WB_AUTO(\"wb_auto\"),\n    WB_CLOUDY(\"wb_cloudy\"),\n    WB_INCANDESCENT(\"wb_incandescent\"),\n    WB_IRIDESCENT(\"wb_iridescent\"),\n    WB_SUNNY(\"wb_sunny\"),\n    WC(\"wc\"),\n    WEB(\"web\"),\n    WEB_ASSET(\"web_asset\"),\n    WEEKEND(\"weekend\"),\n    WHATSHOT(\"whatshot\"),\n    WIDGETS(\"widgets\"),\n    WIFI(\"wifi\"),\n    WIFI_LOCK(\"wifi_lock\"),\n    WIFI_TETHERING(\"wifi_tethering\"),\n    WORK(\"work\"),\n    WRAP_TEXT(\"wrap_text\"),\n    YOUTUBE_SEARCHED_FOR(\"youtube_searched_for\"),\n    ZOOM_IN(\"zoom_in\"),\n    ZOOM_OUT(\"zoom_out\"),\n    ZOOM_OUT_MAP(\"zoom_out_map \");\n\n    override val element: Element\n        get() = document.createElement(\"i\").apply {\n            classList.add(\"material-icons\")\n            textContent = ligature\n        }\n}","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLOptionElement\n\nclass OptionView<T>(val value: T) : View(createHtmlView<HTMLOptionElement>()) {\n\n    override val html = super.html as HTMLOptionElement\n\n    var htmlValue: String\n        get() = html.value\n        set(value) {\n            html.value = value\n        }\n\n    var text: String\n        get() = html.text\n        set(value) {\n            html.text = value\n        }\n\n    val index: Int\n        get() = html.index\n\n    var selected: Boolean\n        get() = html.selected\n        set(value) {\n            html.selected = value\n        }\n\n}","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.AttributeDelegate\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLSelectElement\nimport org.w3c.dom.events.Event\nimport org.w3c.dom.events.EventListener\n\nclass SelectView<T : Any>(\n        dataSet: List<T>,\n        private val initValue: T,\n        val transform: (T) -> String = { it.toString() }\n) : ViewCollection<OptionView<T>>(createHtmlView<HTMLSelectElement>()) {\n\n    override val html = super.html as HTMLSelectElement\n\n    fun bind(property: ReadOnlyProperty<T>) {\n        valueProperty.bind(property)\n        readonly = true\n    }\n\n    fun bind(property: Property<T>) {\n        valueProperty.bindBidirectional(property)\n    }\n\n    fun unbind() {\n        valueProperty.unbind()\n    }\n\n    var dataSet: List<T> = emptyList()\n        set(value) {\n            field = value\n            clear()\n\n            value.forEachIndexed { index, v ->\n                +OptionView(v).also { option ->\n                    option.text = transform(v)\n                    option.htmlValue = index.toString()\n                }\n            }\n        }\n\n    var index: Int\n        get() = html.selectedIndex\n        set(value) {\n            val invalidate = html.selectedIndex != value\n            html.selectedIndex = value\n            if (invalidate) {\n                valueProperty.invalidate()\n            }\n        }\n\n    var value: T\n        get() = dataSet.getOrNull(index) ?: initValue\n        set(value) {\n            index = dataSet.indexOf(value)\n        }\n    val valueProperty = property(this::value)\n\n    private var readonlyInternal by AttributeDelegate(\"readonly\")\n    var readonly: Boolean\n        get() = readonlyInternal != null\n        set(value) {\n            readonlyInternal = if (value) \"readonly\" else null\n        }\n\n    var tabindex by AttributeDelegate()\n    fun preventTabStop() {\n        tabindex = \"-1\"\n    }\n\n    init {\n        this.dataSet = dataSet\n        this.value = initValue\n\n        html.addEventListener(\"change\", object : EventListener {\n            override fun handleEvent(event: Event) {\n                valueProperty.invalidate()\n            }\n        })\n    }\n}\n\n@KWebViewDsl\nfun <T : Any> ViewCollection<in SelectView<T>>.selectView(dataSet: List<T>, initValue: T, transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(dataSet, initValue, transform).also(this::append).also(init)\n\n@KWebViewDsl\nfun <T : Any> ViewCollection<in SelectView<T>>.selectView(dataSet: List<T>, property: ReadOnlyProperty<T>, transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(dataSet, property.value, transform).apply { bind(property) }.also(this::append).also(init)\n\n@KWebViewDsl\nfun <T : Any> ViewCollection<in SelectView<T>>.selectView(dataSet: List<T>, property: Property<T>, transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(dataSet, property.value, transform).apply { bind(property) }.also(this::append).also(init)\n\n\n@KWebViewDsl\ninline fun <reified T : Enum<T>> ViewCollection<in SelectView<T>>.selectView(initValue: T, noinline transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(enumValues<T>().toList(), initValue, transform).also(this::append).also(init)\n\n@KWebViewDsl\ninline fun <reified T : Enum<T>> ViewCollection<in SelectView<T>>.selectView(property: ReadOnlyProperty<T>, noinline transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(enumValues<T>().toList(), property.value, transform).apply { bind(property) }.also(this::append).also(init)\n\n@KWebViewDsl\ninline fun <reified T : Enum<T>> ViewCollection<in SelectView<T>>.selectView(property: Property<T>, noinline transform: (T) -> String = { it.toString() }, init: SelectView<T>.() -> Unit = {}) =\n        SelectView(enumValues<T>().toList(), property.value, transform).apply { bind(property) }.also(this::append).also(init)\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLTableElement\n\nclass Table() : ViewCollection<View>(createHtmlView<HTMLTableElement>()) {\n    override val html = super.html as HTMLTableElement\n}\n\n@KWebViewDsl\nfun ViewCollection<in Table>.table(vararg classes: String, init: Table.() -> Unit = {}): Table {\n    val view = Table()\n    for (c in classes) {\n        view.classList += c\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLTableCaptionElement\n\nclass TableCaption() : ViewCollection<View>(createHtmlView<HTMLTableCaptionElement>(\"caption\")) {\n    override val html = super.html as HTMLTableCaptionElement\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableCaption>.caption(init: TableCaption.() -> Unit = {}): TableCaption {\n    val view = TableCaption()\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.*\nimport org.w3c.dom.HTMLTableCellElement\n\nclass TableCell(val isHead: Boolean) :\n        ViewCollection<View>(createHtmlView<HTMLTableCellElement>(if (isHead) \"th\" else \"td\")) {\n    override val html = super.html as HTMLTableCellElement\n\n    private var colSpanInternal by AttributeDelegate(\"colspan\")\n    var colSpan: Int?\n        get() = colSpanInternal?.toIntOrNull()\n        set(value) {\n            colSpanInternal = value?.toString()\n        }\n\n    private var rowSpanInternal by AttributeDelegate(\"rowspan\")\n    var rowSpan: Int?\n        get() = rowSpanInternal?.toIntOrNull()\n        set(value) {\n            rowSpanInternal = value?.toString()\n        }\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableCell>.cell(colSpan: Int? = null, init: TableCell.() -> Unit = {}): TableCell {\n    val view = TableCell(false)\n    view.colSpan = colSpan\n    append(view)\n    init(view)\n    return view\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableCell>.head(colSpan: Int? = null, init: TableCell.() -> Unit = {}): TableCell {\n    val view = TableCell(true)\n    view.colSpan = colSpan\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLTableRowElement\n\nclass TableRow() : ViewCollection<TableCell>(createHtmlView<HTMLTableRowElement>(\"tr\")) {\n    override val html = super.html as HTMLTableRowElement\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableRow>.row(vararg classes: String, init: TableRow.() -> Unit = {}): TableRow {\n    val view = TableRow()\n    for (c in classes) {\n        view.classList += c\n    }\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLTableSectionElement\n\nclass TableSection(val type: Type) : ViewCollection<TableRow>(createHtmlView<HTMLTableSectionElement>(type.tagName)) {\n    override val html = super.html as HTMLTableSectionElement\n\n    enum class Type(val tagName: String) {\n        THEAD(\"thead\"),\n        TBODY(\"tbody\"),\n        TFOOT(\"tfoot\")\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableSection>.thead(init: TableSection.() -> Unit = {}): TableSection {\n    val view = TableSection(TableSection.Type.THEAD)\n    append(view)\n    init(view)\n    return view\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableSection>.tbody(init: TableSection.() -> Unit = {}): TableSection {\n    val view = TableSection(TableSection.Type.TBODY)\n    append(view)\n    init(view)\n    return view\n}\n\n@KWebViewDsl\nfun ViewCollection<in TableSection>.tfoot(init: TableSection.() -> Unit = {}): TableSection {\n    val view = TableSection(TableSection.Type.TFOOT)\n    append(view)\n    init(view)\n    return view\n}\n","package de.westermann.kwebview.components\n\nimport de.westermann.kobserve.Property\nimport de.westermann.kobserve.ReadOnlyProperty\nimport de.westermann.kobserve.property.property\nimport de.westermann.kwebview.KWebViewDsl\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.createHtmlView\nimport org.w3c.dom.HTMLSpanElement\n\n/**\n * Represents a html span element.\n *\n * @author lars\n */\nclass TextView(\n    value: String = \"\"\n) : View(createHtmlView<HTMLSpanElement>()) {\n\n    override val html = super.html as HTMLSpanElement\n\n    fun bind(property: ReadOnlyProperty<String>) {\n        textProperty.bind(property)\n    }\n\n    fun unbind() {\n        textProperty.unbind()\n    }\n\n    var text: String\n        get() = html.textContent ?: \"\"\n        set(value) {\n            html.textContent = value\n            textProperty.invalidate()\n        }\n\n    val textProperty: Property<String> = property(this::text)\n\n    init {\n        text = value\n    }\n}\n\n@KWebViewDsl\nfun ViewCollection<in TextView>.textView(text: String = \"\", init: TextView.() -> Unit = {}) =\n    TextView(text).also(this::append).also(init)\n\n@KWebViewDsl\nfun ViewCollection<in TextView>.textView(text: ReadOnlyProperty<String>, init: TextView.() -> Unit = {}) =\n    TextView(text.value).also(this::append).also { it.bind(text) }.also(init)\n","package de.westermann.kwebview.extra\n\nimport de.westermann.kobserve.list.ObservableReadOnlyList\nimport de.westermann.kwebview.View\nimport de.westermann.kwebview.ViewCollection\nimport de.westermann.kwebview.async\n\nfun <T, V : View> ViewCollection<in V>.listFactory(\n    list: ObservableReadOnlyList<T>,\n    factory: (T) -> V,\n    animateAdd: Int? = null,\n    animateRemove: Int? = null\n) {\n    for (element in list) {\n        +factory(element)\n    }\n    list.onAdd { (index, element) ->\n        val view = factory(element)\n        add(index, view)\n\n        if (animateAdd != null) {\n            classList += \"animate-add\"\n            view.classList += \"active\"\n\n            async(animateAdd) {\n                classList -= \"animate-add\"\n                view.classList -= \"active\"\n            }\n        }\n    }\n    list.onRemove { (index) ->\n        @Suppress(\"UNCHECKED_CAST\") val view = this[index] as V\n\n        if (animateRemove == null) {\n            remove(view)\n        } else {\n            classList += \"animate-remove\"\n            view.classList += \"active\"\n\n            async(animateRemove) {\n                classList -= \"animate-remove\"\n                view.classList -= \"active\"\n                remove(view)\n            }\n        }\n    }\n    list.onUpdate { (oldIndex, newIndex, element) ->\n        removeAt(oldIndex)\n        add(newIndex, factory(element))\n    }\n}\n\nfun <V : View> ViewCollection<in V>.listFactory(\n    list: ObservableReadOnlyList<V>,\n    animateAdd: Int? = null,\n    animateRemove: Int? = null\n) = listFactory(\n    list,\n    { it },\n    animateAdd,\n    animateRemove\n)","package de.westermann.kwebview\n\nimport de.westermann.kobserve.property.mapBinding\nimport de.westermann.kobserve.property.property\nimport kotlin.browser.window\n\n@Suppress(\"ClassName\")\nobject i18n {\n    private val data: MutableMap<String, Locale> = mutableMapOf()\n\n    private var fallbackLocale: Locale = i18n.Locale.EMPTY\n\n    val localeProperty = property(Locale.EMPTY)\n    var locale by localeProperty\n\n    val availableLocales: List<Locale>\n        get() = data.values.sortedBy { it.id }\n\n\n    fun register(id: String, name: String, path: String, fallback: Boolean = false) {\n        val locale = Locale(id, name, path, fallback)\n\n        if (fallback) {\n            fallbackLocale = locale\n            localeProperty.invalidate()\n        }\n\n        data[id] = locale\n\n        window.fetch(path).then {\n            it.json()\n        }.then {\n            locale.json = it\n            locale.isLoaded = true\n        }.catch {\n            throw it\n        }\n    }\n\n    val isReady: Boolean\n        get() = data.values.all { it.isLoaded }\n\n    fun load(id: String, block: () -> Unit) {\n        fun ready() {\n            if (isReady) {\n                locale = data[id] ?: fallbackLocale\n                block()\n            } else {\n                async(50) { ready() }\n            }\n        }\n        ready()\n    }\n\n    private fun findKey(locale: Locale, key: String): dynamic {\n        val keys = key.split(\".\")\n\n        var result = locale.json\n        for (k in keys) {\n            if (result.hasOwnProperty(k) as Boolean) {\n                result = result[k]\n            } else {\n                return undefined\n            }\n        }\n\n        return result\n    }\n\n    private fun findKey(key: String): dynamic {\n        var result = findKey(locale, key)\n\n        if (result == undefined) {\n            result = findKey(fallbackLocale, key)\n        }\n\n        if (result == undefined) {\n            console.warn(\"Cannot translate key '$key'!\")\n            return key\n        } else {\n            return result\n        }\n    }\n\n    private fun replace(str: String, arguments: List<Pair<String?, Any?>>): String {\n        val unnamed = arguments.filter { it.first == null }.map { it.second }\n        val named = arguments.mapNotNull { it.first?.to(it.second) }\n\n        var s = str\n\n        for ((key, replacement) in named) {\n            s = s.replace(\"{$key}\", replacement?.toString() ?: \"null\")\n        }\n\n        for (replacement in unnamed) {\n            if (s.contains(\"{}\")) {\n                s = s.replaceFirst(\"{}\", replacement?.toString() ?: \"null\")\n            }\n        }\n\n        return s\n    }\n\n    fun t(key: String, arguments: List<Pair<String?, Any?>>): String {\n        return replace(findKey(key).toString(), arguments)\n    }\n\n    fun t(count: Number, key: String, arguments: List<Pair<String?, Any?>>): String {\n        val json = findKey(key)\n        if (count.toDouble() == 0.0 && json.hasOwnProperty(\"zero\") as Boolean) {\n            return replace(json.zero.toString(), arguments)\n        } else if (count.toDouble() == 1.0 && json.hasOwnProperty(\"one\") as Boolean) {\n            return replace(json.one.toString(), arguments)\n        }\n\n        return if (json.hasOwnProperty(\"many\") as Boolean)\n            replace(json.many.toString(), arguments)\n        else {\n            replace(json.toString(), arguments)\n        }\n\n    }\n\n    data class Locale(\n            val id: String,\n            val name: String,\n            val path: String,\n            val fallback: Boolean\n    ) {\n        var isLoaded = false\n        var json: dynamic = js(\"{}\")\n\n        companion object {\n            val EMPTY = Locale(\"__\", \"_\", \"\", false).apply { isLoaded = true }\n        }\n    }\n}\n\nfun t(key: String) = i18n.localeProperty.mapBinding { i18n.t(key, emptyList()) }\n\nfun t(key: String, vararg arguments: Any?) = i18n.localeProperty.mapBinding { i18n.t(key, arguments.map { null to it }) }\n\nfun t(key: String, vararg arguments: Pair<String?, Any?>) = i18n.localeProperty.mapBinding { i18n.t(key, arguments.asList()) }\n\nfun t(count: Number, key: String) = i18n.localeProperty.mapBinding { i18n.t(count, key, emptyList()) }\n\nfun t(count: Number, key: String, vararg arguments: Any?) = i18n.localeProperty.mapBinding { i18n.t(count, key, arguments.map { null to it }) }\n\nfun t(count: Number, key: String, vararg arguments: Pair<String?, Any?>) = i18n.localeProperty.mapBinding { i18n.t(count, key, arguments.asList()) }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport kotlin.internal.LowPriorityInOverloadResolution\n\n/**\n * Exposes the JavaScript [Promise object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic open external class Promise<out T>(executor: (resolve: (T) -> Unit, reject: (Throwable) -> Unit) -> Unit) {\n    @LowPriorityInOverloadResolution\n    public open fun <S> then(onFulfilled: ((T) -> S)?): Promise<S>\n\n    @LowPriorityInOverloadResolution\n    public open fun <S> then(onFulfilled: ((T) -> S)?, onRejected: ((Throwable) -> S)?): Promise<S>\n\n    public open fun <S> catch(onRejected: (Throwable) -> S): Promise<S>\n\n    companion object {\n        public fun <S> all(promise: Array<out Promise<S>>): Promise<Array<out S>>\n\n        public fun <S> race(promise: Array<out Promise<S>>): Promise<S>\n\n        public fun reject(e: Throwable): Promise<Nothing>\n\n        public fun <S> resolve(e: S): Promise<S>\n        public fun <S> resolve(e: Promise<S>): Promise<S>\n    }\n}\n\n// It's workaround for KT-19672 since we can fix it properly until KT-11265 isn't fixed.\ninline fun <T, S> Promise<Promise<T>>.then(\n    noinline onFulfilled: ((T) -> S)?\n): Promise<S> {\n    return this.unsafeCast<Promise<T>>().then(onFulfilled)\n}\n\ninline fun <T, S> Promise<Promise<T>>.then(\n    noinline onFulfilled: ((T) -> S)?,\n    noinline onRejected: ((Throwable) -> S)?\n): Promise<S> {\n    return this.unsafeCast<Promise<T>>().then(onFulfilled, onRejected)\n}\n"],"names":[],"mappings":"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GiB,Q;MAAL,QAAK,OAAL,SAAK,YAAL,mBAAoB,E;IAApB,C;;MAEJ,wBAAmB,K;MACnB,iBAAa,a;IACjB,C;;;IAQJ,e;IAAgB,sB;IAAhB,iB;IAAA,uB;EAAe,C;;IAAf,sC;IAAA,C;IACI,qDAAG,IAAH,C;IACA,qDAAG,IAAH,C;IACA,qDAAG,IAAH,C;IACA,qDAAG,IAAH,C;IACA,qDAAG,IAAH,C;IACA,qDAAG,IAAH,C;EANJ,C;;;IACI,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;;;;;IANJ,iM;EAAA,C;;;IAAA,a;MAAA,U;QAAA,oC;MAAA,U;QAAA,oC;MAAA,U;QAAA,oC;MAAA,U;QAAA,oC;MAAA,U;QAAA,oC;MAAA,U;QAAA,oC;MAAA,QAAA,mF;;EAAA,C;;;;;;;;IAW6E,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IzCoCJ,oD;aDtFJ,8B;I0CkD4C,CzCoCxC,YyCpCwC,SzCoCxC,GAAM,WAAN,C;IyCpC2D,IzCoC3D,CACO,WADP,C;IyCpCI,OzCqCG,W;EyCrCH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IzCgCJ,oD;aDtFJ,8B;I0CsDkD,CzCgC9C,YyChC8C,SzCgC9C,GAAM,WAAN,C;IACO,WyCjC+D,mB;IAAkB,IzCgCxF,CACO,WADP,C;IyChCI,OzCiCG,W;EyCjCH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IzC4BJ,oD;aDtFJ,8B;I0C0D4C,CzC4BxC,YyC5BwC,SzC4BxC,GAAM,WAAN,C;IyC5B2D,IzC4B3D,CACO,WADP,C;IyC5BI,OzC6BG,W;EyC7BH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IzCwBJ,oD;aDtFJ,8B;I0C8DkD,CzCwB9C,YyCxB8C,SzCwB9C,GAAM,WAAN,C;IACO,WyCzB+D,mB;IAAkB,IzCwBxF,CACO,WADP,C;IyCxBI,OzCyBG,W;EyCzBH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IzCoBJ,oD;aDtFJ,8B;I0CkE4C,CzCoBxC,YyCpBwC,SzCoBxC,GAAM,WAAN,C;IyCpB2D,IzCoB3D,CACO,WADP,C;IyCpBI,OzCqBG,W;EyCrBH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IzCgBJ,oD;aDtFJ,8B;I0CsEkD,CzCgB9C,YyChB8C,SzCgB9C,GAAM,WAAN,C;IACO,WyCjB+D,mB;IAAkB,IzCgBxF,CACO,WADP,C;IyChBI,OzCiBG,W;EyCjBH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IzCYJ,oD;aDtFJ,8B;I0C0E4C,CzCYxC,YyCZwC,SzCYxC,GAAM,WAAN,C;IyCZ2D,IzCY3D,CACO,WADP,C;IyCZI,OzCaG,W;EyCbH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IzCQJ,oD;aDtFJ,8B;I0C8EkD,CzCQ9C,YyCR8C,SzCQ9C,GAAM,WAAN,C;IACO,WyCT+D,mB;IAAkB,IzCQxF,CACO,WADP,C;IyCRI,OzCSG,W;EyCTH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IzCIJ,oD;aDtFJ,8B;I0CkF4C,CzCIxC,YyCJwC,SzCIxC,GAAM,WAAN,C;IyCJ2D,IzCI3D,CACO,WADP,C;IyCJI,OzCKG,W;EyCLH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IzCAJ,oD;aDtFJ,8B;I0CsFkD,CzCA9C,YyCA8C,SzCA9C,GAAM,WAAN,C;IACO,WyCD+D,mB;IAAkB,IzCAxF,CACO,WADP,C;IyCAI,OzCCG,W;EyCDH,C;;IAGyE,W;EAAA,C;;IAA/C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA2B,S;IACzC,kBAA/B,2CAAyB,IAAzB,C;IzCJJ,oD;aDtFJ,8B;I0C0F4C,CzCJxC,YyCIwC,SzCJxC,GAAM,WAAN,C;IyCI2D,IzCJ3D,CACO,WADP,C;IyCII,OzCHG,W;EyCGH,C;;IAGsF,W;EAAA,C;;IAA5B,oB;MAAA,OAA2B,W;IAChD,kBAArC,2CAAyB,IAAK,MAA9B,C;IzCRJ,oD;aDtFJ,8B;I0C8FkD,CzCR9C,YyCQ8C,SzCR9C,GAAM,WAAN,C;IACO,WyCO+D,mB;IAAkB,IzCRxF,CACO,WADP,C;IyCQI,OzCPG,W;EyCOH,C;;;;;;;;;Ib1EG,Q;IATP,W;IACA,IAF+D,IAE3D,QAAJ,C;MACI,UAH2D,I;;;MAKhC,aAAR,kCAAG,KLoCsC,c;MKpC5D,UjCFoC,WiCEa,qBjCFb,CCqqB8C,yBgCnqBA,IhCmqBA,C;MgClqBlF,IAAY,QAAR,OAAQ,CAAZ,C;QACI,UAAU,K;;;IcDQ,gBdInB,cAAS,OAAT,QAAS,eAAc,OAAd,CAAT,sCcJmB,C;IAEN,IAAM,M;IAA1B,sBAAoB,cAAM,wDAAN,wC;IAUpB,sBAAkB,I;IAUlB,oBAAoC,kE;aAAe,c;IAAN,CAAT,YAAS,IAAT,+B;MAAe,sB;IAAN,CAAT,YAAS,IAAT,G;IAGhC,YAAY,I;EAzBN,C;;;MAEV,0B;IAAA,C;;;IAGI,iBAAa,cAAK,QAAL,C;EACjB,C;;IAGI,iBAAa,S;EACjB,C;;;MAEA,0B;IAAA,C;;MAEQ,sBAAQ,K;MACH,MAAL,SAAK,C;MACL,kB;QACI,SAAK,aADT,KACwB,QAAf,C;;MAET,iBAAa,a;IACjB,C;;;;;;;;IAUkF,W;EAAA,C;;IAAjD,oB;MAAA,OAAc,I;IAAM,oB;MAAA,OAA4B,e;IAClE,kBAAf,aAAS,IAAT,C;I1CuCJ,oD;aDtFJ,8B;I2C+C4B,C1CuCxB,Y0CvCwB,S1CuCxB,GAAM,WAAN,C;I0CvC2C,I1CuC3C,CACO,WADP,C;I0CvCI,O1CwCG,W;E0CxCH,C;;IAG6F,W;EAAA,C;;IAA7B,oB;MAAA,OAA4B,iB;IACvE,kBAArB,aAAS,IAAK,MAAd,C;I1CmCJ,oD;aDtFJ,8B;I2CmDkC,C1CmC9B,Y0CnC8B,S1CmC9B,GAAM,WAAN,C;IACO,W0CpC+C,mB;IAAkB,I1CmCxE,CACO,WADP,C;I0CnCI,O1CoCG,W;E0CpCH,C;;Id/BG,Q;IATP,W;IACA,IeHsC,KfGlC,QAAJ,C;MACI,UeJkC,K;;;MfMP,aAAR,mCAAG,KLoCsC,c;MKpC5D,UjCFoC,WiCEa,qBjCFb,CCqqB8C,yBgCnqBA,IhCmqBA,C;MgClqBlF,IAAY,QAAR,OAAQ,CAAZ,C;QACI,UAAU,K;;;IeRlB,gBfWO,cAAS,OAAT,QAAS,eAAc,OAAd,CAAT,uCeXP,C;IAEoB,IAAM,M;IAA1B,sBAAoB,cAAM,wDAAN,yC;IAiBpB,sBAAuC,oE;aAAe,gB;IAAN,CAAT,YAAS,IAAT,+B;MAAe,wB;IAAN,CAAT,YAAS,IAAT,G;IAGvC,qBAAW,sBAAkB,KAAlB,C;IAGP,cAAS,G;EA3BF,C;;;MAIX,0B;IAAA,C;;;IAGI,mBAAe,cAAK,QAAL,C;EACnB,C;;IAGI,mBAAe,S;EACnB,C;;;MAGY,OAAA,SAAK,I;IAAL,C;;MAEJ,gBAAW,K;MACX,mBAAe,a;IACnB,C;;;;;aAKJ,iE;IAAA,C;;MAAA,kE5C/BJ,G4C+BI,C;IAAA,C;;;;;;;;IAQuF,W;EAAA,C;;IAAhD,mB;MAAA,MAAc,E;IAAI,oB;MAAA,OAA6B,gB;IACnE,kBAAf,cAAU,GAAV,C;I3C8CJ,oD;aDtFJ,8B;I4CwC4B,C3C8CxB,Y2C9CwB,S3C8CxB,GAAM,WAAN,C;I2C9C2C,I3C8C3C,CACO,WADP,C;I2C9CI,O3C+CG,W;E2C/CH,C;;IAGgG,W;EAAA,C;;IAA9B,oB;MAAA,OAA6B,kB;IAC1E,kBAArB,cAAU,GAAI,MAAd,C;I3C0CJ,oD;aDtFJ,8B;I4C4CkC,C3C0C9B,Y2C1C8B,S3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,qC;MAAA,gB;QAAA,uC;MAAA,QAAA,gF;;EAAA,C;;;IAW4F,W;EAAA,C;;IAAjD,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA6B,gB;IACnD,kBAAhC,4CAA0B,IAA1B,C;I5CjDJ,oD;aDtFJ,8B;I6CuI6C,C5CjDzC,Y4CiDyC,S5CjDzC,GAAM,WAAN,C;I4CiD4D,I5CjD5D,CACO,WADP,C;I4CiDI,O5ChDG,W;E4CgDH,C;;IAGiG,W;EAAA,C;;IAA9B,oB;MAAA,OAA6B,kB;IAC1D,kBAAtC,4CAA0B,IAAK,MAA/B,C;I5CrDJ,oD;aDtFJ,8B;I6C2ImD,C5CrD/C,Y4CqD+C,S5CrD/C,GAAM,WAAN,C;IACO,W4CoDgE,mB;IAAkB,I5CrDzF,CACO,WADP,C;I4CqDI,O5CpDG,W;E4CoDH,C;;IAGyF,W;EAAA,C;;IAA9B,oB;MAAA,OAA6B,kB;IAClD,kBAAtC,4CAA0B,IAAK,MAA/B,C;I5CzDJ,oD;aDtFJ,8B;I6C+ImD,C5CzD/C,Y4CyD+C,S5CzD/C,GAAM,WAAN,C;IACO,W4CwDgE,mB;IAAkB,I5CzDzF,CACO,WADP,C;I4CyDI,O5CxDG,W;E4CwDH,C;;IAGmG,W;EAAA,C;;IAA9B,oB;MAAA,OAA6B,kB;IAC5D,kBAAtC,4CAA0B,IAAK,MAA/B,C;I5C7DJ,oD;aDtFJ,8B;I6CmJmD,C5C7D/C,Y4C6D+C,S5C7D/C,GAAM,WAAN,C;IACO,W4C4DgE,mB;IAAkB,I5C7DzF,CACO,WADP,C;I4C6DI,O5C5DG,W;E4C4DH,C;;IAIsH,W;EAAA,C;;IAAnF,oB;MAAA,mC;IAAkC,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAA6B,kB;IAC/F,kBAAtB,cAAU,IAAV,EAAgB,IAAhB,C;I5ClEJ,oD;aDtFJ,8B;I6CwJmC,C5ClE/B,Y4CkE+B,S5ClE/B,GAAM,WAAN,C;I4CkEkD,I5ClElD,CACO,WADP,C;I4CkEI,O5CjEG,W;E4CiEH,C;;IAGmI,W;EAAA,C;;IAAhG,oB;MAAA,mC;IAAkE,oB;MAAA,OAA6B,kB;IACtG,kBAA5B,cAAU,IAAV,EAAgB,IAAK,MAArB,C;I5CtEJ,oD;aDtFJ,8B;I6C4JyC,C5CtErC,Y4CsEqC,S5CtErC,GAAM,WAAN,C;IACO,W4CqEsD,mB;IAAkB,I5CtE/E,CACO,WADP,C;I4CsEI,O5CrEG,W;E4CqEH,C;;IAG2H,W;EAAA,C;;IAAxF,oB;MAAA,mC;IAA0D,oB;MAAA,OAA6B,kB;IAC9F,kBAA5B,cAAU,IAAV,EAAgB,IAAK,MAArB,C;I5C1EJ,oD;aDtFJ,8B;I6CgKyC,C5C1ErC,Y4C0EqC,S5C1ErC,GAAM,WAAN,C;IACO,W4CyEsD,mB;IAAkB,I5C1E/E,CACO,WADP,C;I4C0EI,O5CzEG,W;E4CyEH,C;;IAGqI,W;EAAA,C;;IAAlG,oB;MAAA,mC;IAAoE,oB;MAAA,OAA6B,kB;IACxG,kBAA5B,cAAU,IAAV,EAAgB,IAAK,MAArB,C;I5C9EJ,oD;aDtFJ,8B;I6CoKyC,C5C9ErC,Y4C8EqC,S5C9ErC,GAAM,WAAN,C;IACO,W4C6EsD,mB;IAAkB,I5C9E/E,CACO,WADP,C;I4C8EI,O5C7EG,W;E4C6EH,C;;IEtJJ,qB;MAAA,QAAgB,E;IlBMT,Q;IATP,W;IACA,IAF+D,IAE3D,QAAJ,C;MACI,UAH2D,I;;;MAKhC,aAAR,mCAAG,KLoCsC,c;MKpC5D,UjCFoC,WiCEa,qBjCFb,CCqqB8C,yBgCnqBA,IhCmqBA,C;MgClqBlF,IAAY,QAAR,OAAQ,CAAZ,C;QACI,UAAU,K;;;IkBFlB,gBlBKO,cAAS,OAAT,QAAS,eAAc,OAAd,CAAT,uCkBLP,C;IAEoB,IAAM,M;IAA1B,qBAAoB,cAAM,wDAAN,yC;IAiBpB,oBAAqC,kE;aAAe,c;IAAN,CAAT,YAAS,IAAT,+B;MAAe,sB;IAAN,CAAT,YAAS,IAAT,G;IAGjC,YAAO,K;IAEP,YAAa,kBAAS,IAAT,C;EA3BV,C;;;MAKP,yB;IAAA,C;;;IAGI,iBAAa,cAAK,QAAL,C;EACjB,C;;IAGI,iBAAa,S;EACjB,C;;;MAGiB,Q;MAAL,QAAK,OAAL,SAAK,YAAL,mBAAoB,E;IAApB,C;;MAEJ,wBAAmB,K;MACnB,iBAAa,a;IACjB,C;;;;;;;;IAYoG,W;EAAA,C;;IAA7C,oB;MAAA,OAAe,E;IAAI,oB;MAAA,OAAyB,Y;IAC7E,kBAA1B,UAAM,YAAN,EAAoB,IAApB,C;I9CyCA,oD;aDtFJ,8B;I+C6CmC,C9CyC/B,Y8CzC+B,S9CyC/B,GAAM,WAAN,C;I8CzCkD,I9CyClD,CACO,WADP,C;I8CzCA,O9C0CO,W;E8C1CP,C;;IAGqH,W;EAAA,C;;IAA1B,oB;MAAA,OAAyB,c;IACpF,kBAAhC,UAAM,YAAN,EAAoB,IAAK,MAAzB,C;I9CqCA,oD;aDtFJ,8B;I+CiDyC,C9CqCrC,Y8CrCqC,S9CqCrC,GAAM,WAAN,C;IACO,W8CtCsD,mB;IAAkB,I9CqC/E,CACO,WADP,C;I8CrCA,O9CsCO,W;E8CtCP,C;;IlB7BO,Q;IATP,W;IACA,ImBAgF,GnBA5E,QAAJ,C;MACI,UmBD4E,G;;;MnBGjD,aAAR,oCAAG,KLoCsC,c;MKpC5D,UjCFoC,WiCEa,qBjCFb,CCqqB8C,yBgCnqBA,IhCmqBA,C;MgClqBlF,IAAY,QAAR,OAAQ,CAAZ,C;QACI,UAAU,K;;;ImBLO,0BnBQlB,cAAS,OAAT,QAAS,eAAc,OAAd,CAAT,wCmBRkB,C;IAEL,IAAM,M;IAA1B,sBAAoB,cAAM,kEAAN,0C;IAehB,cAAc,M;EAjBZ,C;;;MAEN,0B;IAAA,C;;;;MAGY,OAAA,SAAK,Y;IAAL,C;;MAEJ,wBAAmB,K;IACvB,C;;;;MAGQ,OAAA,SAAK,K;IAAL,C;;MAEJ,iBAAY,K;IAChB,C;;;;;;;;IAQwF,W;EAAA,C;;IAA/C,oB;MAAA,OAAgB,I;IAAM,oB;MAAA,OAAwB,W;IAC3F,WAAW,SAAK,MAAL,C;IACX,IAAI,YAAJ,C;MACI,YAAY,I;;IAEhB,yBAAO,IAAP,C;IACA,KAAK,IAAL,C;IACA,OAAO,I;EACX,C;;ICtCA,e;IAGwB,kC;IAHxB,iB;IAAA,uB;EAGuB,C;;IAHvB,sC;IAAA,C;IAII,uEAAY,aAAZ,C;IACA,+DAAQ,SAAR,C;IACA,yEAAa,eAAb,C;IACA,2EAAc,eAAd,C;IACA,uEAAY,aAAZ,C;IACA,2EAAc,eAAd,C;IACA,qEAAW,YAAX,C;IACA,+EAAgB,iBAAhB,C;IACA,6FAAuB,wBAAvB,C;IACA,uEAAY,aAAZ,C;IACA,8EAAe,gBAAf,C;IACA,wDAAI,KAAJ,C;IACA,wDAAI,KAAJ,C;IACA,wEAAY,aAAZ,C;IACA,oEAAU,WAAV,C;IACA,oEAAU,WAAV,C;IACA,gEAAQ,SAAR,C;IACA,sEAAW,YAAX,C;IACA,sFAAmB,oBAAnB,C;IACA,0EAAa,eAAb,C;IACA,oFAAkB,mBAAlB,C;IACA,4EAAc,eAAd,C;IACA,0EAAa,eAAb,C;IACA,8DAAO,QAAP,C;IACA,oFAAkB,mBAAlB,C;IACA,kGAAyB,0BAAzB,C;IACA,4GAA8B,+BAA9B,C;IACA,sGAA2B,4BAA3B,C;IACA,wGAA4B,6BAA5B,C;IACA,0GAA6B,8BAA7B,C;IACA,sGAA2B,4BAA3B,C;IACA,wGAA4B,6BAA5B,C;IACA,wFAAoB,qBAApB,C;IACA,4FAAsB,uBAAtB,C;IACA,gEAAQ,SAAR,C;IACA,gFAAgB,iBAAhB,C;IACA,4DAAM,OAAN,C;IACA,oEAAU,WAAV,C;IACA,oEAAU,WAAV,C;IACA,kEAAS,UAAT,C;IACA,4DAAM,OAAN,C;IACA,4EAAc,eAAd,C;IACA,gEAAQ,SAAR,C;IACA,gEAAQ,SAAR,C;IACA,0EAAa,eAAb,C;IACA,0DAAK,MAAL,C;IACA,gEAAQ,SAAR,C;IACA,sEAAW,YAAX,C;IACA,8EAAe,gBAAf,C;IACA,gFAAgB,iBAAhB,C;IACA,8FAAuB,wBAAvB,C;IACA,4EAAc,eAAd,C;IACA,4EAAc,eAAd,C;IACA,0EAAa,eAAb,C;IACA,oEAAU,WAAV,C;IACA,0EAAa,eAAb,C;IACA,sEAAW,YAAX,C;IACA,sEAAW,YAAX,C;IACA,8EAAe,gBAAf,C;IACA,gFAAgB,iBAAhB,C;IACA,oFAAkB,mBAAlB,C;IACA,wFAAoB,qBAApB,C;IACA,0FAAqB,sBAArB,C;IACA,oEAAU,WAAV,C;IACA,gFAAgB,iBAAhB,C;IACA,wEAAY,aAAZ,C;IACA,0EAAa,eAAb,C;IACA,sEAAW,YAAX,C;IACA,sEAAW,YAAX,C;IACA,oEAAU,WAAV,C;IACA,kEAAS,UAAT,C;IACA,oEAAU,WAAV,C;IACA,8DAAO,QAAP,C;IACA,4EAAc,eAAd,C;IACA,4FAAsB,uBAAtB,C;IACA,0EAAa,eAAb,C;IACA,wEAAY,aAAZ,C;IACA,gFAAgB,iBAAhB,C;IACA,0EAAa,eAAb,C;IACA,kEAAS,UAAT,C;IACA,4DAAM,OAAN,C;IACA,oEAAU,WAAV,C;IACA,gFAAgB,iBAAhB,C;IACA,wFAAoB,qBAApB,C;IACA,sFAAmB,oBAAnB,C;IACA,wFAAoB,qBAApB,C;IACA,4EAAc,eAAd,C;IACA,wEAAY,aAAZ,C;IACA,kEAAS,UAAT,C;IACA,gEAAQ,SAAR,C;IACA,0DAAK,MAAL,C;IACA,kEAAS,UAAT,C;IACA,gFAAgB,iBAAhB,C;IACA,sEAAW,YAAX,C;IACA,4EAAc,eAAd,C;IACA,0EAAa,eAAb,C;IACA,0EAAa,eAAb,C;IACA,oFAAkB,mBAAlB,C;IACA,0EAAa,eAAb,C;IACA,wEAAY,aAAZ,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,uEAAW,YAAX,C;IACA,iFAAgB,iBAAhB,C;IACA,uFAAmB,oBAAnB,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,iFAAgB,iBAAhB,C;IACA,iFAAgB,iBAAhB,C;IACA,+EAAe,gBAAf,C;IACA,qFAAkB,mBAAlB,C;IACA,2EAAa,eAAb,C;IACA,6DAAM,OAAN,C;IACA,2EAAa,eAAb,C;IACA,uEAAW,YAAX,C;IACA,6DAAM,OAAN,C;IACA,uEAAW,YAAX,C;IACA,mEAAS,UAAT,C;IACA,iFAAgB,iBAAhB,C;IACA,+DAAO,QAAP,C;IACA,2DAAK,MAAL,C;IACA,2DAAK,MAAL,C;IACA,mEAAS,UAAT,C;IACA,qEAAU,WAAV,C;IACA,uEAAW,YAAX,C;IACA,yEAAY,aAAZ,C;IACA,2FAAqB,sBAArB,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,+DAAO,QAAP,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,+DAAO,QAAP,C;IACA,6EAAc,eAAd,C;IACA,iFAAgB,iBAAhB,C;IACA,yEAAY,aAAZ,C;IACA,+DAAO,QAAP,C;IACA,2DAAK,MAAL,C;IACA,+EAAe,gBAAf,C;IACA,yFAAoB,qBAApB,C;IACA,qFAAkB,mBAAlB,C;IACA,+EAAe,gBAAf,C;IACA,2DAAK,MAAL,C;IACA,yEAAY,aAAZ,C;IACA,yFAAoB,qBAApB,C;IACA,6DAAM,cAAN,C;IACA,qEAAU,WAAV,C;IACA,iGAAwB,yBAAxB,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,+EAAe,gBAAf,C;IACA,6DAAM,OAAN,C;IACA,6DAAM,OAAN,C;IACA,qEAAU,WAAV,C;IACA,6DAAM,OAAN,C;IACA,+EAAe,gBAAf,C;IACA,6DAAM,OAAN,C;IACA,2EAAa,eAAb,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,qEAAU,WAAV,C;IACA,yEAAY,aAAZ,C;IACA,2EAAa,eAAb,C;IACA,2DAAK,MAAL,C;IACA,yEAAY,aAAZ,C;IACA,2FAAqB,sBAArB,C;IACA,uEAAW,YAAX,C;IACA,mEAAS,UAAT,C;IACA,iEAAQ,SAAR,C;IACA,iEAAQ,SAAR,C;IACA,+EAAe,gBAAf,C;IACA,mEAAS,UAAT,C;IACA,yFAAoB,qBAApB,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,mEAAS,UAAT,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,6EAAc,eAAd,C;IACA,6EAAc,eAAd,C;IACA,iGAAwB,yBAAxB,C;IACA,qEAAU,WAAV,C;IACA,+DAAO,UAAP,C;IACA,qFAAkB,mBAAlB,C;IACA,yEAAY,aAAZ,C;IACA,2DAAK,MAAL,C;IACA,qEAAU,WAAV,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,qEAAU,WAAV,C;IACA,+EAAe,gBAAf,C;IACA,6EAAc,eAAd,C;IACA,6EAAc,eAAd,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,qEAAU,WAAV,C;IACA,uEAAW,YAAX,C;IACA,uEAAW,YAAX,C;IACA,+DAAO,QAAP,C;IACA,+DAAO,QAAP,C;IACA,+EAAe,gBAAf,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,iFAAgB,iBAAhB,C;IACA,iEAAQ,SAAR,C;IACA,iFAAgB,iBAAhB,C;IACA,+EAAe,gBAAf,C;IACA,uEAAW,YAAX,C;IACA,iEAAQ,SAAR,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,YAAX,C;IACA,iEAAQ,SAAR,C;IACA,uEAAW,YAAX,C;IACA,iFAAgB,iBAAhB,C;IACA,iFAAgB,iBAAhB,C;IACA,+EAAe,gBAAf,C;IACA,+EAAe,gBAAf,C;IACA,uFAAmB,oBAAnB,C;IACA,+EAAe,gBAAf,C;IACA,qFAAkB,mBAAlB,C;IACA,uFAAmB,oBAAnB,C;IACA,iFAAgB,iBAAhB,C;IACA,qEAAU,WAAV,C;IACA,yDAAI,KAAJ,C;IACA,+EAAe,gBAAf,C;IACA,uFAAmB,oBAAnB,C;IACA,uFAAmB,oBAAnB,C;IACA,qFAAkB,mBAAlB,C;IACA,2DAAK,MAAL,C;IACA,+DAAO,QAAP,C;IACA,2DAAK,MAAL,C;IACA,mEAAS,UAAT,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,+DAAO,QAAP,C;IACA,yEAAY,aAAZ,C;IACA,qEAAU,WAAV,C;IACA,yDAAI,KAAJ,C;IACA,2DAAK,MAAL,C;IACA,6EAAc,eAAd,C;IACA,6DAAM,OAAN,C;IACA,6DAAM,OAAN,C;IACA,yFAAoB,qBAApB,C;IACA,qEAAU,WAAV,C;IACA,6DAAM,OAAN,C;IACA,6EAAc,eAAd,C;IACA,yEAAY,aAAZ,C;IACA,uEAAW,YAAX,C;IACA,6DAAM,OAAN,C;IACA,iFAAgB,iBAAhB,C;IACA,uEAAW,YAAX,C;IACA,uEAAW,YAAX,C;IACA,uEAAW,YAAX,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,mEAAS,UAAT,C;IACA,iEAAQ,SAAR,C;IACA,mEAAS,UAAT,C;IACA,+EAAe,gBAAf,C;IACA,+EAAe,gBAAf,C;IACA,iFAAgB,iBAAhB,C;IACA,iFAAgB,iBAAhB,C;IACA,6EAAc,eAAd,C;IACA,qEAAU,WAAV,C;IACA,2DAAK,MAAL,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,mEAAS,UAAT,C;IACA,iFAAgB,iBAAhB,C;IACA,uFAAmB,oBAAnB,C;IACA,+EAAe,gBAAf,C;IACA,2DAAK,MAAL,C;IACA,qEAAU,WAAV,C;IACA,yFAAoB,qBAApB,C;IACA,qEAAU,WAAV,C;IACA,qEAAU,WAAV,C;IACA,uFAAmB,oBAAnB,C;IACA,6EAAc,eAAd,C;IACA,yEAAY,aAAZ,C;IACA,+DAAO,QAAP,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,6EAAc,eAAd,C;IACA,+EAAe,gBAAf,C;IACA,yFAAoB,qBAApB,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,YAAX,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,qFAAkB,mBAAlB,C;IACA,+EAAe,gBAAf,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,2DAAK,MAAL,C;IACA,6DAAM,OAAN,C;IACA,uEAAW,YAAX,C;IACA,qEAAU,WAAV,C;IACA,mEAAS,UAAT,C;IACA,+DAAO,QAAP,C;IACA,yEAAY,aAAZ,C;IACA,+EAAe,gBAAf,C;IACA,2DAAK,MAAL,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,+DAAO,QAAP,C;IACA,yEAAY,aAAZ,C;IACA,6EAAc,eAAd,C;IACA,+EAAe,gBAAf,C;IACA,6EAAc,eAAd,C;IACA,yFAAoB,qBAApB,C;IACA,2FAAqB,sBAArB,C;IACA,qFAAkB,mBAAlB,C;IACA,uFAAmB,oBAAnB,C;IACA,yEAAY,aAAZ,C;IACA,2EAAa,eAAb,C;IACA,qFAAkB,mBAAlB,C;IACA,uFAAmB,oBAAnB,C;IACA,qFAAkB,mBAAlB,C;IACA,+FAAuB,wBAAvB,C;IACA,+FAAuB,wBAAvB,C;IACA,6EAAc,eAAd,C;IACA,yFAAoB,qBAApB,C;IACA,2FAAqB,sBAArB,C;IACA,2FAAqB,sBAArB,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,yEAAY,aAAZ,C;IACA,2FAAqB,sBAArB,C;IACA,yGAA4B,6BAA5B,C;IACA,yGAA4B,6BAA5B,C;IACA,qFAAkB,mBAAlB,C;IACA,6DAAM,OAAN,C;IACA,iEAAQ,SAAR,C;IACA,uEAAW,YAAX,C;IACA,uEAAW,YAAX,C;IACA,qEAAU,WAAV,C;IACA,+EAAe,gBAAf,C;IACA,uEAAW,YAAX,C;IACA,iFAAgB,iBAAhB,C;IACA,qEAAU,WAAV,C;IACA,yEAAY,aAAZ,C;IACA,iEAAQ,SAAR,C;IACA,6DAAM,OAAN,C;IACA,6DAAM,OAAN,C;IACA,iEAAQ,SAAR,C;IACA,iEAAQ,SAAR,C;IACA,yDAAI,KAAJ,C;IACA,yEAAY,aAAZ,C;IACA,qEAAU,WAAV,C;IACA,6EAAc,eAAd,C;IACA,iEAAQ,SAAR,C;IACA,6DAAM,OAAN,C;IACA,mEAAS,UAAT,C;IACA,6DAAM,OAAN,C;IACA,uEAAW,YAAX,C;IACA,mEAAS,UAAT,C;IACA,iEAAQ,SAAR,C;IACA,6DAAM,OAAN,C;IACA,qEAAU,WAAV,C;IACA,uEAAW,YAAX,C;IACA,uDAAG,IAAH,C;IACA,iEAAQ,SAAR,C;IACA,+DAAO,QAAP,C;IACA,uEAAW,YAAX,C;IACA,mEAAS,UAAT,C;IACA,iEAAQ,SAAR,C;IACA,yEAAY,aAAZ,C;IACA,iEAAQ,SAAR,C;IACA,iEAAQ,SAAR,C;IACA,2DAAK,MAAL,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,qEAAU,WAAV,C;IACA,6EAAc,eAAd,C;IACA,iEAAQ,SAAR,C;IACA,2DAAK,MAAL,C;IACA,iEAAQ,SAAR,C;IACA,6DAAM,OAAN,C;IACA,iFAAgB,iBAAhB,C;IACA,+EAAe,gBAAf,C;IACA,2DAAK,MAAL,C;IACA,6DAAM,OAAN,C;IACA,6DAAM,OAAN,C;IACA,uFAAmB,oBAAnB,C;IACA,iFAAgB,iBAAhB,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,6DAAM,OAAN,C;IACA,iGAAwB,yBAAxB,C;IACA,2DAAK,MAAL,C;IACA,2EAAa,eAAb,C;IACA,6DAAM,OAAN,C;IACA,2EAAa,eAAb,C;IACA,+EAAe,gBAAf,C;IACA,qFAAkB,mBAAlB,C;IACA,iFAAgB,iBAAhB,C;IACA,qFAAkB,mBAAlB,C;IACA,yEAAY,aAAZ,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,yDAAI,KAAJ,C;IACA,mEAAS,UAAT,C;IACA,yFAAoB,qBAApB,C;IACA,yFAAoB,qBAApB,C;IACA,2FAAqB,sBAArB,C;IACA,qFAAkB,mBAAlB,C;IACA,uFAAmB,oBAAnB,C;IACA,qFAAkB,mBAAlB,C;IACA,6EAAc,eAAd,C;IACA,iFAAgB,iBAAhB,C;IACA,2EAAa,eAAb,C;IACA,+EAAe,gBAAf,C;IACA,iEAAQ,SAAR,C;IACA,6DAAM,OAAN,C;IACA,6EAAc,eAAd,C;IACA,qEAAU,WAAV,C;IACA,mEAAS,UAAT,C;IACA,+DAAO,QAAP,C;IACA,qFAAkB,mBAAlB,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,qEAAU,WAAV,C;IACA,+DAAO,QAAP,C;IACA,+DAAO,QAAP,C;IACA,2EAAa,eAAb,C;IACA,mEAAS,UAAT,C;IACA,yEAAY,aAAZ,C;IACA,2DAAK,MAAL,C;IACA,yEAAY,aAAZ,C;IACA,6EAAc,eAAd,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,uEAAW,YAAX,C;IACA,yEAAY,aAAZ,C;IACA,2EAAa,eAAb,C;IACA,2DAAK,MAAL,C;IACA,6EAAc,eAAd,C;IACA,2DAAK,MAAL,C;IACA,qEAAU,WAAV,C;IACA,iEAAQ,SAAR,C;IACA,+EAAe,gBAAf,C;IACA,6EAAc,eAAd,C;IACA,qEAAU,WAAV,C;IACA,qEAAU,WAAV,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,iGAAwB,yBAAxB,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,yFAAoB,qBAApB,C;IACA,+EAAe,gBAAf,C;IACA,yEAAY,aAAZ,C;IACA,6FAAsB,uBAAtB,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,YAAX,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,6EAAc,eAAd,C;IACA,+EAAe,gBAAf,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,uEAAW,YAAX,C;IACA,qFAAkB,mBAAlB,C;IACA,iFAAgB,iBAAhB,C;IACA,qEAAU,WAAV,C;IACA,+EAAe,gBAAf,C;IACA,uEAAW,YAAX,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,uFAAmB,oBAAnB,C;IACA,2DAAK,MAAL,C;IACA,qEAAU,WAAV,C;IACA,2EAAa,eAAb,C;IACA,6DAAM,OAAN,C;IACA,iEAAQ,SAAR,C;IACA,iEAAQ,SAAR,C;IACA,iEAAQ,SAAR,C;IACA,iEAAQ,SAAR,C;IACA,qEAAU,WAAV,C;IACA,qEAAU,WAAV,C;IACA,2DAAK,MAAL,C;IACA,6DAAM,OAAN,C;IACA,2EAAa,eAAb,C;IACA,iEAAQ,SAAR,C;IACA,2DAAK,MAAL,C;IACA,2EAAa,eAAb,C;IACA,yDAAI,KAAJ,C;IACA,uEAAW,YAAX,C;IACA,uFAAmB,oBAAnB,C;IACA,+DAAO,QAAP,C;IACA,2DAAK,MAAL,C;IACA,uEAAW,YAAX,C;IACA,iEAAQ,SAAR,C;IACA,yDAAI,KAAJ,C;IACA,mEAAS,UAAT,C;IACA,iEAAQ,SAAR,C;IACA,yDAAI,KAAJ,C;IACA,2EAAa,eAAb,C;IACA,qEAAU,WAAV,C;IACA,iFAAgB,iBAAhB,C;IACA,qEAAU,WAAV,C;IACA,qFAAkB,mBAAlB,C;IACA,2DAAK,MAAL,C;IACA,mEAAS,UAAT,C;IACA,2DAAK,MAAL,C;IACA,uEAAW,YAAX,C;IACA,qEAAU,WAAV,C;IACA,uEAAW,YAAX,C;IACA,6DAAM,OAAN,C;IACA,6EAAc,eAAd,C;IACA,6DAAM,OAAN,C;IACA,+EAAe,gBAAf,C;IACA,2EAAa,eAAb,C;IACA,iFAAgB,iBAAhB,C;IACA,uEAAW,YAAX,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,+DAAO,QAAP,C;IACA,6EAAc,eAAd,C;IACA,iFAAgB,iBAAhB,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,kBAAX,C;IACA,iEAAQ,SAAR,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,+EAAe,gBAAf,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,qEAAU,WAAV,C;IACA,yDAAI,KAAJ,C;IACA,6EAAc,eAAd,C;IACA,+DAAO,QAAP,C;IACA,+EAAe,gBAAf,C;IACA,2DAAK,MAAL,C;IACA,mEAAS,UAAT,C;IACA,6EAAc,eAAd,C;IACA,2FAAqB,sBAArB,C;IACA,uFAAmB,oBAAnB,C;IACA,qFAAkB,mBAAlB,C;IACA,2FAAqB,sBAArB,C;IACA,yEAAY,aAAZ,C;IACA,+EAAe,gBAAf,C;IACA,iEAAQ,SAAR,C;IACA,iFAAgB,iBAAhB,C;IACA,yEAAY,aAAZ,C;IACA,qEAAU,WAAV,C;IACA,6DAAM,OAAN,C;IACA,mEAAS,UAAT,C;IACA,iEAAQ,SAAR,C;IACA,mEAAS,UAAT,C;IACA,mEAAS,UAAT,C;IACA,qFAAkB,mBAAlB,C;IACA,yFAAoB,qBAApB,C;IACA,qFAAkB,mBAAlB,C;IACA,yFAAoB,qBAApB,C;IACA,uEAAW,YAAX,C;IACA,6DAAM,OAAN,C;IACA,yFAAoB,qBAApB,C;IACA,2FAAqB,sBAArB,C;IACA,iEAAQ,SAAR,C;IACA,+DAAO,QAAP,C;IACA,+EAAe,gBAAf,C;IACA,iFAAgB,iBAAhB,C;IACA,6FAAsB,uBAAtB,C;IACA,qFAAkB,mBAAlB,C;IACA,iGAAwB,yBAAxB,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,+EAAe,gBAAf,C;IACA,+DAAO,QAAP,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,uEAAW,YAAX,C;IACA,qFAAkB,mBAAlB,C;IACA,+EAAe,gBAAf,C;IACA,2DAAK,MAAL,C;IACA,6DAAM,OAAN,C;IACA,6EAAc,eAAd,C;IACA,iGAAwB,yBAAxB,C;IACA,iFAAgB,iBAAhB,C;IACA,6EAAc,eAAd,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,qEAAU,WAAV,C;IACA,iFAAgB,iBAAhB,C;IACA,+EAAe,gBAAf,C;IACA,6EAAc,eAAd,C;IACA,+EAAe,gBAAf,C;IACA,iFAAgB,iBAAhB,C;IACA,6DAAM,OAAN,C;IACA,yEAAY,aAAZ,C;IACA,2EAAa,eAAb,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,mGAAyB,0BAAzB,C;IACA,iGAAwB,yBAAxB,C;IACA,iGAAwB,yBAAxB,C;IACA,+EAAe,gBAAf,C;IACA,uFAAmB,oBAAnB,C;IACA,+FAAuB,wBAAvB,C;IACA,qEAAU,WAAV,C;IACA,uFAAmB,oBAAnB,C;IACA,mEAAS,UAAT,C;IACA,6DAAM,OAAN,C;IACA,uEAAW,YAAX,C;IACA,uFAAmB,oBAAnB,C;IACA,yFAAoB,qBAApB,C;IACA,6EAAc,eAAd,C;IACA,2EAAa,eAAb,C;IACA,uFAAmB,oBAAnB,C;IACA,6EAAc,eAAd,C;IACA,mEAAS,UAAT,C;IACA,2DAAK,MAAL,C;IACA,iEAAQ,SAAR,C;IACA,2DAAK,MAAL,C;IACA,qFAAkB,mBAAlB,C;IACA,mEAAS,UAAT,C;IACA,6DAAM,OAAN,C;IACA,yEAAY,aAAZ,C;IACA,uFAAmB,oBAAnB,C;IACA,+EAAe,gBAAf,C;IACA,+EAAe,gBAAf,C;IACA,6DAAM,OAAN,C;IACA,6EAAc,eAAd,C;IACA,+DAAO,QAAP,C;IACA,iEAAQ,SAAR,C;IACA,6EAAc,eAAd,C;IACA,iFAAgB,iBAAhB,C;IACA,6DAAM,OAAN,C;IACA,yEAAY,aAAZ,C;IACA,iFAAgB,iBAAhB,C;IACA,6DAAM,OAAN,C;IACA,2FAAqB,sBAArB,C;IACA,+FAAuB,wBAAvB,C;IACA,yEAAY,aAAZ,C;IACA,iEAAQ,SAAR,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,uDAAG,IAAH,C;IACA,2DAAK,MAAL,C;IACA,iEAAQ,SAAR,C;IACA,+DAAO,QAAP,C;IACA,6EAAc,eAAd,C;IACA,6FAAsB,uBAAtB,C;IACA,qFAAkB,mBAAlB,C;IACA,+EAAe,gBAAf,C;IACA,2FAAqB,sBAArB,C;IACA,iEAAQ,SAAR,C;IACA,+DAAO,QAAP,C;IACA,uEAAW,YAAX,C;IACA,+DAAO,QAAP,C;IACA,qEAAU,WAAV,C;IACA,qEAAU,WAAV,C;IACA,mEAAS,UAAT,C;IACA,6DAAM,OAAN,C;IACA,qEAAU,WAAV,C;IACA,+DAAO,QAAP,C;IACA,+EAAe,gBAAf,C;IACA,uEAAW,YAAX,C;IACA,iFAAgB,iBAAhB,C;IACA,iEAAQ,SAAR,C;IACA,2EAAa,eAAb,C;IACA,yEAAY,aAAZ,C;IACA,2DAAK,MAAL,C;IACA,2EAAa,eAAb,C;IACA,6FAAsB,uBAAtB,C;IACA,yEAAY,aAAZ,C;IACA,2EAAa,eAAb,C;IACA,+EAAe,gBAAf,C;IACA,+DAAO,QAAP,C;IACA,+DAAO,QAAP,C;IACA,mEAAS,UAAT,C;IACA,qEAAU,WAAV,C;IACA,qEAAU,WAAV,C;IACA,2DAAK,MAAL,C;IACA,iEAAQ,SAAR,C;IACA,mEAAS,UAAT,C;IACA,+DAAO,QAAP,C;IACA,6FAAsB,uBAAtB,C;IACA,2FAAqB,sBAArB,C;IACA,2FAAqB,sBAArB,C;IACA,iFAAgB,iBAAhB,C;IACA,2EAAa,eAAb,C;IACA,iEAAQ,SAAR,C;IACA,uEAAW,YAAX,C;IACA,+DAAO,QAAP,C;IACA,mEAAS,UAAT,C;IACA,uEAAW,YAAX,C;IACA,2DAAK,MAAL,C;IACA,+FAAuB,wBAAvB,C;IACA,qFAAkB,mBAAlB,C;IACA,yFAAoB,qBAApB,C;IACA,yGAA4B,6BAA5B,C;IACA,mGAAyB,0BAAzB,C;IACA,mEAAS,UAAT,C;IACA,6FAAsB,uBAAtB,C;IACA,iGAAwB,yBAAxB,C;IACA,uFAAmB,oBAAnB,C;IACA,yFAAoB,qBAApB,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,+FAAuB,wBAAvB,C;IACA,mGAAyB,0BAAzB,C;IACA,mGAAyB,0BAAzB,C;IACA,yFAAoB,qBAApB,C;IACA,6FAAsB,uBAAtB,C;IACA,qFAAkB,mBAAlB,C;IACA,+EAAe,gBAAf,C;IACA,+EAAe,gBAAf,C;IACA,iFAAgB,iBAAhB,C;IACA,mGAAyB,0BAAzB,C;IACA,+EAAe,gBAAf,C;IACA,6DAAM,OAAN,C;IACA,2DAAK,MAAL,C;IACA,mEAAS,UAAT,C;IACA,iFAAgB,iBAAhB,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,YAAX,C;IACA,uEAAW,YAAX,C;IACA,iEAAQ,SAAR,C;IACA,6FAAsB,uBAAtB,C;IACA,yIAA4C,6CAA5C,C;IACA,+FAAuB,wBAAvB,C;IACA,2FAAqB,sBAArB,C;IACA,yFAAoB,qBAApB,C;IACA,qFAAkB,mBAAlB,C;IACA,+FAAuB,wBAAvB,C;IACA,iFAAgB,iBAAhB,C;IACA,mEAAS,UAAT,C;IACA,+EAAe,gBAAf,C;IACA,qEAAU,WAAV,C;IACA,6EAAc,eAAd,C;IACA,qEAAU,WAAV,C;IACA,qFAAkB,mBAAlB,C;IACA,uEAAW,YAAX,C;IACA,uEAAW,YAAX,C;IACA,6EAAc,eAAd,C;IACA,yDAAI,KAAJ,C;IACA,uEAAW,YAAX,C;IACA,+DAAO,QAAP,C;IACA,2DAAK,MAAL,C;IACA,6EAAc,eAAd,C;IACA,yDAAI,KAAJ,C;IACA,qEAAU,WAAV,C;IACA,iEAAQ,SAAR,C;IACA,6EAAc,eAAd,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,6EAAc,eAAd,C;IACA,uEAAW,YAAX,C;IACA,2DAAK,MAAL,C;IACA,yEAAY,aAAZ,C;IACA,qEAAU,WAAV,C;IACA,6DAAM,OAAN,C;IACA,+FAAuB,wBAAvB,C;IACA,6FAAsB,uBAAtB,C;IACA,+FAAuB,wBAAvB,C;IACA,6FAAsB,uBAAtB,C;IACA,2DAAK,MAAL,C;IACA,qFAAkB,mBAAlB,C;IACA,iEAAQ,SAAR,C;IACA,6DAAM,OAAN,C;IACA,2FAAqB,sBAArB,C;IACA,uEAAW,YAAX,C;IACA,uEAAW,YAAX,C;IACA,iFAAgB,iBAAhB,C;IACA,6DAAM,OAAN,C;IACA,iGAAwB,yBAAxB,C;IACA,mGAAyB,0BAAzB,C;IACA,iEAAQ,SAAR,C;IACA,6EAAc,eAAd,C;IACA,qEAAU,WAAV,C;IACA,+DAAO,QAAP,C;IACA,uFAAmB,oBAAnB,C;IACA,+EAAe,gBAAf,C;IACA,uEAAW,YAAX,C;IACA,uEAAW,YAAX,C;IACA,qEAAU,WAAV,C;IACA,2FAAqB,sBAArB,C;IACA,6EAAc,eAAd,C;IACA,2EAAa,eAAb,C;IACA,2DAAK,MAAL,C;IACA,6EAAc,eAAd,C;IACA,2EAAa,eAAb,C;IACA,6EAAc,eAAd,C;IACA,qFAAkB,mBAAlB,C;IACA,yDAAI,KAAJ,C;IACA,+EAAe,gBAAf,C;IACA,+DAAO,QAAP,C;IACA,+EAAe,gBAAf,C;IACA,uEAAW,YAAX,C;IACA,qEAAU,WAAV,C;IACA,2EAAa,eAAb,C;IACA,iEAAQ,SAAR,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,iEAAQ,SAAR,C;IACA,iEAAQ,SAAR,C;IACA,mEAAS,UAAT,C;IACA,uEAAW,YAAX,C;IACA,mEAAS,UAAT,C;IACA,+EAAe,gBAAf,C;IACA,6EAAc,eAAd,C;IACA,qEAAU,WAAV,C;IACA,mEAAS,UAAT,C;IACA,6DAAM,OAAN,C;IACA,mEAAS,UAAT,C;IACA,iEAAQ,SAAR,C;IACA,qEAAU,WAAV,C;IACA,6DAAM,OAAN,C;IACA,yDAAI,KAAJ,C;IACA,6DAAM,OAAN,C;IACA,2DAAK,MAAL,C;IACA,mEAAS,UAAT,C;IACA,qEAAU,WAAV,C;IACA,2DAAK,MAAL,C;IACA,6EAAc,eAAd,C;IACA,iEAAQ,SAAR,C;IACA,6DAAM,OAAN,C;IACA,2DAAK,MAAL,C;IACA,qGAA0B,2BAA1B,C;IACA,qEAAU,WAAV,C;IACA,qEAAU,WAAV,C;IACA,6EAAc,eAAd,C;IACA,6EAAc,eAAd,C;IACA,yEAAY,aAAZ,C;IACA,2DAAK,MAAL,C;IACA,qEAAU,WAAV,C;IACA,6EAAc,eAAd,C;IACA,uDAAG,IAAH,C;IACA,qEAAU,WAAV,C;IACA,2DAAK,MAAL,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,+DAAO,QAAP,C;IACA,yDAAI,KAAJ,C;IACA,6EAAc,eAAd,C;IACA,6FAAsB,uBAAtB,C;IACA,6FAAsB,uBAAtB,C;IACA,uFAAmB,oBAAnB,C;IACA,qEAAU,WAAV,C;IACA,uEAAW,YAAX,C;IACA,yEAAY,aAAZ,C;IACA,6EAAc,eAAd,C;IACA,mEAAS,UAAT,C;IACA,2EAAa,eAAb,C;IACA,iFAAgB,iBAAhB,C;IACA,yEAAY,aAAZ,C;IACA,uEAAW,YAAX,C;IACA,6EAAc,eAAd,C;IACA,yEAAY,aAAZ,C;IACA,uEAAW,YAAX,C;IACA,2EAAa,eAAb,C;IACA,mEAAS,UAAT,C;IACA,6EAAc,eAAd,C;IACA,qEAAU,WAAV,C;IACA,yEAAY,aAAZ,C;IACA,uEAAW,YAAX,C;IACA,yEAAY,aAAZ,C;IACA,qEAAU,WAAV,C;IACA,mEAAS,UAAT,C;IACA,uEAAW,YAAX,C;IACA,+EAAe,gBAAf,C;IACA,uEAAW,YAAX,C;IACA,qEAAU,WAAV,C;IACA,yEAAY,aAAZ,C;IACA,yEAAY,aAAZ,C;IACA,uEAAW,YAAX,C;IACA,qEAAU,WAAV,C;IACA,iEAAQ,SAAR,C;IACA,mEAAS,UAAT,C;IACA,qEAAU,WAAV,C;IACA,iEAAQ,SAAR,C;IACA,6DAAM,OAAN,C;IACA,yEAAY,aAAZ,C;IACA,iEAAQ,SAAR,C;IACA,qEAAU,WAAV,C;IACA,iFAAgB,iBAAhB,C;IACA,6EAAc,eAAd,C;IACA,mEAAS,UAAT,C;IACA,uDAAG,IAAH,C;IACA,yDAAI,KAAJ,C;IACA,qEAAU,WAAV,C;IACA,iEAAQ,SAAR,C;IACA,mEAAS,UAAT,C;IACA,iEAAQ,SAAR,C;IACA,2DAAK,MAAL,C;IACA,qEAAU,WAAV,C;IACA,+EAAe,gBAAf,C;IACA,2DAAK,MAAL,C;IACA,qEAAU,WAAV,C;IACA,2FAAqB,sBAArB,C;IACA,iEAAQ,SAAR,C;IACA,mEAAS,UAAT,C;IACA,2EAAa,eAAb,C;EAv6BJ,C;;;IAII,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,0D;EAAA,C;;;IACA,yB;IAAA,uD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,yD;EAAA,C;;;IACA,yB;IAAA,uD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,wD;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,wE;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,gD;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,mD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,oD;EAAA,C;;;IACA,yB;IAAA,qD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,8C;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sD;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,mC;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,kD;EAAA,C;;;IACA,yB;IAAA,+C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,uC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,kC;EAAA,C;;;IACA,yB;IAAA,wC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,4C;EAAA,C;;;IACA,yB;IAAA,0C;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,+B;EAAA,C;;;IACA,yB;IAAA,gC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,2C;EAAA,C;;;IACA,yB;IAAA,iC;EAAA,C;;;IACA,yB;IAAA,sC;EAAA,C;;;IACA,yB;IAAA,iD;EAAA,C;;;IACA,yB;IAAA,oC;EAAA,C;;;IACA,yB;IAAA,qC;EAAA,C;;;IACA,yB;IAAA,yC;EAAA,C;;;MAGwC,gBAA5B,QAAS,eAAc,GAAd,C;MhDr2BrB,SgDs2BQ,UAAU,KAAI,gBAAJ,C;MhDt2BlB,SgDu2BQ,eAAc,uB;MAFV,OhDp2BL,S;IgDo2BK,C;;;;;;;;IA16BhB,w1pC;EAAA,C;;;IAAA,a;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,8B;QAAA,wD;MAAA,mB;QAAA,6C;MAAA,sB;QAAA,gD;MAAA,W;QAAA,qC;MAAA,W;QAAA,qC;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,0B;QAAA,oD;MAAA,oB;QAAA,8C;MAAA,yB;QAAA,mD;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,c;QAAA,wC;MAAA,yB;QAAA,mD;MAAA,gC;QAAA,0D;MAAA,qC;QAAA,+D;MAAA,kC;QAAA,4D;MAAA,mC;QAAA,6D;MAAA,oC;QAAA,8D;MAAA,kC;QAAA,4D;MAAA,mC;QAAA,6D;MAAA,2B;QAAA,qD;MAAA,6B;QAAA,uD;MAAA,e;QAAA,yC;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,oB;QAAA,8C;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,8B;QAAA,wD;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,qB;QAAA,+C;MAAA,6B;QAAA,uD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,uB;QAAA,iD;MAAA,oB;QAAA,8C;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,2B;QAAA,qD;MAAA,0B;QAAA,oD;MAAA,2B;QAAA,qD;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,uB;QAAA,iD;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,yB;QAAA,mD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,0B;QAAA,oD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,uB;QAAA,iD;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,yB;QAAA,mD;MAAA,oB;QAAA,8C;MAAA,a;QAAA,uC;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,a;QAAA,uC;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,uB;QAAA,iD;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,4B;QAAA,sD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,c;QAAA,wC;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,sB;QAAA,gD;MAAA,2B;QAAA,qD;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,2B;QAAA,qD;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,+B;QAAA,yD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,sB;QAAA,gD;MAAA,a;QAAA,uC;MAAA,oB;QAAA,8C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,iB;QAAA,2C;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,4B;QAAA,sD;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,sB;QAAA,gD;MAAA,gB;QAAA,0C;MAAA,2B;QAAA,qD;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,gB;QAAA,0C;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,+B;QAAA,yD;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,yB;QAAA,mD;MAAA,mB;QAAA,6C;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,c;QAAA,wC;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,uB;QAAA,iD;MAAA,e;QAAA,yC;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,0B;QAAA,oD;MAAA,sB;QAAA,gD;MAAA,yB;QAAA,mD;MAAA,0B;QAAA,oD;MAAA,uB;QAAA,iD;MAAA,iB;QAAA,2C;MAAA,W;QAAA,qC;MAAA,sB;QAAA,gD;MAAA,0B;QAAA,oD;MAAA,0B;QAAA,oD;MAAA,yB;QAAA,mD;MAAA,Y;QAAA,sC;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,W;QAAA,qC;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,2B;QAAA,qD;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,a;QAAA,uC;MAAA,uB;QAAA,iD;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,gB;QAAA,0C;MAAA,uB;QAAA,iD;MAAA,0B;QAAA,oD;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,2B;QAAA,qD;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,0B;QAAA,oD;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,2B;QAAA,qD;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,c;QAAA,wC;MAAA,mB;QAAA,6C;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,c;QAAA,wC;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,yB;QAAA,mD;MAAA,0B;QAAA,oD;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,yB;QAAA,mD;MAAA,0B;QAAA,oD;MAAA,yB;QAAA,mD;MAAA,8B;QAAA,wD;MAAA,8B;QAAA,wD;MAAA,qB;QAAA,+C;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,4B;QAAA,sD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,4B;QAAA,sD;MAAA,mC;QAAA,6D;MAAA,mC;QAAA,6D;MAAA,yB;QAAA,mD;MAAA,a;QAAA,uC;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,iB;QAAA,2C;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,W;QAAA,qC;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,U;QAAA,oC;MAAA,e;QAAA,yC;MAAA,c;QAAA,wC;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,a;QAAA,uC;MAAA,0B;QAAA,oD;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,a;QAAA,uC;MAAA,+B;QAAA,yD;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,a;QAAA,uC;MAAA,oB;QAAA,8C;MAAA,sB;QAAA,gD;MAAA,yB;QAAA,mD;MAAA,uB;QAAA,iD;MAAA,yB;QAAA,mD;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,W;QAAA,qC;MAAA,gB;QAAA,0C;MAAA,2B;QAAA,qD;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,yB;QAAA,mD;MAAA,0B;QAAA,oD;MAAA,yB;QAAA,mD;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,oB;QAAA,8C;MAAA,sB;QAAA,gD;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,c;QAAA,wC;MAAA,yB;QAAA,mD;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,c;QAAA,wC;MAAA,oB;QAAA,8C;MAAA,gB;QAAA,0C;MAAA,mB;QAAA,6C;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,+B;QAAA,yD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,sB;QAAA,gD;MAAA,mB;QAAA,6C;MAAA,6B;QAAA,uD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,yB;QAAA,mD;MAAA,uB;QAAA,iD;MAAA,iB;QAAA,2C;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,0B;QAAA,oD;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,oB;QAAA,8C;MAAA,a;QAAA,uC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,oB;QAAA,8C;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,W;QAAA,qC;MAAA,kB;QAAA,4C;MAAA,0B;QAAA,oD;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,W;QAAA,qC;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,W;QAAA,qC;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,iB;QAAA,2C;MAAA,yB;QAAA,mD;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,Y;QAAA,sC;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,a;QAAA,uC;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,uB;QAAA,iD;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,W;QAAA,qC;MAAA,qB;QAAA,+C;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,qB;QAAA,+C;MAAA,4B;QAAA,sD;MAAA,0B;QAAA,oD;MAAA,yB;QAAA,mD;MAAA,4B;QAAA,sD;MAAA,mB;QAAA,6C;MAAA,sB;QAAA,gD;MAAA,e;QAAA,yC;MAAA,uB;QAAA,iD;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,gB;QAAA,0C;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,kB;QAAA,4C;MAAA,a;QAAA,uC;MAAA,2B;QAAA,qD;MAAA,4B;QAAA,sD;MAAA,e;QAAA,yC;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,6B;QAAA,uD;MAAA,yB;QAAA,mD;MAAA,+B;QAAA,yD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,c;QAAA,wC;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,Y;QAAA,sC;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,+B;QAAA,yD;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,gC;QAAA,0D;MAAA,+B;QAAA,yD;MAAA,+B;QAAA,yD;MAAA,sB;QAAA,gD;MAAA,0B;QAAA,oD;MAAA,8B;QAAA,wD;MAAA,iB;QAAA,2C;MAAA,0B;QAAA,oD;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,kB;QAAA,4C;MAAA,0B;QAAA,oD;MAAA,2B;QAAA,qD;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,0B;QAAA,oD;MAAA,qB;QAAA,+C;MAAA,gB;QAAA,0C;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,Y;QAAA,sC;MAAA,yB;QAAA,mD;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,mB;QAAA,6C;MAAA,0B;QAAA,oD;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,a;QAAA,uC;MAAA,qB;QAAA,+C;MAAA,c;QAAA,wC;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,mB;QAAA,6C;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,4B;QAAA,sD;MAAA,8B;QAAA,wD;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,U;QAAA,oC;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,c;QAAA,wC;MAAA,qB;QAAA,+C;MAAA,6B;QAAA,uD;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,4B;QAAA,sD;MAAA,e;QAAA,yC;MAAA,c;QAAA,wC;MAAA,kB;QAAA,4C;MAAA,c;QAAA,wC;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,e;QAAA,yC;MAAA,oB;QAAA,8C;MAAA,mB;QAAA,6C;MAAA,Y;QAAA,sC;MAAA,oB;QAAA,8C;MAAA,6B;QAAA,uD;MAAA,mB;QAAA,6C;MAAA,oB;QAAA,8C;MAAA,sB;QAAA,gD;MAAA,c;QAAA,wC;MAAA,c;QAAA,wC;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,c;QAAA,wC;MAAA,6B;QAAA,uD;MAAA,4B;QAAA,sD;MAAA,4B;QAAA,sD;MAAA,uB;QAAA,iD;MAAA,oB;QAAA,8C;MAAA,e;QAAA,yC;MAAA,kB;QAAA,4C;MAAA,c;QAAA,wC;MAAA,gB;QAAA,0C;MAAA,kB;QAAA,4C;MAAA,Y;QAAA,sC;MAAA,8B;QAAA,wD;MAAA,yB;QAAA,mD;MAAA,2B;QAAA,qD;MAAA,mC;QAAA,6D;MAAA,gC;QAAA,0D;MAAA,gB;QAAA,0C;MAAA,6B;QAAA,uD;MAAA,+B;QAAA,yD;MAAA,0B;QAAA,oD;MAAA,2B;QAAA,qD;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,8B;QAAA,wD;MAAA,gC;QAAA,0D;MAAA,gC;QAAA,0D;MAAA,2B;QAAA,qD;MAAA,6B;QAAA,uD;MAAA,yB;QAAA,mD;MAAA,sB;QAAA,gD;MAAA,sB;QAAA,gD;MAAA,uB;QAAA,iD;MAAA,gC;QAAA,0D;MAAA,sB;QAAA,gD;MAAA,a;QAAA,uC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,e;QAAA,yC;MAAA,6B;QAAA,uD;MAAA,mD;QAAA,6E;MAAA,8B;QAAA,wD;MAAA,4B;QAAA,sD;MAAA,2B;QAAA,qD;MAAA,yB;QAAA,mD;MAAA,8B;QAAA,wD;MAAA,uB;QAAA,iD;MAAA,gB;QAAA,0C;MAAA,sB;QAAA,gD;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,yB;QAAA,mD;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,W;QAAA,qC;MAAA,kB;QAAA,4C;MAAA,c;QAAA,wC;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,W;QAAA,qC;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,qB;QAAA,+C;MAAA,kB;QAAA,4C;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,8B;QAAA,wD;MAAA,6B;QAAA,uD;MAAA,8B;QAAA,wD;MAAA,6B;QAAA,uD;MAAA,Y;QAAA,sC;MAAA,yB;QAAA,mD;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,4B;QAAA,sD;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,uB;QAAA,iD;MAAA,a;QAAA,uC;MAAA,+B;QAAA,yD;MAAA,gC;QAAA,0D;MAAA,e;QAAA,yC;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,c;QAAA,wC;MAAA,0B;QAAA,oD;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,4B;QAAA,sD;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,oB;QAAA,8C;MAAA,qB;QAAA,+C;MAAA,yB;QAAA,mD;MAAA,W;QAAA,qC;MAAA,sB;QAAA,gD;MAAA,c;QAAA,wC;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,oB;QAAA,8C;MAAA,e;QAAA,yC;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,kB;QAAA,4C;MAAA,gB;QAAA,0C;MAAA,sB;QAAA,gD;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,a;QAAA,uC;MAAA,gB;QAAA,0C;MAAA,e;QAAA,yC;MAAA,iB;QAAA,2C;MAAA,a;QAAA,uC;MAAA,W;QAAA,qC;MAAA,a;QAAA,uC;MAAA,Y;QAAA,sC;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,qB;QAAA,+C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,Y;QAAA,sC;MAAA,iC;QAAA,2D;MAAA,iB;QAAA,2C;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,Y;QAAA,sC;MAAA,iB;QAAA,2C;MAAA,qB;QAAA,+C;MAAA,U;QAAA,oC;MAAA,iB;QAAA,2C;MAAA,Y;QAAA,sC;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,c;QAAA,wC;MAAA,W;QAAA,qC;MAAA,qB;QAAA,+C;MAAA,6B;QAAA,uD;MAAA,6B;QAAA,uD;MAAA,0B;QAAA,oD;MAAA,iB;QAAA,2C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,qB;QAAA,+C;MAAA,gB;QAAA,0C;MAAA,oB;QAAA,8C;MAAA,uB;QAAA,iD;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,qB;QAAA,+C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,oB;QAAA,8C;MAAA,gB;QAAA,0C;MAAA,qB;QAAA,+C;MAAA,iB;QAAA,2C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,mB;QAAA,6C;MAAA,iB;QAAA,2C;MAAA,gB;QAAA,0C;MAAA,kB;QAAA,4C;MAAA,sB;QAAA,gD;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,mB;QAAA,6C;MAAA,mB;QAAA,6C;MAAA,kB;QAAA,4C;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,gB;QAAA,0C;MAAA,iB;QAAA,2C;MAAA,e;QAAA,yC;MAAA,a;QAAA,uC;MAAA,mB;QAAA,6C;MAAA,e;QAAA,yC;MAAA,iB;QAAA,2C;MAAA,uB;QAAA,iD;MAAA,qB;QAAA,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;EAAW,C;;IAAqC,W;EAAA,C;;IAAhF,yB;MAAA,YAA2B,mB;IAAmB,oB;MAAA,OAAiC,mB;IACnI,kBAA/C,eAAW,OAAX,EAAoB,QAAS,MAA7B,EAAoC,SAApC,C;IlDpBJ,WkDoB2D,uB;IlDP3D,oD;aDtFJ,8B;ImD6FqF,ClDPjF,YkDOiF,SlDPjF,GAZO,WAYP,C;IkDOoG,IlDPpG,CAZO,WAYP,C;IkDOI,OlDnBG,W;EkDmBH,C;;IAGwH,OAAA,EAAG,W;EAAW,C;;IAAqC,W;EAAA,C;;IAAhF,yB;MAAA,YAA2B,mB;IAAmB,oB;MAAA,OAAiC,mB;IAC3H,kBAA/C,eAAW,OAAX,EAAoB,QAAS,MAA7B,EAAoC,SAApC,C;IlDxBJ,WkDwB2D,uB;IlDX3D,oD;aDtFJ,8B;ImDiGqF,ClDXjF,YkDWiF,SlDXjF,GAZO,WAYP,C;IkDWoG,IlDXpG,CAZO,WAYP,C;IkDWI,OlDvBG,W;EkDuBH,C;iHAGR,yB;IAAA,6B;IAAA,qD;IAAA,oE;IAAA,0C;;MACiI,OAAA,EAAG,W;IAAW,C;;MAAqC,W;IAAA,C;IADpL,kE;MAC2F,yB;QAAA,YAAoC,iB;MAAmB,oB;QAAA,OAAiC,mB;MAChH,kBAA3D,oBAA2B,OAAhB,YAAgB,CAA3B,EAAqC,SAArC,EAAgD,SAAhD,C;MlDhBJ,oD;eDtFJ,8B;MmDsGwE,ClDhBpE,YkDgBoE,SlDhBpE,GAAM,WAAN,C;MkDgBuF,IlDhBvF,CACO,WADP,C;MkDgBI,OlDfG,W;IkDeH,C;GAFR,C;iHAIA,yB;IAAA,6B;IAAA,qD;IAAA,oE;IAAA,0C;;MACkJ,OAAA,EAAG,W;IAAW,C;;MAAqC,W;IAAA,C;IADrM,iE;MAC4G,yB;QAAA,YAAoC,iB;MAAmB,oB;QAAA,OAAiC,mB;MAC5H,kBAAhE,oBAA2B,OAAhB,YAAgB,CAA3B,EAAqC,QAAS,MAA9C,EAAqD,SAArD,C;MlDjCJ,WkDiC4E,uB;MlDpB5E,oD;eDtFJ,8B;MmD0GsG,ClDpBlG,YkDoBkG,SlDpBlG,GAZO,WAYP,C;MkDoBqH,IlDpBrH,CAZO,WAYP,C;MkDoBI,OlDhCG,W;IkDgCH,C;GAFR,C;iHAI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}